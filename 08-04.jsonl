{
  "text": "Create a simple Python project with a main script and a utility script inside a utilities folder. The main script should read a file and count the number of lines. The utility script should contain a function to double the line count.",
  "file_structure": {
    "main.py": "",
    "utilities": {
      "utility.py": ""
    }
  },
  "code": {
    "main.py": "with open('input_file.txt', 'r') as file:\n    lines = file.readlines()\n    line_count = len(lines)\n    print(f'Number of lines: {line_count}')",
    "utilities/utility.py": "def double_count(count):\n    return count * 2"
  }
}
{
  "text": "Create a basic web application with an HTML page, a CSS file inside a styles folder, and a JavaScript file inside a scripts folder. The HTML page should have a title and a heading. The CSS file should set the background color to light blue. The JavaScript file should display an alert when the page loads.",
  "file_structure": {
    "index.html": "",
    "styles": {
      "main.css": ""
    },
    "scripts": {
      "main.js": ""
    }
  },
  "code": {
    "index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles/main.css\">\n    <script src=\"scripts/main.js\"></script>\n    <title>Basic Web Application</title>\n</head>\n<body>\n    <h1>Welcome to the Basic Web Application</h1>\n</body>\n</html>",
    "styles/main.css": "body {\n    background-color: lightblue;\n}",
    "scripts/main.js": "document.addEventListener('DOMContentLoaded', function() {\n    alert('Page has loaded!');\n});"
  }
}
{
  "text": "Create a web application that allows users to select a color and see its RGB and HEX values. The HTML page should have a color picker element and display boxes for showing the RGB and HEX values. The JavaScript file should handle updating the values when a new color is selected.",
  "file_structure": {
    "index.html": "",
    "styles": {
      "main.css": ""
    },
    "scripts": {
      "main.js": ""
    }
  },
  "code": {
    "index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles/main.css\">\n    <script src=\"scripts/main.js\"></script>\n    <title>Color Picker</title>\n</head>\n<body>\n    <h1>Color Picker</h1>\n    <input type=\"color\" id=\"color-picker\">\n    <div id=\"color-box\"></div>\n    <div id=\"rgb-box\"></div>\n    <div id=\"hex-box\"></div>\n</body>\n</html>",
    "styles/main.css": "body {\n    background-color: lightblue;\n}\n\nh1 {\n    font-size: 36px;\n}\n\n#color-picker {\n    display: block;\n    margin-top: 10px;\n}\n\n#color-box, #rgb-box, #hex-box {\n    display: inline-block;\n    width: 50px;\n    height: 50px;\n    margin-top: 10px;\n    margin-right: 10px;\n}\n\n#color-box {\n    border: 2px solid black;\n}\n\n#rgb-box {\n    background-color: white;\n}\n\n#hex-box {\n    background-color: white;\n}",
    "scripts/main.js": "const colorPicker = document.getElementById('color-picker');\nconst colorBox = document.getElementById('color-box');\nconst rgbBox = document.getElementById('rgb-box');\nconst hexBox = document.getElementById('hex-box');\n\nfunction updateBoxes(color) {\n    colorBox.style.backgroundColor = color;\n    const rgb = color.match(/\\d+/g);\n    rgbBox.textContent = `RGB: ${rgb[0]}, ${rgb[1]}, ${rgb[2]}`;\n    const hex = '#' + rgb.map(c => (+c).toString(16).padStart(2, '0')).join('');\n    hexBox.textContent = `HEX: ${hex}`;\n}\n\nupdateBoxes(colorPicker.value);\n\ncolorPicker.addEventListener('change', function(event) {\n    updateBoxes(event.target.value);\n});"
  }
}
{
  "text": "Create a web application that allows users to search for and view images. The HTML page should have an input field for entering a search term and a button for initiating the search. The page should also display the search results in the form of thumbnail images. The JavaScript file should handle searching for images and displaying them.",
  "file_structure": {
    "index.html": "",
    "styles": {
      "main.css": ""
    },
    "scripts": {
      "main.js": ""
    }
  },
  "code": {
    "index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles/main.css\">\n    <script src=\"scripts/main.js\"></script>\n    <title>Image Search</title>\n</head>\n<body>\n    <h1>Image Search</h1>\n    <form id=\"search-form\">\n        <input type=\"text\" id=\"search-input\" placeholder=\"Enter a search term\">\n        <button type=\"submit\">Search</button>\n    </form>\n    <div id=\"image-container\"></div>\n</body>\n</html>",
    "styles/main.css": "body {\n    background-color: lightblue;\n}\n\nh1 {\n    font-size: 36px;\n}\n\n#search-form {\n    margin-top: 10px;\n    margin-bottom: 10px;\n}\n\n#search-input {\n    width: 300px;\n}",
    "scripts/main.js": "const searchForm = document.getElementById('search-form');\nconst searchInput = document.getElementById('search-input');\nconst imageContainer = document.getElementById('image-container');\n\nfunction displayImages(images) {\n    imageContainer.innerHTML = '';\n    for (let i = 0; i < images.length; i++) {\n        const img = document.createElement('img');\n        img.src = images[i].thumbnailUrl;\n        imageContainer.appendChild(img);\n    }\n}\n\nsearchForm.addEventListener('submit', function(event) {\n    event.preventDefault();\n    const searchTerm = searchInput.value.trim();\n    if (searchTerm === '') {\n        alert('Please enter a search term.');\n        return;\n    }\n    const url = `https://jsonplaceholder.typicode.com/photos?albumId=1&q=${searchTerm}`;\n    fetch(url)\n        .then(response => response.json())\n        .then(data => {\n            displayImages(data);\n        });\n});"
  }
}
{
  "text": "Create a Python script that reads in a JSON file and calculates the total cost of all items in the file. The JSON file contains a list of dictionaries, where each dictionary represents an item and has keys for 'name' and 'cost'.",
  "file_structure": {
    "total_cost.py": ""
  },
  "code": {
    "total_cost.py": "import json\n\nfilename = input(\"Enter the name of the JSON file: \")\n\ntry:\n    with open(filename, \"r\") as file:\n        data = json.load(file)\n        total = sum(item[\"cost\"] for item in data)\n        print(f\"Total cost of all items: {total:.2f}\")\nexcept Exception as e:\n    print(f\"Error: {str(e)}\")\n"
  }
}
{
  "text": "Create a web application that allows users to create and view notes. The HTML page should have an input field for entering a new note title and a textarea for entering the note content. The page should also display a list of all the notes with their titles. The JavaScript file should handle adding notes to the list and displaying them.",
  "file_structure": {
    "index.html": "",
    "styles": {
      "main.css": ""
    },
    "scripts": {
      "main.js": ""
    }
  },
  "code": {
    "index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles/main.css\">\n    <script src=\"scripts/main.js\"></script>\n    <title>Note Taker</title>\n</head>\n<body>\n    <h1>Note Taker</h1>\n    <form id=\"add-form\">\n        <input type=\"text\" id=\"title-input\" placeholder=\"Enter a new note title\">\n        <textarea id=\"content-input\" placeholder=\"Enter the note content\"></textarea>\n        <button type=\"submit\">Add Note</button>\n    </form>\n    <ul id=\"note-list\"></ul>\n</body>\n</html>",
    "styles/main.css": "body {\n    background-color: lightblue;\n}\n\nh1 {\n    font-size: 36px;\n}\n\n#add-form {\n    margin-top: 10px;\n    margin-bottom: 10px;\n}\n\n#title-input, #content-input {\n    display: block;\n    margin-bottom: 10px;\n    width: 300px;\n}\n\n#content-input {\n    height: 100px;\n}",
    "scripts/main.js": "const addForm = document.getElementById('add-form');\nconst titleInput = document.getElementById('title-input');\nconst contentInput = document.getElementById('content-input');\nconst noteList = document.getElementById('note-list');\n\nfunction addNoteItem(title, content) {\n    const li = document.createElement('li');\n    li.innerHTML = `<h3>${title}</h3><p>${content}</p>`;\n    noteList.appendChild(li);\n}\n\naddForm.addEventListener('submit', function(event) {\n    event.preventDefault();\n    const title = titleInput.value.trim();\n    const content = contentInput.value.trim();\n    if (title === '') {\n        alert('Please enter a note title.');\n        return;\n    }\n    if (content === '') {\n        alert('Please enter note content.');\n        return;\n    }\n    addNoteItem(title, content);\n    titleInput.value = '';\n    contentInput.value = '';\n});",
  }
}
{
  "text": "Create a web application that allows users to create and view a to-do list. The HTML page should have an input field for entering a new to-do item, a button for adding the item to the list, and a list of all the to-do items. The JavaScript file should handle adding items to the list and displaying them.",
  "file_structure": {
    "index.html": "",
    "styles": {
      "main.css": ""
    },
    "scripts": {
      "main.js": ""
    }
  },
  "code": {
    "index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles/main.css\">\n    <script src=\"scripts/main.js\"></script>\n    <title>To-Do List</title>\n</head>\n<body>\n    <h1>To-Do List</h1>\n    <form id=\"add-form\">\n        <input type=\"text\" id=\"add-input\" placeholder=\"Enter a new to-do item\">\n        <button type=\"submit\">Add</button>\n    </form>\n    <ul id=\"todo-list\"></ul>\n</body>\n</html>",
    "styles/main.css": "body {\n    background-color: lightblue;\n}\n\nh1 {\n    font-size: 36px;\n}\n\n#add-form {\n    margin-top: 10px;\n    margin-bottom: 10px;\n}\n\n#add-input {\n    width: 300px;\n}",
    "scripts/main.js": "const addForm = document.getElementById('add-form');\nconst addInput = document.getElementById('add-input');\nconst todoList = document.getElementById('todo-list');\n\nfunction addTodoItem(item) {\n    const li = document.createElement('li');\n    li.innerText = item;\n    todoList.appendChild(li);\n}\n\naddForm.addEventListener('submit', function(event) {\n    event.preventDefault();\n    const item = addInput.value.trim();\n    if (item === '') {\n        alert('Please enter a to-do item.');\n        return;\n    }\n    addTodoItem(item);\n    addInput.value = '';\n});",
  }
}
{
  "text": "Create a Python script that generates a line chart from two columns of data in a CSV file. The script should prompt the user for the name of the input file, the names of the columns to plot, and the title and axis labels for the chart.",
  "file_structure": {
    "csv_to_linechart.py": ""
  },
  "code": {
    "csv_to_linechart.py": "import csv\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ninput_filename = input('Enter the name of the CSV file: ')\nx_column_name = input('Enter the name of the X column: ')\ny_column_name = input('Enter the name of the Y column: ')\ntitle = input('Enter the title of the chart: ')\nx_label = input('Enter the label for the X axis: ')\ny_label = input('Enter the label for the Y axis: ')\n\ntry:\n    with open(input_filename, 'r') as file:\n        reader = csv.reader(file)\n        headers = next(reader)\n        data = {header: [] for header in headers}\n        for row in reader:\n            for header, value in zip(headers, row):\n                data[header].append(value)\n    df = pd.DataFrame(data)\n    x_values = df[x_column_name].astype(float)\n    y_values = df[y_column_name].astype(float)\n    plt.plot(x_values, y_values)\n    plt.title(title)\n    plt.xlabel(x_label)\n    plt.ylabel(y_label)\n    plt.show()\nexcept Exception as e:\n    print(f'Error: {str(e)}')",
  }
}
{
  "text": "Create a web application that allows users to search for and view images from the Unsplash API. The HTML page should have a search bar and a grid of images. The JavaScript file should handle searching for images and displaying them in the grid.",
  "file_structure": {
    "index.html": "",
    "styles": {
      "main.css": ""
    },
    "scripts": {
      "main.js": ""
    }
  },
  "code": {
    "index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles/main.css\">\n    <script src=\"scripts/main.js\"></script>\n    <title>Image Search</title>\n</head>\n<body>\n    <h1>Image Search</h1>\n    <form id=\"search-form\">\n        <input type=\"text\" id=\"search-input\" placeholder=\"Search for images\">\n        <button type=\"submit\">Search</button>\n    </form>\n    <div id=\"image-grid\"></div>\n</body>\n</html>",
    "styles/main.css": "body {\n    background-color: lightblue;\n}\n\nh1 {\n    font-size: 36px;\n}\n\n#search-form {\n    margin-top: 10px;\n    margin-bottom: 10px;\n}\n\n#search-input {\n    width: 300px;\n}",
    "scripts/main.js": "const searchForm = document.getElementById('search-form');\nconst searchInput = document.getElementById('search-input');\nconst imageGrid = document.getElementById('image-grid');\n\nasync function searchImages(query) {\n    const response = await fetch(`https://api.unsplash.com/search/photos?query=${encodeURIComponent(query)}&client_id=YOUR_ACCESS_KEY_HERE`);\n    const data = await response.json();\n    return data.results;\n}\n\nfunction displayImages(images) {\n    let html = '';\n    for (const image of images) {\n        html += `<div class=\"image-container\"><img src=\"${image.urls.regular}\" alt=\"${image.alt_description}\"></div>`;\n    }\n    imageGrid.innerHTML = html;\n}\n\nsearchForm.addEventListener('submit', async function(event) {\n    event.preventDefault();\n    const query = searchInput.value.trim();\n    if (query === '') {\n        alert('Please enter a search term.');\n        return;\n    }\n    const images = await searchImages(query);\n    displayImages(images);\n    searchInput.value = '';\n});",
  }
}
{
  "text": "Create a Python script that generates a scatter plot from two columns of data in a CSV file. The script should prompt the user for the name of the input file, the names of the columns to plot, and the title and axis labels for the chart.",
  "file_structure": {
    "csv_to_scatterplot.py": ""
  },
  "code": {
    "csv_to_scatterplot.py": "import csv\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ninput_filename = input('Enter the name of the CSV file: ')\nx_column_name = input('Enter the name of the X column: ')\ny_column_name = input('Enter the name of the Y column: ')\ntitle = input('Enter the title of the chart: ')\nx_label = input('Enter the label for the X axis: ')\ny_label = input('Enter the label for the Y axis: ')\n\ntry:\n    with open(input_filename, 'r') as file:\n        reader = csv.reader(file)\n        headers = next(reader)\n        data = {header: [] for header in headers}\n        for row in reader:\n            for header, value in zip(headers, row):\n                data[header].append(value)\n    df = pd.DataFrame(data)\n    x_values = df[x_column_name].astype(float)\n    y_values = df[y_column_name].astype(float)\n    plt.scatter(x_values, y_values)\n    plt.title(title)\n    plt.xlabel(x_label)\n    plt.ylabel(y_label)\n    plt.show()\nexcept Exception as e:\n    print(f'Error: {str(e)}')",
  }
}
{
  "text": "Create a web application that allows users to create and save notes. The HTML page should have a text area for entering the note content and a button for saving the note. The JavaScript file should handle saving the note to local storage and displaying a list of saved notes.",
  "file_structure": {
    "index.html": "",
    "styles": {
      "main.css": ""
    },
    "scripts": {
      "main.js": ""
    }
  },
  "code": {
    "index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles/main.css\">\n    <script src=\"scripts/main.js\"></script>\n    <title>Notes</title>\n</head>\n<body>\n    <h1>Notes</h1>\n    <form id=\"note-form\">\n        <textarea id=\"note-text\" rows=\"5\" cols=\"50\"></textarea>\n        <button type=\"submit\">Save Note</button>\n    </form>\n    <ul id=\"note-list\"></ul>\n</body>\n</html>",
    "styles/main.css": "body {\n    background-color: lightblue;\n}\n\nh1 {\n    font-size: 36px;\n}\n\n#note-text {\n    margin-top: 10px;\n    margin-bottom: 10px;\n}",
    "scripts/main.js": "const noteForm = document.getElementById('note-form');\nconst noteTextarea = document.getElementById('note-text');\nconst noteList = document.getElementById('note-list');\n\nfunction saveNote() {\n    const note = noteTextarea.value.trim();\n    if (note === '') {\n        alert('Please enter a note.');\n        return;\n    }\n    const notes = JSON.parse(localStorage.getItem('notes') || '[]');\n    notes.push(note);\n    localStorage.setItem('notes', JSON.stringify(notes));\n    displayNotes();\n    noteTextarea.value = '';\n}\n\nfunction displayNotes() {\n    const notes = JSON.parse(localStorage.getItem('notes') || '[]');\n    let html = '';\n    for (const note of notes) {\n        html += `<li>${note}</li>`;\n    }\n    noteList.innerHTML = html;\n}\n\nnoteForm.addEventListener('submit', function(event) {\n    event.preventDefault();\n    saveNote();\n});\n\ndisplayNotes();",
  }
}
{
  "text": "Create a Python script that reads a text file and generates a word cloud. The script should prompt the user for the name of the input file, the maximum number of words to include in the cloud, and the name of an image file to save the cloud to.",
  "file_structure": {
    "text_to_wordcloud.py": ""
  },
  "code": {
    "text_to_wordcloud.py": "from wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\ninput_filename = input('Enter the name of the text file: ')\nmax_words = int(input('Enter the maximum number of words to include: '))\noutput_filename = input('Enter the name of the output image file: ')\n\ntry:\n    with open(input_filename, 'r') as file:\n        text = file.read()\n    wordcloud = WordCloud(max_words=max_words).generate(text)\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis('off')\n    plt.savefig(output_filename)\n    print(f'Successfully created word cloud and saved it to {output_filename}')\nexcept Exception as e:\n    print(f'Error: {str(e)}')",
  }
}
{
  "text": "Create a web application that allows users to search for images using the Flickr API. The HTML page should have a search box and a button for submitting the search. The JavaScript file should handle the search and display the resulting images in a grid.",
  "file_structure": {
    "index.html": "",
    "styles": {
      "main.css": ""
    },
    "scripts": {
      "main.js": ""
    }
  },
  "code": {
    "index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles/main.css\">\n    <script src=\"scripts/main.js\"></script>\n    <title>Flickr Image Search</title>\n</head>\n<body>\n    <h1>Flickr Image Search</h1>\n    <form id=\"search-form\">\n        <input type=\"text\" id=\"search-input\">\n        <button type=\"submit\">Search</button>\n    </form>\n    <div id=\"image-grid\"></div>\n</body>\n</html>",
    "styles/main.css": "body {\n    background-color: lightblue;\n}\n\nh1 {\n    font-size: 36px;\n}",
    "scripts/main.js": "const apiKey = 'YOUR_API_KEY_HERE';\n\nconst searchForm = document.getElementById('search-form');\nconst searchInput = document.getElementById('search-input');\nconst imageGrid = document.getElementById('image-grid');\n\nfunction searchImages(event) {\n    event.preventDefault();\n    const searchTerm = searchInput.value.trim();\n    if (searchTerm === '') {\n        alert('Please enter a search term.');\n        return;\n    }\n    fetch(`https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&text=${searchTerm}&format=json&nojsoncallback=1`)\n        .then(response => response.json())\n        .then(data => {\n            const photos = data.photos.photo;\n            let html = '';\n            for (const photo of photos) {\n                const imageUrl = `https://live.staticflickr.com/${photo.server}/${photo.id}_${photo.secret}_q.jpg`;\n                html += `<img src=\"${imageUrl}\" alt=\"${photo.title}\">`;\n            }\n            imageGrid.innerHTML = html;\n        })\n        .catch(error => {\n            console.error(error);\n            alert('Error searching for images.');\n        });\n}\n\nsearchForm.addEventListener('submit', searchImages);",
  }
}
{
  "text": "Create a Python script that reads a JSON file and generates a line chart showing the trend of a numeric value over time. The script should prompt the user for the name of the input file, the name of the value to analyze, and the title of the chart.",
  "file_structure": {
    "json_to_linechart.py": ""
  },
  "code": {
    "json_to_linechart.py": "import json\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ninput_filename = input('Enter the name of the JSON file: ')\nvalue_name = input('Enter the name of the value to analyze: ')\ntitle = input('Enter the title of the chart: ')\n\ntry:\n    with open(input_filename, 'r') as file:\n        data = json.load(file)\n    df = pd.DataFrame(data)\n    df.plot(x='date', y=value_name)\n    plt.title(title)\n    plt.show()\nexcept Exception as e:\n    print(f'Error: {str(e)}')",
  }
}
{
  "text": "Create a web application that allows users to upload and download files. The HTML page should have a form for uploading files, a list displaying all uploaded files, and a button for downloading each file. The JavaScript file should handle uploading files using AJAX and displaying the list of uploaded files.",
  "file_structure": {
    "index.html": "",
    "styles": {
      "main.css": ""
    },
    "scripts": {
      "main.js": ""
    },
    "uploads": {}
  },
  "code": {
    "index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles/main.css\">\n    <script src=\"scripts/main.js\"></script>\n    <title>File Uploads</title>\n</head>\n<body>\n    <h1>File Uploads</h1>\n    <form id=\"upload-form\" enctype=\"multipart/form-data\">\n        <input type=\"file\" name=\"file\">\n        <button type=\"submit\">Upload</button>\n    </form>\n    <ul id=\"file-list\"></ul>\n</body>\n</html>",
    "styles/main.css": "body {\n    background-color: lightblue;\n}\n\nh1 {\n    font-size: 36px;\n}",
    "scripts/main.js": "document.addEventListener('DOMContentLoaded', function() {\n    const uploadForm = document.getElementById('upload-form');\n    const fileList = document.getElementById('file-list');\n\n    function uploadFile(event) {\n        event.preventDefault();\n        const formData = new FormData(uploadForm);\n        const xhr = new XMLHttpRequest();\n        xhr.open('POST', 'upload.php');\n        xhr.onload = function() {\n            if (xhr.status === 200) {\n                addFileToList(xhr.responseText);\n            } else {\n                alert('Error uploading file.');\n            }\n        };\n        xhr.send(formData);\n    }\n\n    function addFileToList(filename) {\n        const li = document.createElement('li');\n        const link = document.createElement('a');\n        link.textContent = filename;\n        link.href = `uploads/${filename}`;\n        link.target = '_blank';\n        const downloadBtn = document.createElement('button');\n        downloadBtn.textContent = 'Download';\n        downloadBtn.addEventListener('click', function() {\n            window.open(`uploads/${filename}`, '_blank');\n        });\n        li.appendChild(link);\n        li.appendChild(downloadBtn);\n        fileList.appendChild(li);\n    }\n\n    uploadForm.addEventListener('submit', uploadFile);\n});",
  }
}
{
  "text": "Create a Python script that reads a CSV file and generates a bar chart showing the distribution of values in one of the columns. The script should prompt the user for the name of the input file, the name of the column to analyze, and the title of the chart.",
  "file_structure": {
    "csv_to_barchart.py": ""
  },
  "code": {
    "csv_to_barchart.py": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ninput_filename = input('Enter the name of the CSV file: ')\ncolumn_name = input('Enter the name of the column to analyze: ')\ntitle = input('Enter the title of the chart: ')\n\ntry:\n    df = pd.read_csv(input_filename)\n    df[column_name].value_counts().plot(kind='bar')\n    plt.title(title)\n    plt.show()\nexcept Exception as e:\n    print(f'Error: {str(e)}')",
  }
}
{
  "text": "Create a web application that allows users to create and manage a to-do list. The HTML page should have an input field for entering a new task, a button for adding the task to the list, and a list displaying all tasks. The JavaScript file should handle adding tasks to the list and marking tasks as complete.",
  "file_structure": {
    "index.html": "",
    "styles": {
      "main.css": ""
    },
    "scripts": {
      "main.js": ""
    }
  },
  "code": {
    "index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles/main.css\">\n    <script src=\"scripts/main.js\"></script>\n    <title>To-Do List</title>\n</head>\n<body>\n    <h1>To-Do List</h1>\n    <p>Enter a new task:</p>\n    <input type=\"text\" id=\"new-task\">\n    <button id=\"add-btn\">Add Task</button>\n    <ul id=\"task-list\"></ul>\n</body>\n</html>",
    "styles/main.css": "body {\n    background-color: lightblue;\n}\n\nh1 {\n    font-size: 36px;\n}",
    "scripts/main.js": "document.addEventListener('DOMContentLoaded', function() {\n    const addBtn = document.getElementById('add-btn');\n    const newTaskInput = document.getElementById('new-task');\n    const taskList = document.getElementById('task-list');\n\n    function addTask() {\n        const taskText = newTaskInput.value.trim();\n        if (taskText === '') {\n            alert('Please enter a task.');\n            return;\n        }\n        const taskItem = document.createElement('li');\n        const taskLabel = document.createElement('label');\n        const taskCheckbox = document.createElement('input');\n        taskCheckbox.type = 'checkbox';\n        taskLabel.textContent = taskText;\n        taskItem.appendChild(taskCheckbox);\n        taskItem.appendChild(taskLabel);\n        taskList.appendChild(taskItem);\n        newTaskInput.value = '';\n    }\n\n    addBtn.addEventListener('click', addTask);\n    newTaskInput.addEventListener('keyup', function(event) {\n        if (event.key === 'Enter') {\n            addTask();\n        }\n    });\n});"
  }
}
{
  "text": "Create a Python script that reads an Excel file and converts it to a CSV file. The script should prompt the user for the names of the input and output files. It should also allow the user to specify the sheet name to read from, and the delimiter to use in the CSV file.",
  "file_structure": {
    "excel_to_csv.py": ""
  },
  "code": {
    "excel_to_csv.py": "import pandas as pd\n\ninput_filename = input('Enter the name of the Excel file: ')\noutput_filename = input('Enter the name of the CSV file: ')\nsheet_name = input('Enter the name of the sheet to read: ')\ndelimiter = input('Enter the delimiter for the CSV file: ')\n\ntry:\n    df = pd.read_excel(input_filename, sheet_name=sheet_name)\n    df.to_csv(output_filename, index=False, sep=delimiter)\n    print(f'Successfully converted {input_filename} to {output_filename} using sheet {sheet_name} and delimiter {delimiter}')\nexcept Exception as e:\n    print(f'Error: {str(e)}')",
  }
}
{
  "text": "Create a simple Flask application that displays the current time on a webpage. The webpage should update the time every second without requiring the user to refresh the page.",
  "file_structure": {
    "app.py": "",
    "templates": {
      "index.html": ""
    }
  },
  "code": {
    "app.py": "from flask import Flask, render_template\nimport datetime\nimport time\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/time')\ndef get_time():\n    while True:\n        time.sleep(1)\n        now = datetime.datetime.now()\n        yield 'data: %s\n\n' % now.strftime('%H:%M:%S')\n\n@app.route('/stream')\ndef stream():\n    return Response(get_time(), mimetype='text/event-stream')\n\nif __name__ == '__main__':\n    app.run(debug=True)",
    "templates/index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Real-Time Clock</title>\n</head>\n<body>\n    <h1>Real-Time Clock</h1>\n    <p>The current time is: <span id=\"time\"></span></p>\n    <script>\n        const timeElement = document.getElementById('time');\n        const eventSource = new EventSource('/stream');\n        eventSource.addEventListener('message', function(event) {\n            timeElement.textContent = event.data;\n        });\n    </script>\n</body>\n</html>"
  }
}
{
  "text": "Create a Flask application that streams real-time tweets based on a specified hashtag or keyword. The tweets should be displayed on a webpage as they are posted, without requiring the user to refresh the page.",
  "file_structure": {
    "app.py": "",
    "templates": {
      "index.html": ""
    }
  },
  "code": {
    "app.py": "from flask import Flask, render_template, Response\nfrom tweepy import OAuthHandler, Stream\nfrom tweepy.streaming import StreamListener\nimport json\n\napp = Flask(__name__)\n\n# Enter your Twitter API credentials\nconsumer_key = ''\nconsumer_secret = ''\naccess_token = ''\naccess_token_secret = ''\n\n# Specify the keyword or hashtag to track\nkeyword = '#python'\n\n# Define a listener class for the stream\nclass TweetStreamListener(StreamListener):\n    def on_data(self, data):\n        try:\n            tweet = json.loads(data)\n            text = tweet['text']\n            username = tweet['user']['screen_name']\n            time = tweet['created_at']\n            print(f'[{time}] {username}: {text}')\n            yield 'data: %s\n\n' % text\n        except Exception as e:\n            print(e)\n\n    def on_error(self, status):\n        print(status)\n\n# Create a Twitter stream\nauth = OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\nstream_listener = TweetStreamListener()\nstream = Stream(auth, stream_listener)\nstream.filter(track=[keyword])\n\n# Create a Flask route to stream the tweets\n@app.route('/stream')\ndef stream():\n    return Response(stream_listener.on_data(), mimetype='text/event-stream')\n\n# Create a Flask route to render the webpage\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\nif __name__ == '__main__':\n    app.run(debug=True)",
    "templates/index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Real-Time Tweets</title>\n</head>\n<body>\n    <h1>Real-Time Tweets</h1>\n    <div id=\"tweets\"></div>\n    <script>\n        const tweetsElement = document.getElementById('tweets');\n        const eventSource = new EventSource('/stream');\n        eventSource.addEventListener('message', function(event) {\n            const tweetElement = document.createElement('p');\n            tweetElement.textContent = event.data;\n            tweetsElement.appendChild(tweetElement);\n        });\n    </script>\n</body>\n</html>"
  }
}
{
  "text": "Create a Flask application that streams real-time stock prices for a specified stock. The stock prices should be displayed on a webpage as they are updated, without requiring the user to refresh the page.",
  "file_structure": {
    "app.py": "",
    "templates": {
      "index.html": ""
    }
  },
  "code": {
    "app.py": "from flask import Flask, render_template, Response\nimport requests\nimport json\nimport time\n\napp = Flask(__name__)\n\n# Specify the stock to get the data for\nsymbol = 'AAPL'\n\n# Define a function to get the stock price data\ndef get_stock_data(symbol):\n    url = f'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol={symbol}&apikey=demo'\n    while True:\n        try:\n            response = requests.get(url)\n            data = json.loads(response.text)['Global Quote']\n            symbol = data['01. symbol']\n            price = data['05. price']\n            change_percent = data['10. change percent']\n            print(f'{symbol}: {price} ({change_percent})')\n            yield 'data: %s\n\n' % f'{symbol}: {price} ({change_percent})'\n        except Exception as e:\n            print(e)\n        time.sleep(5)\n\n# Create a Flask route to stream the stock price data\n@app.route('/stream')\ndef stream():\n    return Response(get_stock_data(symbol), mimetype='text/event-stream')\n\n# Create a Flask route to render the webpage\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\nif __name__ == '__main__':\n    app.run(debug=True)",
    "templates/index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Real-Time Stock Price</title>\n</head>\n<body>\n    <h1>Real-Time Stock Price</h1>\n    <div id=\"stock\"></div>\n    <script>\n        const stockElement = document.getElementById('stock');\n        const eventSource = new EventSource('/stream');\n        eventSource.addEventListener('message', function(event) {\n            const stockData = event.data.split(': ');\n            const stockElement = document.createElement('p');\n            stockElement.innerHTML = `${stockData[0]}: $${stockData[1]}`;\n            stockElement.classList.add('stock-data');\n            stockElement.style.color = 'green';\n            stockElement.style.fontWeight = 'bold';\n            stockElement.style.marginTop = '10px';\n            stockElement.style.fontSize = '16px';\n            stockElement.style.lineHeight = '1.5';\n            stockElement.style.padding = '10px';\n            stockElement.style.backgroundColor = 'lightgray';\n            stockElement.style.borderRadius = '5px';\n            stockElement.style.boxShadow = '2px 2px 5px rgba(0, 0, 0, 0.1)';\n            stockElement.style.display = 'flex';\n            stockElement.style.justifyContent = 'space-between';\n                        stockElement.style.alignItems = 'center';\n            stockElement.style.width = '400px';\n            stockElement.style.margin = '10px auto';\n            stockElement.style.paddingLeft = '10px';\n            stockElement.style.borderLeft = '5px solid green';\n            stockElement.style.borderBottom = '1px solid lightgray';\n            stockElement.style.borderRight = '1px solid lightgray';\n            stockElement.style.borderTop = '1px solid lightgray';\n            stockElement.style.boxSizing = 'border-box';\n            stockElement.style.textAlign = 'right';\n            stockElement.style.fontFamily = 'Arial';\n            stockElement.style.fontWeight = 'bold';\n            stockElement.style.fontSize = '18px';\n            stockElement.style.textShadow = '1px 1px 2px rgba(0, 0, 0, 0.2)';\n            stockElement.style.transition = 'all 0.5s';\n            stockElement.addEventListener('mouseover', function() {\n                stockElement.style.backgroundColor = 'white';\n                stockElement.style.boxShadow = '2px 2px 5px rgba(0, 0, 0, 0.2)';\n            });\n            stockElement.addEventListener('mouseout', function() {\n                stockElement.style.backgroundColor = 'lightgray';\n                stockElement.style.boxShadow = '2px 2px 5px rgba(0, 0, 0, 0.1)';\n            });\n            stockElement.addEventListener('click', function() {\n                window.open(`https://www.google.com/search?q=${stockData[0]}`, '_blank');\n            });\n            stockElement.style.cursor = 'pointer';\n            stockElement.style.userSelect = 'none';\n            stockElement.style.webkitUserSelect = 'none';\n            stockElement.style.mozUserSelect = 'none';\n            stockElement.style.msUserSelect = 'none';\n            stockElement.style.transition = 'all 0.5s';\n            stockElement.style.webkitTransition = 'all 0.5s';\n            stockElement.style.mozTransition = 'all 0.5s';\n            stockElement.style.msTransition = 'all 0.5s';\n            stockElement.style.oTransition = 'all 0.5s';\n            stockElement.style.textDecoration = 'none';\n            stockElement.style.color = 'black';\n            stockElement.style.outline = 'none';\n            stockElement.style.textDecoration = 'underline';\n            stockElement.style.textDecorationColor = 'green';\n            stockElement.style.textDecorationThickness = '3px';\n            stockElement.style.textDecorationStyle = 'wavy';\n            stockElement.style.overflow = 'hidden';\n            stockElement.style.whiteSpace = 'nowrap';\n            stockElement.style.textOverflow = 'ellipsis';\n            stockElement.innerHTML = `${stockData[0]}: $${stockData[1]}`;\n            stock.appendChild(stockElement);\n        });\n    </script>\n</body>\n</html>"
  }
}
{
  "text": "Create a Flask application that streams real-time tweets for a specified topic. The tweets should be displayed on a webpage as they are updated, without requiring the user to refresh the page.",
  "file_structure": {
    "app.py": "",
    "templates": {
      "index.html": ""
    }
  },
  "code": {
    "app.py": "from flask import Flask, render_template, Response\nfrom tweepy.streaming import StreamListener\nfrom tweepy import OAuthHandler\nfrom tweepy import Stream\nimport json\nimport time\n\napp = Flask(__name__)\n\n# Define the Twitter API keys\nconsumer_key = 'your_consumer_key'\nconsumer_secret = 'your_consumer_secret'\naccess_token = 'your_access_token'\naccess_token_secret = 'your_access_token_secret'\n\n# Define a listener class to stream the tweets\nclass TweetListener(StreamListener):\n    def __init__(self, time_limit=300):\n        self.start_time = time.time()\n        self.limit = time_limit\n        self.tweet_data = []\n        super(TweetListener, self).__init__()\n\n    def on_data(self, data):\n        if (time.time() - self.start_time) < self.limit:\n            tweet = json.loads(data)\n            tweet_data = {}\n            tweet_data['created_at'] = tweet['created_at']\n            tweet_data['text'] = tweet['text']\n            tweet_data['username'] = tweet['user']['screen_name']\n            tweet_data['name'] = tweet['user']['name']\n            tweet_data['profile_image_url'] = tweet['user']['profile_image_url']\n            self.tweet_data.append(tweet_data)\n            return True\n        else:\n            return False\n\n    def on_error(self, status):\n        print(status)\n        return False\n\n# Define a function to stream the tweets\ndef stream_tweets(topic):\n    auth = OAuthHandler(consumer_key, consumer_secret)\n    auth.set_access_token(access_token, access_token_secret)\n    tweet_listener = TweetListener()\n    tweet_stream = Stream(auth, tweet_listener)\n    tweet_stream.filter(track=[topic], languages=['en'])\n    while True:\n        if tweet_listener.tweet_data:\n            yield 'data: %s\n\n' % json.dumps(tweet_listener.tweet_data)\n            tweet_listener.tweet_data = []\n        time.sleep(5)\n\n# Create a Flask route to stream the tweets\n@app.route('/stream/<topic>')\ndef tweet_stream(topic):\n    return Response(stream_tweets(topic), mimetype='text/event-stream')\n\n# Create a Flask route to render the webpage\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\nif __name__ == '__main__':\n    app.run(debug=True)",
    "templates/index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Real-Time Tweets</title>\n</head>\n<body>\n    <h1>Real-Time Tweets</h1>\n    <div id=\"tweets\"></div>\n    <script>\n        const tweetsElement = document.getElementById('tweets');\n        const topic = 'python';\n        const eventSource = new EventSource(`/stream/${topic}`);\n        eventSource.addEventListener('message', function(event) {\n            const tweetData = JSON.parse(event.data);\n            tweetData.forEach(function(tweet) {\n                const tweetElement = document.createElement('div');\n                tweetElement.style.display = 'flex';\n                tweetElement.style.flexDirection = 'column';\n                tweetElement.style.justifyContent = 'center';\n                tweetElement.style.alignItems = 'center';\n                tweetElement.style.width = '600px';\n                tweetElement.style.margin = '10px auto';\n                tweetElement.style.borderLeft = '5px solid blue';\n                tweetElement.style.borderBottom = '1px solid lightgray';\n                tweetElement.style.borderRight = '1px solid lightgray';\n                tweetElement.style.borderTop = '1px solid lightgray';\n                tweetElement.style.boxSizing = 'border-box';\n                tweetElement.style.fontFamily = 'Arial';\n                tweetElement.style.fontSize = '16px';\n                tweetElement.style.textShadow = '1px 1px 2px rgba(0, 0, 0, 0.2)';\n                tweetElement.style.transition = 'all 0.5s';\n                tweetElement.addEventListener('mouseover', function() {\n                    tweetElement.style.backgroundColor = 'white';\n                    tweetElement.style.boxShadow = '2px 2px 5px rgba(0, 0, 0, 0.2)';\n                });\n                tweetElement.addEventListener('mouseout', function() {\n                    tweetElement.style.backgroundColor = 'lightgray';\n                    tweetElement.style.boxShadow = '2px 2px 5px rgba(0, 0, 0, 0.1)';\n                });\n                tweetElement.style.cursor = 'pointer';\n                tweetElement.style.userSelect = 'none';\n                tweetElement.style.webkitUserSelect = 'none';\n                tweetElement.style.mozUserSelect = 'none';\n                tweetElement.style.msUserSelect = 'none';\n                tweetElement.style.transition = 'all 0.5s';\n                tweetElement.style.webkitTransition = 'all 0.5s';\n                tweetElement.style.mozTransition = 'all 0.5s';\n                tweetElement.style.msTransition = 'all 0.5s';\n                tweetElement.style.oTransition = 'all 0.5s';\n                tweetElement.style.overflow = 'hidden';\n                tweetElement.style.whiteSpace = 'nowrap';\n                tweetElement.style.textOverflow = 'ellipsis';\n                tweetElement.innerHTML = `<img src='${tweet['profile_image_url']}' style='width: 50px; height: 50px; border-radius: 25px;'>\n                    <p style='margin: 10px 0;'><strong>${tweet['name']}</strong> (@${tweet['username']})</p>\n                    <p style='margin: 10px 0;'>${tweet['text']}</p>\n                    <p style='margin: 10px 0; font-size: 14px; color: gray;'>${tweet['created_at']}</p>`;\n                tweetsElement.appendChild(tweetElement);\n            });\n        });\n    </script>\n</body>\n</html>"
  }
}
{
  "text": "Create a Flask application that streams real-time stock prices for a specified company. The stock prices should be displayed on a webpage as they are updated, without requiring the user to refresh the page.",
  "file_structure": {
    "app.py": "",
    "templates": {
      "index.html": ""
    }
  },
  "code": {
    "app.py": "from flask import Flask, render_template, Response\nimport requests\nimport json\nimport time\n\napp = Flask(__name__)\n\n# Define a function to get the current stock price\ndef get_stock_price(symbol):\n    url = f'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol={symbol}&apikey=your_api_key'\n    response = requests.get(url)\n    stock_data = json.loads(response.text)\n    stock_price = stock_data['Global Quote']['05. price']\n    return stock_price\n\n# Define a function to stream the stock prices\ndef stream_stock_prices(symbol):\n    while True:\n        stock_price = get_stock_price(symbol)\n        yield 'data: %s\n\n' % stock_price\n        time.sleep(5)\n\n# Create a Flask route to stream the stock prices\n@app.route('/stream/<symbol>')\ndef stock_stream(symbol):\n    return Response(stream_stock_prices(symbol), mimetype='text/event-stream')\n\n# Create a Flask route to render the webpage\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\nif __name__ == '__main__':\n    app.run(debug=True)",
    "templates/index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Real-Time Stock Prices</title>\n</head>\n<body>\n    <h1>Real-Time Stock Prices</h1>\n    <p>Enter a stock symbol to start streaming:</p>\n    <form onsubmit=\"startStreaming(); return false;\">\n        <input type=\"text\" id=\"symbol\" name=\"symbol\" placeholder=\"e.g. AAPL\" required>\n        <button type=\"submit\">Start Streaming</button>\n    </form>\n    <div id=\"stock-price\"></div>\n    <script>\n        const stockPriceElement = document.getElementById('stock-price');\n        let eventSource;\n        function startStreaming() {\n            const symbol = document.getElementById('symbol').value.toUpperCase();\n            eventSource = new EventSource(`/stream/${symbol}`);\n            eventSource.addEventListener('message', function(event) {\n                stockPriceElement.textContent = event.data;\n            });\n        }\n    </script>\n</body>\n</html>"
  }
}
#########
{
  "text": "Create a Flask application that allows users to join a chat room and send real-time messages to each other. The chat messages should be displayed on the webpage as they are sent, without requiring the user to refresh the page.",
  "file_structure": {
    "app.py": "",
    "templates": {
      "index.html": ""
    },
    "static": {
      "style.css": "",
      "script.js": ""
    }
  },
  "code": {
    "app.py": "from flask import Flask, render_template, request\nfrom flask_socketio import SocketIO, emit\n\napp = Flask(__name__)\napp.config['SECRET_KEY'] = 'secretkey'\nsocketio = SocketIO(app)\n\n# Create a Flask route to render the webpage\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n# Define a socket.io event for when a user joins a room\n@socketio.on('join')\ndef join(data):\n    username = data['username']\n    room = data['room']\n    join_message = f'{username} has joined the room.'\n    emit('message', {'message': join_message, 'username': username, 'room': room}, room=room)\n    join_room(room)\n\n# Define a socket.io event for when a user sends a message\n@socketio.on('message')\ndef message(data):\n    username = data['username']\n    room = data['room']\n    message = data['message']\n    emit('message', {'message': message, 'username': username, 'room': room}, room=room)\n\nif __name__ == '__main__':\n    socketio.run(app, debug=True)",
    "templates/index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Real-Time Chat</title>\n    <link rel=\"stylesheet\" href=\"/static/style.css\">\n</head>\n<body>\n    <h1>Real-Time Chat</h1>\n    <form onsubmit=\"return false;\">\n        <label for=\"username\">Username:</label>\n        <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Enter your username\" required>\n        <label for=\"room\">Room:</label>\n        <input type=\"text\" id=\"room\" name=\"room\" placeholder=\"Enter the room name\" required>\n        <button id=\"join-button\" type=\"button\">Join Room</button>\n    </form>\n    <div id=\"chat-container\">\n        <div id=\"chat-messages\"></div>\n        <form id=\"message-form\">\n            <input type=\"text\" id=\"message-input\" name=\"message\" placeholder=\"Enter your message\" required>\n            <button type=\"submit\">Send</button>\n        </form>\n    </div>\n    <script src=\"/static/script.js\"></script>\n</body>\n</html>",
    "static/style.css": "body {\n    font-family: Arial, Helvetica, sans-serif;\n}\nform {\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    margin-bottom: 1rem;\n}\nlabel {\n    margin-bottom: 0.5rem;\}\ninput {\n margin-bottom: 1rem;\n padding: 0.5rem;\n font-size: 1rem;\n}\nbutton {\n padding: 0.5rem;\n font-size: 1rem;\n}\n#chat-messages {\n margin-bottom: 1rem;\n overflow-y: scroll;\n height: 200px;\n border: 1px solid black;\n padding: 0.5rem;\n}\n#chat-messages p {\n margin-bottom: 0.5rem;\n}\n#message-form {\n display: flex;\n flex-direction: row;\n align-items: center;\n}\n#message-input {\n flex: 1;\n margin-right: 1rem;\n}\n",
    "static/script.js": "const joinButton = document.getElementById('join-button');\nconst messageForm = document.getElementById('message-form');\nconst messageInput = document.getElementById('message-input');\nconst chatMessages = document.getElementById('chat-messages');\n\n// Connect to the server\nconst socket = io.connect(location.protocol + '//' + document.domain + ':' + location.port);\n\n// Define a function to add a chat message to the webpage\nfunction addMessage(username, message) {\n const messageElement = document.createElement('p');\n messageElement.innerHTML = ${username}: ${message};\n chatMessages.appendChild(messageElement);\n}\n\n// Add a click event listener to the Join Room button\njoinButton.addEventListener('click', function() {\n const username = document.getElementById('username').value;\n const room = document.getElementById('room').value;\n socket.emit('join', {'username': username, 'room': room});\n});\n\n// Add a submit event listener to the Message form\nmessageForm.addEventListener('submit', function(event) {\n event.preventDefault();\n const message = messageInput.value;\n const username = document.getElementById('username').value;\n const room = document.getElementById('room').value;\n socket.emit('message', {'message': message, 'username': username, 'room': room});\n messageInput.value = '';\n});\n\n// Define a socket.io event for when a message is received\nsocket.on('message', function(data) {\n addMessage(data.username, data.message);\n});"
}
}
###########
{
  "text": "Create a Flask application that streams real-time sentiment analysis of tweets containing a specified hashtag. The sentiment analysis should be displayed on a webpage as the tweets are analyzed, without requiring the user to refresh the page.",
  "file_structure": {
    "app.py": "",
    "templates": {
      "index.html": ""
    },
    "static": {
      "style.css": ""
    }
  },
  "code": {
    "app.py": "from flask import Flask, render_template, Response\nimport tweepy\nfrom textblob import TextBlob\nimport time\n\napp = Flask(__name__)\n\n# Authenticate to Twitter\nauth = tweepy.OAuthHandler('CONSUMER_KEY', 'CONSUMER_SECRET')\nauth.set_access_token('ACCESS_TOKEN', 'ACCESS_TOKEN_SECRET')\n\n# Create API object\napi = tweepy.API(auth)\n\n# Define a function to get the sentiment analysis of a tweet\ndef get_tweet_sentiment(tweet):\n    analysis = TextBlob(tweet)\n    if analysis.sentiment.polarity > 0:\n        return 'positive'\n    elif analysis.sentiment.polarity < 0:\n        return 'negative'\n    else:\n        return 'neutral'\n\n# Define a function to stream the sentiment analysis of tweets\ndef stream_tweet_sentiment(hashtag):\n    while True:\n        positive_count = 0\n        negative_count = 0\n        neutral_count = 0\n        tweets = tweepy.Cursor(api.search_tweets, q=hashtag).items(10)\n        for tweet in tweets:\n            sentiment = get_tweet_sentiment(tweet.text)\n            if sentiment == 'positive':\n                positive_count += 1\n            elif sentiment == 'negative':\n                negative_count += 1\n            else:\n                neutral_count += 1\n        sentiment_data = {\n            'positive': positive_count,\n            'negative': negative_count,\n            'neutral': neutral_count\n        }\n        yield 'data: %s\n\n' % sentiment_data\n        time.sleep(10)\n\n# Create a Flask route to stream the sentiment analysis\n@app.route('/stream/<hashtag>')\ndef sentiment_stream(hashtag):\n    return Response(stream_tweet_sentiment(hashtag), mimetype='text/event-stream')\n\n# Create a Flask route to render the webpage\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\nif __name__ == '__main__':\n    app.run(debug=True)",
    "templates/index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\">\n    <title>Real-Time Sentiment Analysis</title>\n</head>\n<body>\n    <h1>Real-Time Sentiment Analysis</h1>\n    <p>Enter a hashtag to start streaming:</p>\n    <form onsubmit=\"startStreaming(); return false;\">\n        <input type=\"text\" id=\"hashtag\" name=\"hashtag\" placeholder=\"e.g. #Python\" required>\n        <button type=\"submit\">Start Streaming</button>\n    </form>\n    <div id=\"sentiment-data\"></div>\n    <script>\n        const sentimentDataElement = document.getElementById('sentiment')         function startStreaming() {\n            const hashtag = document.getElementById('hashtag').value;\n            eventSource = new EventSource(`/stream/${hashtag}`);\n            eventSource.addEventListener('message', function(event) {\n                const sentimentData = JSON.parse(event.data);\n                sentimentDataElement.innerHTML = `<p>Positive: ${sentimentData.positive}</p><p>Negative: ${sentimentData.negative}</p><p>Neutral: ${sentimentData.neutral}</p>`;\n            });\n        }\n    </script>\n</body>\n</html>",
    "static/style.css": "body {\n    font-family: Arial, Helvetica, sans-serif;\n}\n\nh1 {\n    text-align: center;\n}\n\nform {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 20px 0;\n}\n\ninput {\n    padding: 10px;\n    border-radius: 5px 0 0 5px;\n    border: none;\n}\n\nbutton {\n    padding: 10px;\n    background-color: #007bff;\n    color: #fff;\n    border: none;\n    border-radius: 0 5px 5px 0;\n    cursor: pointer;\n}\n\n#sentiment-data {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 1.5rem;\n    margin-top: 20px;\n}\n\n#sentiment-data p {\n    margin: 0 20px;\n}"
  }
}
{
  "text": "Create a real-time stock market dashboard using Flask and Plotly. The dashboard should display real-time stock prices and volume for a specified list of stocks, and should update automatically without requiring the user to refresh the page.",
  "file_structure": {
    "app.py": "",
    "templates": {
      "index.html": ""
    },
    "static": {
      "style.css": "",
      "plotly-latest.min.js": ""
    }
  },
  "code": {
    "app.py": "from flask import Flask, render_template, Response\nimport plotly\nimport plotly.graph_objs as go\nimport yfinance as yf\nimport time\n\napp = Flask(__name__)\n\n# Define a function to get the stock prices and volume data\ndef get_stock_data(stock_tickers):\n    data = []\n    for ticker in stock_tickers:\n        stock = yf.Ticker(ticker)\n        hist = stock.history(period='1d')\n        stock_data = go.Candlestick(x=hist.index, open=hist['Open'], high=hist['High'], low=hist['Low'], close=hist['Close'], name=ticker)\n        data.append(stock_data)\n    return data\n\n# Create a Flask route to stream the stock data\n@app.route('/stream')\ndef stream_stock_data():\n    stock_tickers = ['AAPL', 'GOOGL', 'TSLA', 'AMZN']\n    while True:\n        stock_data = get_stock_data(stock_tickers)\n        yield plotly.io.to_json({'data': stock_data, 'layout': {'title': 'Real-Time Stock Market Dashboard'}})\n        time.sleep(10)\n\n# Create a Flask route to render the webpage\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\nif __name__ == '__main__':\n    app.run(debug=True)",
    "templates/index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\">\n    <script src=\"{{ url_for('static', filename='plotly-latest.min.js') }}\"></script>\n    <title>Real-Time Stock Market Dashboard</title>\n</head>\n<body>\n    <h1>Real-Time Stock Market Dashboard</h1>\n    <div id=\"chart\"></div>\n    <script>\n        const chartElement = document.getElementById('chart');\n        const eventSource = new EventSource('/stream');\n        eventSource.addEventListener('message', function(event) {\n            const data = JSON.parse(event.data);\n            Plotly.newPlot(chartElement, data);\n        });\n    </script>\n</body>\n</html>",
    "static/style.css": "body {\n    font-family: Arial, Helvetica, sans-serif;\n}\n\nh1 {\n    text-align: center;\n}\n\n#chart {\n    margin: 20px auto;\n    max-width: 800px;\n}"
  }
}




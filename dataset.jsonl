{"text": "Create a simple Python project with a main script and a utility script inside a utilities folder. The main script should read a file and count the number of lines. The utility script should contain a function to double the line count.", "file_structure": "{\"main.py\":\"\",\"utilities\":{\"utility.py\":\"\"}}", "code": "{\"main.py\":\"with open('input_file.txt', 'r') as file:\\n    lines = file.readlines()\\n    line_count = len(lines)\\n    print(f'Number of lines: {line_count}')\",\"utilities/utility.py\":\"def double_count(count):\\n    return count * 2\"}"}
{"text": "Create a real-time chat application with Flask-SocketIO. Users should be able to connect to the server and join a chatroom by entering a unique username and a room name. Users should be able to send and receive messages within the chatroom, and the messages should be displayed in real-time.", "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}", "code": "{\"app.py\":\"from flask import Flask, render_template, request, session\\nfrom flask_socketio import SocketIO, emit, join_room, leave_room\\nimport uuid\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret!'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('connect')\\ndef connect():\\n    print('Client connected')\\n\\n@socketio.on('disconnect')\\ndef disconnect():\\n    print('Client disconnected')\\n\\n@socketio.on('join')\\ndef join(data):\\n    username = data['username']\\n    room = data['room']\\n    session['username'] = username\\n    session['room'] = room\\n    join_room(room)\\n    message = f'{username} has joined the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef leave():\\n    username = session['username']\\n    room = session['room']\\n    leave_room(room)\\n    message = f'{username} has left the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef message(data):\\n    username = session['username']\\n    room = session['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app, debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Real-Time Chat Application</title>\\n    <script src='https://cdn.socket.io/4.3.1/socket.io.min.js'></script>\\n</head>\\n<body>\\n    <h1>Real-Time Chat Application</h1>\\n    <div id='status'></div>\\n    <div id='chat'></div>\\n    <form id='join-form'>\\n        <label for='username'>Username:</label>\\n        <input type='text' name='username' id='username'>\\n        <label for='room'>Room:</label>\\n        <input type='text' name='room' id='room'>\\n        <input type='submit' value='Join Room'>\\n    </form>\\n    <form id='message-form'>\\n        <input type='text' name='message' id='message'>\\n        <input type='submit' value='Send'>\\n    </form>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat');\\n        var joinForm =        document.getElementById('join-form');\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message = document.getElementById('message').value;\\n            socket.emit('message', {\\n                message: message\\n            });\\n            document.getElementById('message').value = '';\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = message;\\n            statusElement.appendChild(pElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = username + ': ' + message;\\n            chatElement.appendChild(pElement);\\n        });\\n    </script>\\n</body>\\n</html>\"\n}"}
{
  "text": "Create a Flask application that allows users to upload and download files. The application should have a homepage with a form to upload a file, and a page to download the uploaded files. The uploaded files should be stored in a 'uploads' folder within the application directory.",
  "file_structure": "{\"app.py\":\"\",\"uploads\":\"\"}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, request, send_file\nimport os\n\napp = Flask(__name__)\n\nUPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/upload', methods=['POST'])\ndef upload():\n    file = request.files['file']\n    file.save(os.path.join(app.config['UPLOAD_FOLDER'], file.filename))\n    return 'File uploaded successfully!'\n\n@app.route('/download/<filename>')\ndef download(filename):\n    return send_file(os.path.join(app.config['UPLOAD_FOLDER'], filename), as_attachment=True)\n\nif __name__ == '__main__':\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>File Uploader/Downloader</title>\\n</head>\\n<body>\\n    <h1>File Uploader/Downloader</h1>\\n    <form method='POST' action='/upload' enctype='multipart/form-data'>\\n        <input type='file' name='file'>\\n        <input type='submit' value='Upload'>\\n    </form>\\n    <br>\\n    <h2>Uploaded Files</h2>\\n    <ul>\\n        {% for file in os.listdir(app.config['UPLOAD_FOLDER']) %}\\n        <li><a href='/download/{{ file }}'>{{ file }}</a></li>\\n        {% endfor %}\\n    </ul>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a Flask application that displays a real-time video stream from a webcam. The webpage should update the video stream every second without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, Response, render_template\\nimport cv2\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the video stream\\ndef get_stream():\\n    camera = cv2.VideoCapture(0)\\n    while True:\\n        success, frame = camera.read()\\n        if not success:\\n            break\\n        ret, buffer = cv2.imencode('.jpg', frame)\\n        frame = buffer.tobytes()\\n        yield (b'--frame\\r\\n'\\n               b'Content-Type: image/jpeg\\r\\n\\r\\n' + frame + b'\\r\\n')\\n\\n# Create a Flask route to stream the video\\n@app.route('/stream')\\ndef stream():\\n    return Response(get_stream(), mimetype='multipart/x-mixed-replace; boundary=frame')\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>Real-Time Webcam Stream</title>\\n</head>\\n<body>\\n    <h1>Real-Time Webcam Stream</h1>\\n    <img src=\\\"/stream\\\">\\n</body>\\n</html>\"}"
}
{
  "text": "Create a real-time stock market dashboard using Flask and Plotly. The dashboard should display real-time stock prices and volume for a specified list of stocks, and should update automatically without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"},\"static\":{\"style.css\":\"\",\"plotly-latest.min.js\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, Response\\nimport plotly\\nimport plotly.graph_objs as go\\nimport yfinance as yf\\nimport time\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the stock prices and volume data\\ndef get_stock_data(stock_tickers):\\n    data = []\\n    for ticker in stock_tickers:\\n        stock = yf.Ticker(ticker)\\n        hist = stock.history(period='1d')\\n        stock_data = go.Candlestick(x=hist.index, open=hist['Open'], high=hist['High'], low=hist['Low'], close=hist['Close'], name=ticker)\\n        data.append(stock_data)\\n    return data\\n\\n# Create a Flask route to stream the stock data\\n@app.route('/stream')\\ndef stream_stock_data():\\n    stock_tickers = ['AAPL', 'GOOGL', 'TSLA', 'AMZN']\\n    while True:\\n        stock_data = get_stock_data(stock_tickers)\\n        yield plotly.io.to_json({'data': stock_data, 'layout': {'title': 'Real-Time Stock Market Dashboard'}})\\n        time.sleep(10)\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <link rel=\\\"stylesheet\\\" href=\\\"{{ url_for('static', filename='style.css') }}\\\">\\n    <script src=\\\"{{ url_for('static', filename='plotly-latest.min.js') }}\\\"></script>\\n    <title>Real-Time Stock Market Dashboard</title>\\n</head>\\n<body>\\n    <h1>Real-Time Stock Market Dashboard</h1>\\n    <div id=\\\"chart\\\"></div>\\n    <script>\\n        const chartElement = document.getElementById('chart');\\n        const eventSource = new EventSource('/stream');\\n        eventSource.addEventListener('message', function(event) {\\n            const data = JSON.parse(event.data);\\n            Plotly.newPlot(chartElement, data);\\n        });\\n    </script>\\n</body>\\n</html>\",\"static/style.css\":\"body {\\n    font-family: Arial, Helvetica, sans-serif;\\n}\\n\\nh1 {\\n    text-align: center;\\n}\\n\\n#chart {\\n    margin: 20px auto;\\n    max-width: 100%;\\n    height: 500px;\\n}\"}"
}

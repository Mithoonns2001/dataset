{"text": "Create a simple Python project with a main script and a utility script inside a utilities folder. The main script should read a file and count the number of lines. The utility script should contain a function to double the line count.", "file_structure": "{\"main.py\":\"\",\"utilities\":{\"utility.py\":\"\"}}", "code": "{\"main.py\":\"with open('input_file.txt', 'r') as file:\\n    lines = file.readlines()\\n    line_count = len(lines)\\n    print(f'Number of lines: {line_count}')\",\"utilities/utility.py\":\"def double_count(count):\\n    return count * 2\"}"}
{"text": "Create a real-time chat application with Flask-SocketIO. Users should be able to connect to the server and join a chatroom by entering a unique username and a room name. Users should be able to send and receive messages within the chatroom, and the messages should be displayed in real-time.", "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}", "code": "{\"app.py\":\"from flask import Flask, render_template, request, session\\nfrom flask_socketio import SocketIO, emit, join_room, leave_room\\nimport uuid\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret!'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('connect')\\ndef connect():\\n    print('Client connected')\\n\\n@socketio.on('disconnect')\\ndef disconnect():\\n    print('Client disconnected')\\n\\n@socketio.on('join')\\ndef join(data):\\n    username = data['username']\\n    room = data['room']\\n    session['username'] = username\\n    session['room'] = room\\n    join_room(room)\\n    message = f'{username} has joined the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef leave():\\n    username = session['username']\\n    room = session['room']\\n    leave_room(room)\\n    message = f'{username} has left the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef message(data):\\n    username = session['username']\\n    room = session['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app, debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Real-Time Chat Application</title>\\n    <script src='https://cdn.socket.io/4.3.1/socket.io.min.js'></script>\\n</head>\\n<body>\\n    <h1>Real-Time Chat Application</h1>\\n    <div id='status'></div>\\n    <div id='chat'></div>\\n    <form id='join-form'>\\n        <label for='username'>Username:</label>\\n        <input type='text' name='username' id='username'>\\n        <label for='room'>Room:</label>\\n        <input type='text' name='room' id='room'>\\n        <input type='submit' value='Join Room'>\\n    </form>\\n    <form id='message-form'>\\n        <input type='text' name='message' id='message'>\\n        <input type='submit' value='Send'>\\n    </form>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat');\\n        var joinForm =        document.getElementById('join-form');\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message = document.getElementById('message').value;\\n            socket.emit('message', {\\n                message: message\\n            });\\n            document.getElementById('message').value = '';\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = message;\\n            statusElement.appendChild(pElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = username + ': ' + message;\\n            chatElement.appendChild(pElement);\\n        });\\n    </script>\\n</body>\\n</html>\"\n}"}
{
  "text": "Create a Flask application that allows users to upload and download files. The application should have a homepage with a form to upload a file, and a page to download the uploaded files. The uploaded files should be stored in a 'uploads' folder within the application directory.",
  "file_structure": "{\"app.py\":\"\",\"uploads\":\"\"}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, request, send_file\nimport os\n\napp = Flask(__name__)\n\nUPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/upload', methods=['POST'])\ndef upload():\n    file = request.files['file']\n    file.save(os.path.join(app.config['UPLOAD_FOLDER'], file.filename))\n    return 'File uploaded successfully!'\n\n@app.route('/download/<filename>')\ndef download(filename):\n    return send_file(os.path.join(app.config['UPLOAD_FOLDER'], filename), as_attachment=True)\n\nif __name__ == '__main__':\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>File Uploader/Downloader</title>\\n</head>\\n<body>\\n    <h1>File Uploader/Downloader</h1>\\n    <form method='POST' action='/upload' enctype='multipart/form-data'>\\n        <input type='file' name='file'>\\n        <input type='submit' value='Upload'>\\n    </form>\\n    <br>\\n    <h2>Uploaded Files</h2>\\n    <ul>\\n        {% for file in os.listdir(app.config['UPLOAD_FOLDER']) %}\\n        <li><a href='/download/{{ file }}'>{{ file }}</a></li>\\n        {% endfor %}\\n    </ul>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a Flask application that displays a real-time video stream from a webcam. The webpage should update the video stream every second without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, Response, render_template\\nimport cv2\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the video stream\\ndef get_stream():\\n    camera = cv2.VideoCapture(0)\\n    while True:\\n        success, frame = camera.read()\\n        if not success:\\n            break\\n        ret, buffer = cv2.imencode('.jpg', frame)\\n        frame = buffer.tobytes()\\n        yield (b'--frame\\r\\n'\\n               b'Content-Type: image/jpeg\\r\\n\\r\\n' + frame + b'\\r\\n')\\n\\n# Create a Flask route to stream the video\\n@app.route('/stream')\\ndef stream():\\n    return Response(get_stream(), mimetype='multipart/x-mixed-replace; boundary=frame')\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>Real-Time Webcam Stream</title>\\n</head>\\n<body>\\n    <h1>Real-Time Webcam Stream</h1>\\n    <img src=\\\"/stream\\\">\\n</body>\\n</html>\"}"
}
{
  "text": "Create a real-time stock market dashboard using Flask and Plotly. The dashboard should display real-time stock prices and volume for a specified list of stocks, and should update automatically without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"},\"static\":{\"style.css\":\"\",\"plotly-latest.min.js\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, Response\\nimport plotly\\nimport plotly.graph_objs as go\\nimport yfinance as yf\\nimport time\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the stock prices and volume data\\ndef get_stock_data(stock_tickers):\\n    data = []\\n    for ticker in stock_tickers:\\n        stock = yf.Ticker(ticker)\\n        hist = stock.history(period='1d')\\n        stock_data = go.Candlestick(x=hist.index, open=hist['Open'], high=hist['High'], low=hist['Low'], close=hist['Close'], name=ticker)\\n        data.append(stock_data)\\n    return data\\n\\n# Create a Flask route to stream the stock data\\n@app.route('/stream')\\ndef stream_stock_data():\\n    stock_tickers = ['AAPL', 'GOOGL', 'TSLA', 'AMZN']\\n    while True:\\n        stock_data = get_stock_data(stock_tickers)\\n        yield plotly.io.to_json({'data': stock_data, 'layout': {'title': 'Real-Time Stock Market Dashboard'}})\\n        time.sleep(10)\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <link rel=\\\"stylesheet\\\" href=\\\"{{ url_for('static', filename='style.css') }}\\\">\\n    <script src=\\\"{{ url_for('static', filename='plotly-latest.min.js') }}\\\"></script>\\n    <title>Real-Time Stock Market Dashboard</title>\\n</head>\\n<body>\\n    <h1>Real-Time Stock Market Dashboard</h1>\\n    <div id=\\\"chart\\\"></div>\\n    <script>\\n        const chartElement = document.getElementById('chart');\\n        const eventSource = new EventSource('/stream');\\n        eventSource.addEventListener('message', function(event) {\\n            const data = JSON.parse(event.data);\\n            Plotly.newPlot(chartElement, data);\\n        });\\n    </script>\\n</body>\\n</html>\",\"static/style.css\":\"body {\\n    font-family: Arial, Helvetica, sans-serif;\\n}\\n\\nh1 {\\n    text-align: center;\\n}\\n\\n#chart {\\n    margin: 20px auto;\\n    max-width: 100%;\\n    height: 500px;\\n}\"}"
}
{
  "text": "Create a real-time chat application using Flask-SocketIO that allows users to join a chat room and send messages to each other in real-time.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template\\nfrom flask_socketio import SocketIO, join_room, leave_room, emit\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret_key'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('join')\\ndef on_join(data):\\n    username = data['username']\\n    room = data['room']\\n    join_room(room)\\n    message = username + ' has joined the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef on_leave(data):\\n    username = data['username']\\n    room = data['room']\\n    leave_room(room)\\n    message = username + ' has left the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef on_message(data):\\n    username = data['username']\\n    room = data['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Flask-SocketIO Chat</title>\\n</head>\\n<body>\\n    <div id=\\\"chat\\\">\\n        <h1>Flask-SocketIO Chat</h1>\\n        <div id=\\\"status\\\"></div>\\n        <div id=\\\"chat-window\\\"></div>\\n        <form id=\\\"message-form\\\">\\n            <input id=\\\"message\\\" type=\\\"text\\\" placeholder=\\\"Enter a message...\\\" autocomplete=\\\"off\\\">\\n            <button type=\\\"submit\\\">Send</button>\\n        </form>\\n    </div>\\n    <script src=\\\"https://cdn.socket.io/4.1.2/socket.io.min.js\\\"></script>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat-window');\\n        var joinForm = document.getElementById('join-form');\\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message= document.getElementById('message').value;\\n            socket.emit('message', {\\n                username: username,\\n                room: room,\\n                message: message\\n            });\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(message);\\n            messageElement.appendChild(messageText);\\n            statusElement.appendChild(messageElement);\\n        });\\n    </script>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a basic portfolio website using HTML, CSS, and JavaScript. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\",\"script.js\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n    <script src=\\\"script.js\\\"></script>\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form action=\\\"#\\\">\\n                <div>\\n                    <label for=\\\"name\\\">Name:</label>\\n                    <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"email\\\">Email:</label>\\n                    <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"message\\\">Message:</label>\\n                    <textarea id=\\\"message\\\" name=\\\"message\\\"></textarea>\\n                </div>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n    <footer>\\n        <p>&copy; 2023 My Portfolio</p>\\n    </footer>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\n\\nbody {\\n    margin: 0;\\n    font-family: 'Segoe UI', sans-serif;\\n}\\n\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    padding: 1rem;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2rem;\\n}\\n\\nheader nav ul {\\n    list-style-type: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n}\\n\\nheader nav ul li {\\n    margin: 0 1rem;\\n}\\n\\nheader nav ul li a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\nmain {\\n    margin: 2rem;\\n}\\n\\nsection {\\n    margin: 2rem 0;\\n}\\n\\nsection h2 {\\n    margin: 0;\\n}\\n\\nsection p {\\n    margin-top: 1rem;\\n}\\n\\n.project-card {\\n    background-color: #fff;\\n    border: 1px solid #ccc;\\n    padding: 1rem;\\n    border-radius: 0.25rem;\\n    box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.075);\\n    margin-bottom: 2rem;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    max-width: 100%;\\n}\\n\\nfooter {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    height: 3rem;\\n}\\n\\nfooter p {\\n    margin: 0;\\n}\\n\",\"script.js\":\"// Add active class to the current navbar link\\nvar header = document.getElementById(\"navbar\");\\nvar links = header.getElementsByClassName(\"nav-link\");\\nfor (var i = 0; i < links.length; i++) {\\n  links[i].addEventListener(\"click\", function() {\\n    var current = document.getElementsByClassName(\"active\");\\n    current[0].className = current[0].className.replace(\" active\", \"\");\\n    this.className += \" active\";\\n  });\\n}\"}"
}
{
  "text": "Create a basic portfolio website using only HTML and CSS. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=...Project 3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form>\\n                <label for=\\\"name\\\">Name:</label>\\n                <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\" required>\\n                <label for=\\\"email\\\">Email:</label>\\n                <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\" required>\\n                <label for=\\\"message\\\">Message:</label>\\n                <textarea id=\\\"message\\\" name=\\\"message\\\" required></textarea>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\nbody {\\n    font-family: Arial, sans-serif;\\n    margin: 0;\\n    padding: 0;\\n}\\n\\n/* Header styles */\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    padding: 20px;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2em;\\n}\\n\\nheader ul {\\n    list-style: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader li {\\n    margin: 0 10px;\\n}\\n\\nheader a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\n/* Main content styles */\\nmain {\\n    max-width: 800px;\\n    margin: 20px auto;\\n    padding: 0 20px;\\n}\\n\\nsection {\\n    margin-bottom: 50px;\\n}\\n\\nsection h2 {\\n    margin-top: 0;\\n}\\n\\n.project-card {\\n    border: 1px solid #ccc;\\n    border-radius: 5px;\\n    padding: 10px;\\n    margin-bottom: 20px;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    width: 100%;\\n}\\n\\n/* Contact form styles */\\nform {\\n    display: flex;\\n    flex-direction: column;\\n}\\n\\nlabel {\\n    margin-bottom: 10px;\\n}\\n\\ninput, textarea {\\n    margin-bottom: 20px;\\n    padding: 10px;\\n    border-radius: 5px;\\n    border: none;\\n    background-color: #333;\\n    color: #fff;\\n    cursor: pointer;\\n    border-radius: 5px;\\n}\"\n}"
}
{"text": "Create a simple Python project with a main script and a utility script inside a utilities folder. The main script should read a file and count the number of lines. The utility script should contain a function to double the line count.", "file_structure": "{\"main.py\":\"\",\"utilities\":{\"utility.py\":\"\"}}", "code": "{\"main.py\":\"with open('input_file.txt', 'r') as file:\\n    lines = file.readlines()\\n    line_count = len(lines)\\n    print(f'Number of lines: {line_count}')\",\"utilities/utility.py\":\"def double_count(count):\\n    return count * 2\"}"}
{"text": "Create a real-time chat application with Flask-SocketIO. Users should be able to connect to the server and join a chatroom by entering a unique username and a room name. Users should be able to send and receive messages within the chatroom, and the messages should be displayed in real-time.", "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}", "code": "{\"app.py\":\"from flask import Flask, render_template, request, session\\nfrom flask_socketio import SocketIO, emit, join_room, leave_room\\nimport uuid\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret!'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('connect')\\ndef connect():\\n    print('Client connected')\\n\\n@socketio.on('disconnect')\\ndef disconnect():\\n    print('Client disconnected')\\n\\n@socketio.on('join')\\ndef join(data):\\n    username = data['username']\\n    room = data['room']\\n    session['username'] = username\\n    session['room'] = room\\n    join_room(room)\\n    message = f'{username} has joined the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef leave():\\n    username = session['username']\\n    room = session['room']\\n    leave_room(room)\\n    message = f'{username} has left the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef message(data):\\n    username = session['username']\\n    room = session['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app, debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Real-Time Chat Application</title>\\n    <script src='https://cdn.socket.io/4.3.1/socket.io.min.js'></script>\\n</head>\\n<body>\\n    <h1>Real-Time Chat Application</h1>\\n    <div id='status'></div>\\n    <div id='chat'></div>\\n    <form id='join-form'>\\n        <label for='username'>Username:</label>\\n        <input type='text' name='username' id='username'>\\n        <label for='room'>Room:</label>\\n        <input type='text' name='room' id='room'>\\n        <input type='submit' value='Join Room'>\\n    </form>\\n    <form id='message-form'>\\n        <input type='text' name='message' id='message'>\\n        <input type='submit' value='Send'>\\n    </form>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat');\\n        var joinForm =        document.getElementById('join-form');\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message = document.getElementById('message').value;\\n            socket.emit('message', {\\n                message: message\\n            });\\n            document.getElementById('message').value = '';\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = message;\\n            statusElement.appendChild(pElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = username + ': ' + message;\\n            chatElement.appendChild(pElement);\\n        });\\n    </script>\\n</body>\\n</html>\"\n}"}
{
  "text": "Create a Flask application that allows users to upload and download files. The application should have a homepage with a form to upload a file, and a page to download the uploaded files. The uploaded files should be stored in a 'uploads' folder within the application directory.",
  "file_structure": "{\"app.py\":\"\",\"uploads\":\"\"}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, request, send_file\nimport os\n\napp = Flask(__name__)\n\nUPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/upload', methods=['POST'])\ndef upload():\n    file = request.files['file']\n    file.save(os.path.join(app.config['UPLOAD_FOLDER'], file.filename))\n    return 'File uploaded successfully!'\n\n@app.route('/download/<filename>')\ndef download(filename):\n    return send_file(os.path.join(app.config['UPLOAD_FOLDER'], filename), as_attachment=True)\n\nif __name__ == '__main__':\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>File Uploader/Downloader</title>\\n</head>\\n<body>\\n    <h1>File Uploader/Downloader</h1>\\n    <form method='POST' action='/upload' enctype='multipart/form-data'>\\n        <input type='file' name='file'>\\n        <input type='submit' value='Upload'>\\n    </form>\\n    <br>\\n    <h2>Uploaded Files</h2>\\n    <ul>\\n        {% for file in os.listdir(app.config['UPLOAD_FOLDER']) %}\\n        <li><a href='/download/{{ file }}'>{{ file }}</a></li>\\n        {% endfor %}\\n    </ul>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a Flask application that displays a real-time video stream from a webcam. The webpage should update the video stream every second without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, Response, render_template\\nimport cv2\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the video stream\\ndef get_stream():\\n    camera = cv2.VideoCapture(0)\\n    while True:\\n        success, frame = camera.read()\\n        if not success:\\n            break\\n        ret, buffer = cv2.imencode('.jpg', frame)\\n        frame = buffer.tobytes()\\n        yield (b'--frame\\r\\n'\\n               b'Content-Type: image/jpeg\\r\\n\\r\\n' + frame + b'\\r\\n')\\n\\n# Create a Flask route to stream the video\\n@app.route('/stream')\\ndef stream():\\n    return Response(get_stream(), mimetype='multipart/x-mixed-replace; boundary=frame')\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>Real-Time Webcam Stream</title>\\n</head>\\n<body>\\n    <h1>Real-Time Webcam Stream</h1>\\n    <img src=\\\"/stream\\\">\\n</body>\\n</html>\"}"
}
{
  "text": "Create a real-time stock market dashboard using Flask and Plotly. The dashboard should display real-time stock prices and volume for a specified list of stocks, and should update automatically without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"},\"static\":{\"style.css\":\"\",\"plotly-latest.min.js\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, Response\\nimport plotly\\nimport plotly.graph_objs as go\\nimport yfinance as yf\\nimport time\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the stock prices and volume data\\ndef get_stock_data(stock_tickers):\\n    data = []\\n    for ticker in stock_tickers:\\n        stock = yf.Ticker(ticker)\\n        hist = stock.history(period='1d')\\n        stock_data = go.Candlestick(x=hist.index, open=hist['Open'], high=hist['High'], low=hist['Low'], close=hist['Close'], name=ticker)\\n        data.append(stock_data)\\n    return data\\n\\n# Create a Flask route to stream the stock data\\n@app.route('/stream')\\ndef stream_stock_data():\\n    stock_tickers = ['AAPL', 'GOOGL', 'TSLA', 'AMZN']\\n    while True:\\n        stock_data = get_stock_data(stock_tickers)\\n        yield plotly.io.to_json({'data': stock_data, 'layout': {'title': 'Real-Time Stock Market Dashboard'}})\\n        time.sleep(10)\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <link rel=\\\"stylesheet\\\" href=\\\"{{ url_for('static', filename='style.css') }}\\\">\\n    <script src=\\\"{{ url_for('static', filename='plotly-latest.min.js') }}\\\"></script>\\n    <title>Real-Time Stock Market Dashboard</title>\\n</head>\\n<body>\\n    <h1>Real-Time Stock Market Dashboard</h1>\\n    <div id=\\\"chart\\\"></div>\\n    <script>\\n        const chartElement = document.getElementById('chart');\\n        const eventSource = new EventSource('/stream');\\n        eventSource.addEventListener('message', function(event) {\\n            const data = JSON.parse(event.data);\\n            Plotly.newPlot(chartElement, data);\\n        });\\n    </script>\\n</body>\\n</html>\",\"static/style.css\":\"body {\\n    font-family: Arial, Helvetica, sans-serif;\\n}\\n\\nh1 {\\n    text-align: center;\\n}\\n\\n#chart {\\n    margin: 20px auto;\\n    max-width: 100%;\\n    height: 500px;\\n}\"}"
}
{
  "text": "Create a real-time chat application using Flask-SocketIO that allows users to join a chat room and send messages to each other in real-time.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template\\nfrom flask_socketio import SocketIO, join_room, leave_room, emit\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret_key'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('join')\\ndef on_join(data):\\n    username = data['username']\\n    room = data['room']\\n    join_room(room)\\n    message = username + ' has joined the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef on_leave(data):\\n    username = data['username']\\n    room = data['room']\\n    leave_room(room)\\n    message = username + ' has left the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef on_message(data):\\n    username = data['username']\\n    room = data['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Flask-SocketIO Chat</title>\\n</head>\\n<body>\\n    <div id=\\\"chat\\\">\\n        <h1>Flask-SocketIO Chat</h1>\\n        <div id=\\\"status\\\"></div>\\n        <div id=\\\"chat-window\\\"></div>\\n        <form id=\\\"message-form\\\">\\n            <input id=\\\"message\\\" type=\\\"text\\\" placeholder=\\\"Enter a message...\\\" autocomplete=\\\"off\\\">\\n            <button type=\\\"submit\\\">Send</button>\\n        </form>\\n    </div>\\n    <script src=\\\"https://cdn.socket.io/4.1.2/socket.io.min.js\\\"></script>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat-window');\\n        var joinForm = document.getElementById('join-form');\\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message= document.getElementById('message').value;\\n            socket.emit('message', {\\n                username: username,\\n                room: room,\\n                message: message\\n            });\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(message);\\n            messageElement.appendChild(messageText);\\n            statusElement.appendChild(messageElement);\\n        });\\n    </script>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a basic portfolio website using HTML, CSS, and JavaScript. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\",\"script.js\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n    <script src=\\\"script.js\\\"></script>\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form action=\\\"#\\\">\\n                <div>\\n                    <label for=\\\"name\\\">Name:</label>\\n                    <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"email\\\">Email:</label>\\n                    <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"message\\\">Message:</label>\\n                    <textarea id=\\\"message\\\" name=\\\"message\\\"></textarea>\\n                </div>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n    <footer>\\n        <p>&copy; 2023 My Portfolio</p>\\n    </footer>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\n\\nbody {\\n    margin: 0;\\n    font-family: 'Segoe UI', sans-serif;\\n}\\n\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    padding: 1rem;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2rem;\\n}\\n\\nheader nav ul {\\n    list-style-type: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n}\\n\\nheader nav ul li {\\n    margin: 0 1rem;\\n}\\n\\nheader nav ul li a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\nmain {\\n    margin: 2rem;\\n}\\n\\nsection {\\n    margin: 2rem 0;\\n}\\n\\nsection h2 {\\n    margin: 0;\\n}\\n\\nsection p {\\n    margin-top: 1rem;\\n}\\n\\n.project-card {\\n    background-color: #fff;\\n    border: 1px solid #ccc;\\n    padding: 1rem;\\n    border-radius: 0.25rem;\\n    box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.075);\\n    margin-bottom: 2rem;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    max-width: 100%;\\n}\\n\\nfooter {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    height: 3rem;\\n}\\n\\nfooter p {\\n    margin: 0;\\n}\\n\",\"script.js\":\"// Add active class to the current navbar link\\nvar header = document.getElementById(\"navbar\");\\nvar links = header.getElementsByClassName(\"nav-link\");\\nfor (var i = 0; i < links.length; i++) {\\n  links[i].addEventListener(\"click\", function() {\\n    var current = document.getElementsByClassName(\"active\");\\n    current[0].className = current[0].className.replace(\" active\", \"\");\\n    this.className += \" active\";\\n  });\\n}\"}"
}
{
  "text": "Create a basic portfolio website using only HTML and CSS. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=...Project 3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form>\\n                <label for=\\\"name\\\">Name:</label>\\n                <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\" required>\\n                <label for=\\\"email\\\">Email:</label>\\n                <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\" required>\\n                <label for=\\\"message\\\">Message:</label>\\n                <textarea id=\\\"message\\\" name=\\\"message\\\" required></textarea>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\nbody {\\n    font-family: Arial, sans-serif;\\n    margin: 0;\\n    padding: 0;\\n}\\n\\n/* Header styles */\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    padding: 20px;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2em;\\n}\\n\\nheader ul {\\n    list-style: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader li {\\n    margin: 0 10px;\\n}\\n\\nheader a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\n/* Main content styles */\\nmain {\\n    max-width: 800px;\\n    margin: 20px auto;\\n    padding: 0 20px;\\n}\\n\\nsection {\\n    margin-bottom: 50px;\\n}\\n\\nsection h2 {\\n    margin-top: 0;\\n}\\n\\n.project-card {\\n    border: 1px solid #ccc;\\n    border-radius: 5px;\\n    padding: 10px;\\n    margin-bottom: 20px;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    width: 100%;\\n}\\n\\n/* Contact form styles */\\nform {\\n    display: flex;\\n    flex-direction: column;\\n}\\n\\nlabel {\\n    margin-bottom: 10px;\\n}\\n\\ninput, textarea {\\n    margin-bottom: 20px;\\n    padding: 10px;\\n    border-radius: 5px;\\n    border: none;\\n    background-color: #333;\\n    color: #fff;\\n    cursor: pointer;\\n    border-radius: 5px;\\n}\"\n}"
}
{"text": "Create a simple Python project with a main script and a utility script inside a utilities folder. The main script should read a file and count the number of lines. The utility script should contain a function to double the line count.", "file_structure": "{\"main.py\":\"\",\"utilities\":{\"utility.py\":\"\"}}", "code": "{\"main.py\":\"with open('input_file.txt', 'r') as file:\\n    lines = file.readlines()\\n    line_count = len(lines)\\n    print(f'Number of lines: {line_count}')\",\"utilities/utility.py\":\"def double_count(count):\\n    return count * 2\"}"}
{"text": "Create a real-time chat application with Flask-SocketIO. Users should be able to connect to the server and join a chatroom by entering a unique username and a room name. Users should be able to send and receive messages within the chatroom, and the messages should be displayed in real-time.", "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}", "code": "{\"app.py\":\"from flask import Flask, render_template, request, session\\nfrom flask_socketio import SocketIO, emit, join_room, leave_room\\nimport uuid\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret!'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('connect')\\ndef connect():\\n    print('Client connected')\\n\\n@socketio.on('disconnect')\\ndef disconnect():\\n    print('Client disconnected')\\n\\n@socketio.on('join')\\ndef join(data):\\n    username = data['username']\\n    room = data['room']\\n    session['username'] = username\\n    session['room'] = room\\n    join_room(room)\\n    message = f'{username} has joined the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef leave():\\n    username = session['username']\\n    room = session['room']\\n    leave_room(room)\\n    message = f'{username} has left the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef message(data):\\n    username = session['username']\\n    room = session['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app, debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Real-Time Chat Application</title>\\n    <script src='https://cdn.socket.io/4.3.1/socket.io.min.js'></script>\\n</head>\\n<body>\\n    <h1>Real-Time Chat Application</h1>\\n    <div id='status'></div>\\n    <div id='chat'></div>\\n    <form id='join-form'>\\n        <label for='username'>Username:</label>\\n        <input type='text' name='username' id='username'>\\n        <label for='room'>Room:</label>\\n        <input type='text' name='room' id='room'>\\n        <input type='submit' value='Join Room'>\\n    </form>\\n    <form id='message-form'>\\n        <input type='text' name='message' id='message'>\\n        <input type='submit' value='Send'>\\n    </form>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat');\\n        var joinForm =        document.getElementById('join-form');\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message = document.getElementById('message').value;\\n            socket.emit('message', {\\n                message: message\\n            });\\n            document.getElementById('message').value = '';\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = message;\\n            statusElement.appendChild(pElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = username + ': ' + message;\\n            chatElement.appendChild(pElement);\\n        });\\n    </script>\\n</body>\\n</html>\"\n}"}
{
  "text": "Create a Flask application that allows users to upload and download files. The application should have a homepage with a form to upload a file, and a page to download the uploaded files. The uploaded files should be stored in a 'uploads' folder within the application directory.",
  "file_structure": "{\"app.py\":\"\",\"uploads\":\"\"}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, request, send_file\nimport os\n\napp = Flask(__name__)\n\nUPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/upload', methods=['POST'])\ndef upload():\n    file = request.files['file']\n    file.save(os.path.join(app.config['UPLOAD_FOLDER'], file.filename))\n    return 'File uploaded successfully!'\n\n@app.route('/download/<filename>')\ndef download(filename):\n    return send_file(os.path.join(app.config['UPLOAD_FOLDER'], filename), as_attachment=True)\n\nif __name__ == '__main__':\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>File Uploader/Downloader</title>\\n</head>\\n<body>\\n    <h1>File Uploader/Downloader</h1>\\n    <form method='POST' action='/upload' enctype='multipart/form-data'>\\n        <input type='file' name='file'>\\n        <input type='submit' value='Upload'>\\n    </form>\\n    <br>\\n    <h2>Uploaded Files</h2>\\n    <ul>\\n        {% for file in os.listdir(app.config['UPLOAD_FOLDER']) %}\\n        <li><a href='/download/{{ file }}'>{{ file }}</a></li>\\n        {% endfor %}\\n    </ul>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a Flask application that displays a real-time video stream from a webcam. The webpage should update the video stream every second without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, Response, render_template\\nimport cv2\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the video stream\\ndef get_stream():\\n    camera = cv2.VideoCapture(0)\\n    while True:\\n        success, frame = camera.read()\\n        if not success:\\n            break\\n        ret, buffer = cv2.imencode('.jpg', frame)\\n        frame = buffer.tobytes()\\n        yield (b'--frame\\r\\n'\\n               b'Content-Type: image/jpeg\\r\\n\\r\\n' + frame + b'\\r\\n')\\n\\n# Create a Flask route to stream the video\\n@app.route('/stream')\\ndef stream():\\n    return Response(get_stream(), mimetype='multipart/x-mixed-replace; boundary=frame')\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>Real-Time Webcam Stream</title>\\n</head>\\n<body>\\n    <h1>Real-Time Webcam Stream</h1>\\n    <img src=\\\"/stream\\\">\\n</body>\\n</html>\"}"
}
{
  "text": "Create a real-time stock market dashboard using Flask and Plotly. The dashboard should display real-time stock prices and volume for a specified list of stocks, and should update automatically without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"},\"static\":{\"style.css\":\"\",\"plotly-latest.min.js\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, Response\\nimport plotly\\nimport plotly.graph_objs as go\\nimport yfinance as yf\\nimport time\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the stock prices and volume data\\ndef get_stock_data(stock_tickers):\\n    data = []\\n    for ticker in stock_tickers:\\n        stock = yf.Ticker(ticker)\\n        hist = stock.history(period='1d')\\n        stock_data = go.Candlestick(x=hist.index, open=hist['Open'], high=hist['High'], low=hist['Low'], close=hist['Close'], name=ticker)\\n        data.append(stock_data)\\n    return data\\n\\n# Create a Flask route to stream the stock data\\n@app.route('/stream')\\ndef stream_stock_data():\\n    stock_tickers = ['AAPL', 'GOOGL', 'TSLA', 'AMZN']\\n    while True:\\n        stock_data = get_stock_data(stock_tickers)\\n        yield plotly.io.to_json({'data': stock_data, 'layout': {'title': 'Real-Time Stock Market Dashboard'}})\\n        time.sleep(10)\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <link rel=\\\"stylesheet\\\" href=\\\"{{ url_for('static', filename='style.css') }}\\\">\\n    <script src=\\\"{{ url_for('static', filename='plotly-latest.min.js') }}\\\"></script>\\n    <title>Real-Time Stock Market Dashboard</title>\\n</head>\\n<body>\\n    <h1>Real-Time Stock Market Dashboard</h1>\\n    <div id=\\\"chart\\\"></div>\\n    <script>\\n        const chartElement = document.getElementById('chart');\\n        const eventSource = new EventSource('/stream');\\n        eventSource.addEventListener('message', function(event) {\\n            const data = JSON.parse(event.data);\\n            Plotly.newPlot(chartElement, data);\\n        });\\n    </script>\\n</body>\\n</html>\",\"static/style.css\":\"body {\\n    font-family: Arial, Helvetica, sans-serif;\\n}\\n\\nh1 {\\n    text-align: center;\\n}\\n\\n#chart {\\n    margin: 20px auto;\\n    max-width: 100%;\\n    height: 500px;\\n}\"}"
}
{
  "text": "Create a real-time chat application using Flask-SocketIO that allows users to join a chat room and send messages to each other in real-time.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template\\nfrom flask_socketio import SocketIO, join_room, leave_room, emit\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret_key'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('join')\\ndef on_join(data):\\n    username = data['username']\\n    room = data['room']\\n    join_room(room)\\n    message = username + ' has joined the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef on_leave(data):\\n    username = data['username']\\n    room = data['room']\\n    leave_room(room)\\n    message = username + ' has left the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef on_message(data):\\n    username = data['username']\\n    room = data['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Flask-SocketIO Chat</title>\\n</head>\\n<body>\\n    <div id=\\\"chat\\\">\\n        <h1>Flask-SocketIO Chat</h1>\\n        <div id=\\\"status\\\"></div>\\n        <div id=\\\"chat-window\\\"></div>\\n        <form id=\\\"message-form\\\">\\n            <input id=\\\"message\\\" type=\\\"text\\\" placeholder=\\\"Enter a message...\\\" autocomplete=\\\"off\\\">\\n            <button type=\\\"submit\\\">Send</button>\\n        </form>\\n    </div>\\n    <script src=\\\"https://cdn.socket.io/4.1.2/socket.io.min.js\\\"></script>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat-window');\\n        var joinForm = document.getElementById('join-form');\\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message= document.getElementById('message').value;\\n            socket.emit('message', {\\n                username: username,\\n                room: room,\\n                message: message\\n            });\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(message);\\n            messageElement.appendChild(messageText);\\n            statusElement.appendChild(messageElement);\\n        });\\n    </script>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a basic portfolio website using HTML, CSS, and JavaScript. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\",\"script.js\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n    <script src=\\\"script.js\\\"></script>\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form action=\\\"#\\\">\\n                <div>\\n                    <label for=\\\"name\\\">Name:</label>\\n                    <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"email\\\">Email:</label>\\n                    <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"message\\\">Message:</label>\\n                    <textarea id=\\\"message\\\" name=\\\"message\\\"></textarea>\\n                </div>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n    <footer>\\n        <p>&copy; 2023 My Portfolio</p>\\n    </footer>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\n\\nbody {\\n    margin: 0;\\n    font-family: 'Segoe UI', sans-serif;\\n}\\n\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    padding: 1rem;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2rem;\\n}\\n\\nheader nav ul {\\n    list-style-type: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n}\\n\\nheader nav ul li {\\n    margin: 0 1rem;\\n}\\n\\nheader nav ul li a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\nmain {\\n    margin: 2rem;\\n}\\n\\nsection {\\n    margin: 2rem 0;\\n}\\n\\nsection h2 {\\n    margin: 0;\\n}\\n\\nsection p {\\n    margin-top: 1rem;\\n}\\n\\n.project-card {\\n    background-color: #fff;\\n    border: 1px solid #ccc;\\n    padding: 1rem;\\n    border-radius: 0.25rem;\\n    box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.075);\\n    margin-bottom: 2rem;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    max-width: 100%;\\n}\\n\\nfooter {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    height: 3rem;\\n}\\n\\nfooter p {\\n    margin: 0;\\n}\\n\",\"script.js\":\"// Add active class to the current navbar link\\nvar header = document.getElementById(\"navbar\");\\nvar links = header.getElementsByClassName(\"nav-link\");\\nfor (var i = 0; i < links.length; i++) {\\n  links[i].addEventListener(\"click\", function() {\\n    var current = document.getElementsByClassName(\"active\");\\n    current[0].className = current[0].className.replace(\" active\", \"\");\\n    this.className += \" active\";\\n  });\\n}\"}"
}
{
  "text": "Create a basic portfolio website using only HTML and CSS. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=...Project 3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form>\\n                <label for=\\\"name\\\">Name:</label>\\n                <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\" required>\\n                <label for=\\\"email\\\">Email:</label>\\n                <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\" required>\\n                <label for=\\\"message\\\">Message:</label>\\n                <textarea id=\\\"message\\\" name=\\\"message\\\" required></textarea>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\nbody {\\n    font-family: Arial, sans-serif;\\n    margin: 0;\\n    padding: 0;\\n}\\n\\n/* Header styles */\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    padding: 20px;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2em;\\n}\\n\\nheader ul {\\n    list-style: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader li {\\n    margin: 0 10px;\\n}\\n\\nheader a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\n/* Main content styles */\\nmain {\\n    max-width: 800px;\\n    margin: 20px auto;\\n    padding: 0 20px;\\n}\\n\\nsection {\\n    margin-bottom: 50px;\\n}\\n\\nsection h2 {\\n    margin-top: 0;\\n}\\n\\n.project-card {\\n    border: 1px solid #ccc;\\n    border-radius: 5px;\\n    padding: 10px;\\n    margin-bottom: 20px;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    width: 100%;\\n}\\n\\n/* Contact form styles */\\nform {\\n    display: flex;\\n    flex-direction: column;\\n}\\n\\nlabel {\\n    margin-bottom: 10px;\\n}\\n\\ninput, textarea {\\n    margin-bottom: 20px;\\n    padding: 10px;\\n    border-radius: 5px;\\n    border: none;\\n    background-color: #333;\\n    color: #fff;\\n    cursor: pointer;\\n    border-radius: 5px;\\n}\"\n}"
}
{"text": "Create a simple Python project with a main script and a utility script inside a utilities folder. The main script should read a file and count the number of lines. The utility script should contain a function to double the line count.", "file_structure": "{\"main.py\":\"\",\"utilities\":{\"utility.py\":\"\"}}", "code": "{\"main.py\":\"with open('input_file.txt', 'r') as file:\\n    lines = file.readlines()\\n    line_count = len(lines)\\n    print(f'Number of lines: {line_count}')\",\"utilities/utility.py\":\"def double_count(count):\\n    return count * 2\"}"}
{"text": "Create a real-time chat application with Flask-SocketIO. Users should be able to connect to the server and join a chatroom by entering a unique username and a room name. Users should be able to send and receive messages within the chatroom, and the messages should be displayed in real-time.", "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}", "code": "{\"app.py\":\"from flask import Flask, render_template, request, session\\nfrom flask_socketio import SocketIO, emit, join_room, leave_room\\nimport uuid\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret!'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('connect')\\ndef connect():\\n    print('Client connected')\\n\\n@socketio.on('disconnect')\\ndef disconnect():\\n    print('Client disconnected')\\n\\n@socketio.on('join')\\ndef join(data):\\n    username = data['username']\\n    room = data['room']\\n    session['username'] = username\\n    session['room'] = room\\n    join_room(room)\\n    message = f'{username} has joined the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef leave():\\n    username = session['username']\\n    room = session['room']\\n    leave_room(room)\\n    message = f'{username} has left the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef message(data):\\n    username = session['username']\\n    room = session['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app, debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Real-Time Chat Application</title>\\n    <script src='https://cdn.socket.io/4.3.1/socket.io.min.js'></script>\\n</head>\\n<body>\\n    <h1>Real-Time Chat Application</h1>\\n    <div id='status'></div>\\n    <div id='chat'></div>\\n    <form id='join-form'>\\n        <label for='username'>Username:</label>\\n        <input type='text' name='username' id='username'>\\n        <label for='room'>Room:</label>\\n        <input type='text' name='room' id='room'>\\n        <input type='submit' value='Join Room'>\\n    </form>\\n    <form id='message-form'>\\n        <input type='text' name='message' id='message'>\\n        <input type='submit' value='Send'>\\n    </form>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat');\\n        var joinForm =        document.getElementById('join-form');\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message = document.getElementById('message').value;\\n            socket.emit('message', {\\n                message: message\\n            });\\n            document.getElementById('message').value = '';\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = message;\\n            statusElement.appendChild(pElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = username + ': ' + message;\\n            chatElement.appendChild(pElement);\\n        });\\n    </script>\\n</body>\\n</html>\"\n}"}
{
  "text": "Create a Flask application that allows users to upload and download files. The application should have a homepage with a form to upload a file, and a page to download the uploaded files. The uploaded files should be stored in a 'uploads' folder within the application directory.",
  "file_structure": "{\"app.py\":\"\",\"uploads\":\"\"}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, request, send_file\nimport os\n\napp = Flask(__name__)\n\nUPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/upload', methods=['POST'])\ndef upload():\n    file = request.files['file']\n    file.save(os.path.join(app.config['UPLOAD_FOLDER'], file.filename))\n    return 'File uploaded successfully!'\n\n@app.route('/download/<filename>')\ndef download(filename):\n    return send_file(os.path.join(app.config['UPLOAD_FOLDER'], filename), as_attachment=True)\n\nif __name__ == '__main__':\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>File Uploader/Downloader</title>\\n</head>\\n<body>\\n    <h1>File Uploader/Downloader</h1>\\n    <form method='POST' action='/upload' enctype='multipart/form-data'>\\n        <input type='file' name='file'>\\n        <input type='submit' value='Upload'>\\n    </form>\\n    <br>\\n    <h2>Uploaded Files</h2>\\n    <ul>\\n        {% for file in os.listdir(app.config['UPLOAD_FOLDER']) %}\\n        <li><a href='/download/{{ file }}'>{{ file }}</a></li>\\n        {% endfor %}\\n    </ul>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a Flask application that displays a real-time video stream from a webcam. The webpage should update the video stream every second without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, Response, render_template\\nimport cv2\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the video stream\\ndef get_stream():\\n    camera = cv2.VideoCapture(0)\\n    while True:\\n        success, frame = camera.read()\\n        if not success:\\n            break\\n        ret, buffer = cv2.imencode('.jpg', frame)\\n        frame = buffer.tobytes()\\n        yield (b'--frame\\r\\n'\\n               b'Content-Type: image/jpeg\\r\\n\\r\\n' + frame + b'\\r\\n')\\n\\n# Create a Flask route to stream the video\\n@app.route('/stream')\\ndef stream():\\n    return Response(get_stream(), mimetype='multipart/x-mixed-replace; boundary=frame')\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>Real-Time Webcam Stream</title>\\n</head>\\n<body>\\n    <h1>Real-Time Webcam Stream</h1>\\n    <img src=\\\"/stream\\\">\\n</body>\\n</html>\"}"
}
{
  "text": "Create a real-time stock market dashboard using Flask and Plotly. The dashboard should display real-time stock prices and volume for a specified list of stocks, and should update automatically without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"},\"static\":{\"style.css\":\"\",\"plotly-latest.min.js\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, Response\\nimport plotly\\nimport plotly.graph_objs as go\\nimport yfinance as yf\\nimport time\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the stock prices and volume data\\ndef get_stock_data(stock_tickers):\\n    data = []\\n    for ticker in stock_tickers:\\n        stock = yf.Ticker(ticker)\\n        hist = stock.history(period='1d')\\n        stock_data = go.Candlestick(x=hist.index, open=hist['Open'], high=hist['High'], low=hist['Low'], close=hist['Close'], name=ticker)\\n        data.append(stock_data)\\n    return data\\n\\n# Create a Flask route to stream the stock data\\n@app.route('/stream')\\ndef stream_stock_data():\\n    stock_tickers = ['AAPL', 'GOOGL', 'TSLA', 'AMZN']\\n    while True:\\n        stock_data = get_stock_data(stock_tickers)\\n        yield plotly.io.to_json({'data': stock_data, 'layout': {'title': 'Real-Time Stock Market Dashboard'}})\\n        time.sleep(10)\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <link rel=\\\"stylesheet\\\" href=\\\"{{ url_for('static', filename='style.css') }}\\\">\\n    <script src=\\\"{{ url_for('static', filename='plotly-latest.min.js') }}\\\"></script>\\n    <title>Real-Time Stock Market Dashboard</title>\\n</head>\\n<body>\\n    <h1>Real-Time Stock Market Dashboard</h1>\\n    <div id=\\\"chart\\\"></div>\\n    <script>\\n        const chartElement = document.getElementById('chart');\\n        const eventSource = new EventSource('/stream');\\n        eventSource.addEventListener('message', function(event) {\\n            const data = JSON.parse(event.data);\\n            Plotly.newPlot(chartElement, data);\\n        });\\n    </script>\\n</body>\\n</html>\",\"static/style.css\":\"body {\\n    font-family: Arial, Helvetica, sans-serif;\\n}\\n\\nh1 {\\n    text-align: center;\\n}\\n\\n#chart {\\n    margin: 20px auto;\\n    max-width: 100%;\\n    height: 500px;\\n}\"}"
}
{
  "text": "Create a real-time chat application using Flask-SocketIO that allows users to join a chat room and send messages to each other in real-time.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template\\nfrom flask_socketio import SocketIO, join_room, leave_room, emit\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret_key'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('join')\\ndef on_join(data):\\n    username = data['username']\\n    room = data['room']\\n    join_room(room)\\n    message = username + ' has joined the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef on_leave(data):\\n    username = data['username']\\n    room = data['room']\\n    leave_room(room)\\n    message = username + ' has left the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef on_message(data):\\n    username = data['username']\\n    room = data['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Flask-SocketIO Chat</title>\\n</head>\\n<body>\\n    <div id=\\\"chat\\\">\\n        <h1>Flask-SocketIO Chat</h1>\\n        <div id=\\\"status\\\"></div>\\n        <div id=\\\"chat-window\\\"></div>\\n        <form id=\\\"message-form\\\">\\n            <input id=\\\"message\\\" type=\\\"text\\\" placeholder=\\\"Enter a message...\\\" autocomplete=\\\"off\\\">\\n            <button type=\\\"submit\\\">Send</button>\\n        </form>\\n    </div>\\n    <script src=\\\"https://cdn.socket.io/4.1.2/socket.io.min.js\\\"></script>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat-window');\\n        var joinForm = document.getElementById('join-form');\\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message= document.getElementById('message').value;\\n            socket.emit('message', {\\n                username: username,\\n                room: room,\\n                message: message\\n            });\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(message);\\n            messageElement.appendChild(messageText);\\n            statusElement.appendChild(messageElement);\\n        });\\n    </script>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a basic portfolio website using HTML, CSS, and JavaScript. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\",\"script.js\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n    <script src=\\\"script.js\\\"></script>\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form action=\\\"#\\\">\\n                <div>\\n                    <label for=\\\"name\\\">Name:</label>\\n                    <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"email\\\">Email:</label>\\n                    <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"message\\\">Message:</label>\\n                    <textarea id=\\\"message\\\" name=\\\"message\\\"></textarea>\\n                </div>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n    <footer>\\n        <p>&copy; 2023 My Portfolio</p>\\n    </footer>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\n\\nbody {\\n    margin: 0;\\n    font-family: 'Segoe UI', sans-serif;\\n}\\n\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    padding: 1rem;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2rem;\\n}\\n\\nheader nav ul {\\n    list-style-type: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n}\\n\\nheader nav ul li {\\n    margin: 0 1rem;\\n}\\n\\nheader nav ul li a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\nmain {\\n    margin: 2rem;\\n}\\n\\nsection {\\n    margin: 2rem 0;\\n}\\n\\nsection h2 {\\n    margin: 0;\\n}\\n\\nsection p {\\n    margin-top: 1rem;\\n}\\n\\n.project-card {\\n    background-color: #fff;\\n    border: 1px solid #ccc;\\n    padding: 1rem;\\n    border-radius: 0.25rem;\\n    box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.075);\\n    margin-bottom: 2rem;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    max-width: 100%;\\n}\\n\\nfooter {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    height: 3rem;\\n}\\n\\nfooter p {\\n    margin: 0;\\n}\\n\",\"script.js\":\"// Add active class to the current navbar link\\nvar header = document.getElementById(\"navbar\");\\nvar links = header.getElementsByClassName(\"nav-link\");\\nfor (var i = 0; i < links.length; i++) {\\n  links[i].addEventListener(\"click\", function() {\\n    var current = document.getElementsByClassName(\"active\");\\n    current[0].className = current[0].className.replace(\" active\", \"\");\\n    this.className += \" active\";\\n  });\\n}\"}"
}
{
  "text": "Create a basic portfolio website using only HTML and CSS. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=...Project 3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form>\\n                <label for=\\\"name\\\">Name:</label>\\n                <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\" required>\\n                <label for=\\\"email\\\">Email:</label>\\n                <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\" required>\\n                <label for=\\\"message\\\">Message:</label>\\n                <textarea id=\\\"message\\\" name=\\\"message\\\" required></textarea>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\nbody {\\n    font-family: Arial, sans-serif;\\n    margin: 0;\\n    padding: 0;\\n}\\n\\n/* Header styles */\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    padding: 20px;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2em;\\n}\\n\\nheader ul {\\n    list-style: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader li {\\n    margin: 0 10px;\\n}\\n\\nheader a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\n/* Main content styles */\\nmain {\\n    max-width: 800px;\\n    margin: 20px auto;\\n    padding: 0 20px;\\n}\\n\\nsection {\\n    margin-bottom: 50px;\\n}\\n\\nsection h2 {\\n    margin-top: 0;\\n}\\n\\n.project-card {\\n    border: 1px solid #ccc;\\n    border-radius: 5px;\\n    padding: 10px;\\n    margin-bottom: 20px;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    width: 100%;\\n}\\n\\n/* Contact form styles */\\nform {\\n    display: flex;\\n    flex-direction: column;\\n}\\n\\nlabel {\\n    margin-bottom: 10px;\\n}\\n\\ninput, textarea {\\n    margin-bottom: 20px;\\n    padding: 10px;\\n    border-radius: 5px;\\n    border: none;\\n    background-color: #333;\\n    color: #fff;\\n    cursor: pointer;\\n    border-radius: 5px;\\n}\"\n}"
}
{"text": "Create a simple Python project with a main script and a utility script inside a utilities folder. The main script should read a file and count the number of lines. The utility script should contain a function to double the line count.", "file_structure": "{\"main.py\":\"\",\"utilities\":{\"utility.py\":\"\"}}", "code": "{\"main.py\":\"with open('input_file.txt', 'r') as file:\\n    lines = file.readlines()\\n    line_count = len(lines)\\n    print(f'Number of lines: {line_count}')\",\"utilities/utility.py\":\"def double_count(count):\\n    return count * 2\"}"}
{"text": "Create a real-time chat application with Flask-SocketIO. Users should be able to connect to the server and join a chatroom by entering a unique username and a room name. Users should be able to send and receive messages within the chatroom, and the messages should be displayed in real-time.", "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}", "code": "{\"app.py\":\"from flask import Flask, render_template, request, session\\nfrom flask_socketio import SocketIO, emit, join_room, leave_room\\nimport uuid\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret!'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('connect')\\ndef connect():\\n    print('Client connected')\\n\\n@socketio.on('disconnect')\\ndef disconnect():\\n    print('Client disconnected')\\n\\n@socketio.on('join')\\ndef join(data):\\n    username = data['username']\\n    room = data['room']\\n    session['username'] = username\\n    session['room'] = room\\n    join_room(room)\\n    message = f'{username} has joined the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef leave():\\n    username = session['username']\\n    room = session['room']\\n    leave_room(room)\\n    message = f'{username} has left the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef message(data):\\n    username = session['username']\\n    room = session['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app, debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Real-Time Chat Application</title>\\n    <script src='https://cdn.socket.io/4.3.1/socket.io.min.js'></script>\\n</head>\\n<body>\\n    <h1>Real-Time Chat Application</h1>\\n    <div id='status'></div>\\n    <div id='chat'></div>\\n    <form id='join-form'>\\n        <label for='username'>Username:</label>\\n        <input type='text' name='username' id='username'>\\n        <label for='room'>Room:</label>\\n        <input type='text' name='room' id='room'>\\n        <input type='submit' value='Join Room'>\\n    </form>\\n    <form id='message-form'>\\n        <input type='text' name='message' id='message'>\\n        <input type='submit' value='Send'>\\n    </form>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat');\\n        var joinForm =        document.getElementById('join-form');\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message = document.getElementById('message').value;\\n            socket.emit('message', {\\n                message: message\\n            });\\n            document.getElementById('message').value = '';\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = message;\\n            statusElement.appendChild(pElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = username + ': ' + message;\\n            chatElement.appendChild(pElement);\\n        });\\n    </script>\\n</body>\\n</html>\"\n}"}
{
  "text": "Create a Flask application that allows users to upload and download files. The application should have a homepage with a form to upload a file, and a page to download the uploaded files. The uploaded files should be stored in a 'uploads' folder within the application directory.",
  "file_structure": "{\"app.py\":\"\",\"uploads\":\"\"}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, request, send_file\nimport os\n\napp = Flask(__name__)\n\nUPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/upload', methods=['POST'])\ndef upload():\n    file = request.files['file']\n    file.save(os.path.join(app.config['UPLOAD_FOLDER'], file.filename))\n    return 'File uploaded successfully!'\n\n@app.route('/download/<filename>')\ndef download(filename):\n    return send_file(os.path.join(app.config['UPLOAD_FOLDER'], filename), as_attachment=True)\n\nif __name__ == '__main__':\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>File Uploader/Downloader</title>\\n</head>\\n<body>\\n    <h1>File Uploader/Downloader</h1>\\n    <form method='POST' action='/upload' enctype='multipart/form-data'>\\n        <input type='file' name='file'>\\n        <input type='submit' value='Upload'>\\n    </form>\\n    <br>\\n    <h2>Uploaded Files</h2>\\n    <ul>\\n        {% for file in os.listdir(app.config['UPLOAD_FOLDER']) %}\\n        <li><a href='/download/{{ file }}'>{{ file }}</a></li>\\n        {% endfor %}\\n    </ul>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a Flask application that displays a real-time video stream from a webcam. The webpage should update the video stream every second without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, Response, render_template\\nimport cv2\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the video stream\\ndef get_stream():\\n    camera = cv2.VideoCapture(0)\\n    while True:\\n        success, frame = camera.read()\\n        if not success:\\n            break\\n        ret, buffer = cv2.imencode('.jpg', frame)\\n        frame = buffer.tobytes()\\n        yield (b'--frame\\r\\n'\\n               b'Content-Type: image/jpeg\\r\\n\\r\\n' + frame + b'\\r\\n')\\n\\n# Create a Flask route to stream the video\\n@app.route('/stream')\\ndef stream():\\n    return Response(get_stream(), mimetype='multipart/x-mixed-replace; boundary=frame')\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>Real-Time Webcam Stream</title>\\n</head>\\n<body>\\n    <h1>Real-Time Webcam Stream</h1>\\n    <img src=\\\"/stream\\\">\\n</body>\\n</html>\"}"
}
{
  "text": "Create a real-time stock market dashboard using Flask and Plotly. The dashboard should display real-time stock prices and volume for a specified list of stocks, and should update automatically without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"},\"static\":{\"style.css\":\"\",\"plotly-latest.min.js\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, Response\\nimport plotly\\nimport plotly.graph_objs as go\\nimport yfinance as yf\\nimport time\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the stock prices and volume data\\ndef get_stock_data(stock_tickers):\\n    data = []\\n    for ticker in stock_tickers:\\n        stock = yf.Ticker(ticker)\\n        hist = stock.history(period='1d')\\n        stock_data = go.Candlestick(x=hist.index, open=hist['Open'], high=hist['High'], low=hist['Low'], close=hist['Close'], name=ticker)\\n        data.append(stock_data)\\n    return data\\n\\n# Create a Flask route to stream the stock data\\n@app.route('/stream')\\ndef stream_stock_data():\\n    stock_tickers = ['AAPL', 'GOOGL', 'TSLA', 'AMZN']\\n    while True:\\n        stock_data = get_stock_data(stock_tickers)\\n        yield plotly.io.to_json({'data': stock_data, 'layout': {'title': 'Real-Time Stock Market Dashboard'}})\\n        time.sleep(10)\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <link rel=\\\"stylesheet\\\" href=\\\"{{ url_for('static', filename='style.css') }}\\\">\\n    <script src=\\\"{{ url_for('static', filename='plotly-latest.min.js') }}\\\"></script>\\n    <title>Real-Time Stock Market Dashboard</title>\\n</head>\\n<body>\\n    <h1>Real-Time Stock Market Dashboard</h1>\\n    <div id=\\\"chart\\\"></div>\\n    <script>\\n        const chartElement = document.getElementById('chart');\\n        const eventSource = new EventSource('/stream');\\n        eventSource.addEventListener('message', function(event) {\\n            const data = JSON.parse(event.data);\\n            Plotly.newPlot(chartElement, data);\\n        });\\n    </script>\\n</body>\\n</html>\",\"static/style.css\":\"body {\\n    font-family: Arial, Helvetica, sans-serif;\\n}\\n\\nh1 {\\n    text-align: center;\\n}\\n\\n#chart {\\n    margin: 20px auto;\\n    max-width: 100%;\\n    height: 500px;\\n}\"}"
}
{
  "text": "Create a real-time chat application using Flask-SocketIO that allows users to join a chat room and send messages to each other in real-time.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template\\nfrom flask_socketio import SocketIO, join_room, leave_room, emit\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret_key'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('join')\\ndef on_join(data):\\n    username = data['username']\\n    room = data['room']\\n    join_room(room)\\n    message = username + ' has joined the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef on_leave(data):\\n    username = data['username']\\n    room = data['room']\\n    leave_room(room)\\n    message = username + ' has left the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef on_message(data):\\n    username = data['username']\\n    room = data['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Flask-SocketIO Chat</title>\\n</head>\\n<body>\\n    <div id=\\\"chat\\\">\\n        <h1>Flask-SocketIO Chat</h1>\\n        <div id=\\\"status\\\"></div>\\n        <div id=\\\"chat-window\\\"></div>\\n        <form id=\\\"message-form\\\">\\n            <input id=\\\"message\\\" type=\\\"text\\\" placeholder=\\\"Enter a message...\\\" autocomplete=\\\"off\\\">\\n            <button type=\\\"submit\\\">Send</button>\\n        </form>\\n    </div>\\n    <script src=\\\"https://cdn.socket.io/4.1.2/socket.io.min.js\\\"></script>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat-window');\\n        var joinForm = document.getElementById('join-form');\\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message= document.getElementById('message').value;\\n            socket.emit('message', {\\n                username: username,\\n                room: room,\\n                message: message\\n            });\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(message);\\n            messageElement.appendChild(messageText);\\n            statusElement.appendChild(messageElement);\\n        });\\n    </script>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a basic portfolio website using HTML, CSS, and JavaScript. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\",\"script.js\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n    <script src=\\\"script.js\\\"></script>\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form action=\\\"#\\\">\\n                <div>\\n                    <label for=\\\"name\\\">Name:</label>\\n                    <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"email\\\">Email:</label>\\n                    <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"message\\\">Message:</label>\\n                    <textarea id=\\\"message\\\" name=\\\"message\\\"></textarea>\\n                </div>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n    <footer>\\n        <p>&copy; 2023 My Portfolio</p>\\n    </footer>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\n\\nbody {\\n    margin: 0;\\n    font-family: 'Segoe UI', sans-serif;\\n}\\n\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    padding: 1rem;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2rem;\\n}\\n\\nheader nav ul {\\n    list-style-type: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n}\\n\\nheader nav ul li {\\n    margin: 0 1rem;\\n}\\n\\nheader nav ul li a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\nmain {\\n    margin: 2rem;\\n}\\n\\nsection {\\n    margin: 2rem 0;\\n}\\n\\nsection h2 {\\n    margin: 0;\\n}\\n\\nsection p {\\n    margin-top: 1rem;\\n}\\n\\n.project-card {\\n    background-color: #fff;\\n    border: 1px solid #ccc;\\n    padding: 1rem;\\n    border-radius: 0.25rem;\\n    box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.075);\\n    margin-bottom: 2rem;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    max-width: 100%;\\n}\\n\\nfooter {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    height: 3rem;\\n}\\n\\nfooter p {\\n    margin: 0;\\n}\\n\",\"script.js\":\"// Add active class to the current navbar link\\nvar header = document.getElementById(\"navbar\");\\nvar links = header.getElementsByClassName(\"nav-link\");\\nfor (var i = 0; i < links.length; i++) {\\n  links[i].addEventListener(\"click\", function() {\\n    var current = document.getElementsByClassName(\"active\");\\n    current[0].className = current[0].className.replace(\" active\", \"\");\\n    this.className += \" active\";\\n  });\\n}\"}"
}
{
  "text": "Create a basic portfolio website using only HTML and CSS. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=...Project 3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form>\\n                <label for=\\\"name\\\">Name:</label>\\n                <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\" required>\\n                <label for=\\\"email\\\">Email:</label>\\n                <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\" required>\\n                <label for=\\\"message\\\">Message:</label>\\n                <textarea id=\\\"message\\\" name=\\\"message\\\" required></textarea>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\nbody {\\n    font-family: Arial, sans-serif;\\n    margin: 0;\\n    padding: 0;\\n}\\n\\n/* Header styles */\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    padding: 20px;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2em;\\n}\\n\\nheader ul {\\n    list-style: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader li {\\n    margin: 0 10px;\\n}\\n\\nheader a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\n/* Main content styles */\\nmain {\\n    max-width: 800px;\\n    margin: 20px auto;\\n    padding: 0 20px;\\n}\\n\\nsection {\\n    margin-bottom: 50px;\\n}\\n\\nsection h2 {\\n    margin-top: 0;\\n}\\n\\n.project-card {\\n    border: 1px solid #ccc;\\n    border-radius: 5px;\\n    padding: 10px;\\n    margin-bottom: 20px;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    width: 100%;\\n}\\n\\n/* Contact form styles */\\nform {\\n    display: flex;\\n    flex-direction: column;\\n}\\n\\nlabel {\\n    margin-bottom: 10px;\\n}\\n\\ninput, textarea {\\n    margin-bottom: 20px;\\n    padding: 10px;\\n    border-radius: 5px;\\n    border: none;\\n    background-color: #333;\\n    color: #fff;\\n    cursor: pointer;\\n    border-radius: 5px;\\n}\"\n}"
}
{"text": "Create a simple Python project with a main script and a utility script inside a utilities folder. The main script should read a file and count the number of lines. The utility script should contain a function to double the line count.", "file_structure": "{\"main.py\":\"\",\"utilities\":{\"utility.py\":\"\"}}", "code": "{\"main.py\":\"with open('input_file.txt', 'r') as file:\\n    lines = file.readlines()\\n    line_count = len(lines)\\n    print(f'Number of lines: {line_count}')\",\"utilities/utility.py\":\"def double_count(count):\\n    return count * 2\"}"}
{"text": "Create a real-time chat application with Flask-SocketIO. Users should be able to connect to the server and join a chatroom by entering a unique username and a room name. Users should be able to send and receive messages within the chatroom, and the messages should be displayed in real-time.", "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}", "code": "{\"app.py\":\"from flask import Flask, render_template, request, session\\nfrom flask_socketio import SocketIO, emit, join_room, leave_room\\nimport uuid\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret!'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('connect')\\ndef connect():\\n    print('Client connected')\\n\\n@socketio.on('disconnect')\\ndef disconnect():\\n    print('Client disconnected')\\n\\n@socketio.on('join')\\ndef join(data):\\n    username = data['username']\\n    room = data['room']\\n    session['username'] = username\\n    session['room'] = room\\n    join_room(room)\\n    message = f'{username} has joined the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef leave():\\n    username = session['username']\\n    room = session['room']\\n    leave_room(room)\\n    message = f'{username} has left the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef message(data):\\n    username = session['username']\\n    room = session['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app, debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Real-Time Chat Application</title>\\n    <script src='https://cdn.socket.io/4.3.1/socket.io.min.js'></script>\\n</head>\\n<body>\\n    <h1>Real-Time Chat Application</h1>\\n    <div id='status'></div>\\n    <div id='chat'></div>\\n    <form id='join-form'>\\n        <label for='username'>Username:</label>\\n        <input type='text' name='username' id='username'>\\n        <label for='room'>Room:</label>\\n        <input type='text' name='room' id='room'>\\n        <input type='submit' value='Join Room'>\\n    </form>\\n    <form id='message-form'>\\n        <input type='text' name='message' id='message'>\\n        <input type='submit' value='Send'>\\n    </form>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat');\\n        var joinForm =        document.getElementById('join-form');\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message = document.getElementById('message').value;\\n            socket.emit('message', {\\n                message: message\\n            });\\n            document.getElementById('message').value = '';\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = message;\\n            statusElement.appendChild(pElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = username + ': ' + message;\\n            chatElement.appendChild(pElement);\\n        });\\n    </script>\\n</body>\\n</html>\"\n}"}
{
  "text": "Create a Flask application that allows users to upload and download files. The application should have a homepage with a form to upload a file, and a page to download the uploaded files. The uploaded files should be stored in a 'uploads' folder within the application directory.",
  "file_structure": "{\"app.py\":\"\",\"uploads\":\"\"}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, request, send_file\nimport os\n\napp = Flask(__name__)\n\nUPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/upload', methods=['POST'])\ndef upload():\n    file = request.files['file']\n    file.save(os.path.join(app.config['UPLOAD_FOLDER'], file.filename))\n    return 'File uploaded successfully!'\n\n@app.route('/download/<filename>')\ndef download(filename):\n    return send_file(os.path.join(app.config['UPLOAD_FOLDER'], filename), as_attachment=True)\n\nif __name__ == '__main__':\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>File Uploader/Downloader</title>\\n</head>\\n<body>\\n    <h1>File Uploader/Downloader</h1>\\n    <form method='POST' action='/upload' enctype='multipart/form-data'>\\n        <input type='file' name='file'>\\n        <input type='submit' value='Upload'>\\n    </form>\\n    <br>\\n    <h2>Uploaded Files</h2>\\n    <ul>\\n        {% for file in os.listdir(app.config['UPLOAD_FOLDER']) %}\\n        <li><a href='/download/{{ file }}'>{{ file }}</a></li>\\n        {% endfor %}\\n    </ul>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a Flask application that displays a real-time video stream from a webcam. The webpage should update the video stream every second without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, Response, render_template\\nimport cv2\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the video stream\\ndef get_stream():\\n    camera = cv2.VideoCapture(0)\\n    while True:\\n        success, frame = camera.read()\\n        if not success:\\n            break\\n        ret, buffer = cv2.imencode('.jpg', frame)\\n        frame = buffer.tobytes()\\n        yield (b'--frame\\r\\n'\\n               b'Content-Type: image/jpeg\\r\\n\\r\\n' + frame + b'\\r\\n')\\n\\n# Create a Flask route to stream the video\\n@app.route('/stream')\\ndef stream():\\n    return Response(get_stream(), mimetype='multipart/x-mixed-replace; boundary=frame')\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>Real-Time Webcam Stream</title>\\n</head>\\n<body>\\n    <h1>Real-Time Webcam Stream</h1>\\n    <img src=\\\"/stream\\\">\\n</body>\\n</html>\"}"
}
{
  "text": "Create a real-time stock market dashboard using Flask and Plotly. The dashboard should display real-time stock prices and volume for a specified list of stocks, and should update automatically without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"},\"static\":{\"style.css\":\"\",\"plotly-latest.min.js\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, Response\\nimport plotly\\nimport plotly.graph_objs as go\\nimport yfinance as yf\\nimport time\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the stock prices and volume data\\ndef get_stock_data(stock_tickers):\\n    data = []\\n    for ticker in stock_tickers:\\n        stock = yf.Ticker(ticker)\\n        hist = stock.history(period='1d')\\n        stock_data = go.Candlestick(x=hist.index, open=hist['Open'], high=hist['High'], low=hist['Low'], close=hist['Close'], name=ticker)\\n        data.append(stock_data)\\n    return data\\n\\n# Create a Flask route to stream the stock data\\n@app.route('/stream')\\ndef stream_stock_data():\\n    stock_tickers = ['AAPL', 'GOOGL', 'TSLA', 'AMZN']\\n    while True:\\n        stock_data = get_stock_data(stock_tickers)\\n        yield plotly.io.to_json({'data': stock_data, 'layout': {'title': 'Real-Time Stock Market Dashboard'}})\\n        time.sleep(10)\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <link rel=\\\"stylesheet\\\" href=\\\"{{ url_for('static', filename='style.css') }}\\\">\\n    <script src=\\\"{{ url_for('static', filename='plotly-latest.min.js') }}\\\"></script>\\n    <title>Real-Time Stock Market Dashboard</title>\\n</head>\\n<body>\\n    <h1>Real-Time Stock Market Dashboard</h1>\\n    <div id=\\\"chart\\\"></div>\\n    <script>\\n        const chartElement = document.getElementById('chart');\\n        const eventSource = new EventSource('/stream');\\n        eventSource.addEventListener('message', function(event) {\\n            const data = JSON.parse(event.data);\\n            Plotly.newPlot(chartElement, data);\\n        });\\n    </script>\\n</body>\\n</html>\",\"static/style.css\":\"body {\\n    font-family: Arial, Helvetica, sans-serif;\\n}\\n\\nh1 {\\n    text-align: center;\\n}\\n\\n#chart {\\n    margin: 20px auto;\\n    max-width: 100%;\\n    height: 500px;\\n}\"}"
}
{
  "text": "Create a real-time chat application using Flask-SocketIO that allows users to join a chat room and send messages to each other in real-time.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template\\nfrom flask_socketio import SocketIO, join_room, leave_room, emit\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret_key'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('join')\\ndef on_join(data):\\n    username = data['username']\\n    room = data['room']\\n    join_room(room)\\n    message = username + ' has joined the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef on_leave(data):\\n    username = data['username']\\n    room = data['room']\\n    leave_room(room)\\n    message = username + ' has left the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef on_message(data):\\n    username = data['username']\\n    room = data['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Flask-SocketIO Chat</title>\\n</head>\\n<body>\\n    <div id=\\\"chat\\\">\\n        <h1>Flask-SocketIO Chat</h1>\\n        <div id=\\\"status\\\"></div>\\n        <div id=\\\"chat-window\\\"></div>\\n        <form id=\\\"message-form\\\">\\n            <input id=\\\"message\\\" type=\\\"text\\\" placeholder=\\\"Enter a message...\\\" autocomplete=\\\"off\\\">\\n            <button type=\\\"submit\\\">Send</button>\\n        </form>\\n    </div>\\n    <script src=\\\"https://cdn.socket.io/4.1.2/socket.io.min.js\\\"></script>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat-window');\\n        var joinForm = document.getElementById('join-form');\\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message= document.getElementById('message').value;\\n            socket.emit('message', {\\n                username: username,\\n                room: room,\\n                message: message\\n            });\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(message);\\n            messageElement.appendChild(messageText);\\n            statusElement.appendChild(messageElement);\\n        });\\n    </script>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a basic portfolio website using HTML, CSS, and JavaScript. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\",\"script.js\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n    <script src=\\\"script.js\\\"></script>\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form action=\\\"#\\\">\\n                <div>\\n                    <label for=\\\"name\\\">Name:</label>\\n                    <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"email\\\">Email:</label>\\n                    <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"message\\\">Message:</label>\\n                    <textarea id=\\\"message\\\" name=\\\"message\\\"></textarea>\\n                </div>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n    <footer>\\n        <p>&copy; 2023 My Portfolio</p>\\n    </footer>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\n\\nbody {\\n    margin: 0;\\n    font-family: 'Segoe UI', sans-serif;\\n}\\n\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    padding: 1rem;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2rem;\\n}\\n\\nheader nav ul {\\n    list-style-type: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n}\\n\\nheader nav ul li {\\n    margin: 0 1rem;\\n}\\n\\nheader nav ul li a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\nmain {\\n    margin: 2rem;\\n}\\n\\nsection {\\n    margin: 2rem 0;\\n}\\n\\nsection h2 {\\n    margin: 0;\\n}\\n\\nsection p {\\n    margin-top: 1rem;\\n}\\n\\n.project-card {\\n    background-color: #fff;\\n    border: 1px solid #ccc;\\n    padding: 1rem;\\n    border-radius: 0.25rem;\\n    box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.075);\\n    margin-bottom: 2rem;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    max-width: 100%;\\n}\\n\\nfooter {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    height: 3rem;\\n}\\n\\nfooter p {\\n    margin: 0;\\n}\\n\",\"script.js\":\"// Add active class to the current navbar link\\nvar header = document.getElementById(\"navbar\");\\nvar links = header.getElementsByClassName(\"nav-link\");\\nfor (var i = 0; i < links.length; i++) {\\n  links[i].addEventListener(\"click\", function() {\\n    var current = document.getElementsByClassName(\"active\");\\n    current[0].className = current[0].className.replace(\" active\", \"\");\\n    this.className += \" active\";\\n  });\\n}\"}"
}
{
  "text": "Create a basic portfolio website using only HTML and CSS. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=...Project 3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form>\\n                <label for=\\\"name\\\">Name:</label>\\n                <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\" required>\\n                <label for=\\\"email\\\">Email:</label>\\n                <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\" required>\\n                <label for=\\\"message\\\">Message:</label>\\n                <textarea id=\\\"message\\\" name=\\\"message\\\" required></textarea>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\nbody {\\n    font-family: Arial, sans-serif;\\n    margin: 0;\\n    padding: 0;\\n}\\n\\n/* Header styles */\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    padding: 20px;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2em;\\n}\\n\\nheader ul {\\n    list-style: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader li {\\n    margin: 0 10px;\\n}\\n\\nheader a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\n/* Main content styles */\\nmain {\\n    max-width: 800px;\\n    margin: 20px auto;\\n    padding: 0 20px;\\n}\\n\\nsection {\\n    margin-bottom: 50px;\\n}\\n\\nsection h2 {\\n    margin-top: 0;\\n}\\n\\n.project-card {\\n    border: 1px solid #ccc;\\n    border-radius: 5px;\\n    padding: 10px;\\n    margin-bottom: 20px;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    width: 100%;\\n}\\n\\n/* Contact form styles */\\nform {\\n    display: flex;\\n    flex-direction: column;\\n}\\n\\nlabel {\\n    margin-bottom: 10px;\\n}\\n\\ninput, textarea {\\n    margin-bottom: 20px;\\n    padding: 10px;\\n    border-radius: 5px;\\n    border: none;\\n    background-color: #333;\\n    color: #fff;\\n    cursor: pointer;\\n    border-radius: 5px;\\n}\"\n}"
}
{"text": "Create a simple Python project with a main script and a utility script inside a utilities folder. The main script should read a file and count the number of lines. The utility script should contain a function to double the line count.", "file_structure": "{\"main.py\":\"\",\"utilities\":{\"utility.py\":\"\"}}", "code": "{\"main.py\":\"with open('input_file.txt', 'r') as file:\\n    lines = file.readlines()\\n    line_count = len(lines)\\n    print(f'Number of lines: {line_count}')\",\"utilities/utility.py\":\"def double_count(count):\\n    return count * 2\"}"}
{"text": "Create a real-time chat application with Flask-SocketIO. Users should be able to connect to the server and join a chatroom by entering a unique username and a room name. Users should be able to send and receive messages within the chatroom, and the messages should be displayed in real-time.", "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}", "code": "{\"app.py\":\"from flask import Flask, render_template, request, session\\nfrom flask_socketio import SocketIO, emit, join_room, leave_room\\nimport uuid\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret!'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('connect')\\ndef connect():\\n    print('Client connected')\\n\\n@socketio.on('disconnect')\\ndef disconnect():\\n    print('Client disconnected')\\n\\n@socketio.on('join')\\ndef join(data):\\n    username = data['username']\\n    room = data['room']\\n    session['username'] = username\\n    session['room'] = room\\n    join_room(room)\\n    message = f'{username} has joined the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef leave():\\n    username = session['username']\\n    room = session['room']\\n    leave_room(room)\\n    message = f'{username} has left the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef message(data):\\n    username = session['username']\\n    room = session['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app, debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Real-Time Chat Application</title>\\n    <script src='https://cdn.socket.io/4.3.1/socket.io.min.js'></script>\\n</head>\\n<body>\\n    <h1>Real-Time Chat Application</h1>\\n    <div id='status'></div>\\n    <div id='chat'></div>\\n    <form id='join-form'>\\n        <label for='username'>Username:</label>\\n        <input type='text' name='username' id='username'>\\n        <label for='room'>Room:</label>\\n        <input type='text' name='room' id='room'>\\n        <input type='submit' value='Join Room'>\\n    </form>\\n    <form id='message-form'>\\n        <input type='text' name='message' id='message'>\\n        <input type='submit' value='Send'>\\n    </form>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat');\\n        var joinForm =        document.getElementById('join-form');\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message = document.getElementById('message').value;\\n            socket.emit('message', {\\n                message: message\\n            });\\n            document.getElementById('message').value = '';\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = message;\\n            statusElement.appendChild(pElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = username + ': ' + message;\\n            chatElement.appendChild(pElement);\\n        });\\n    </script>\\n</body>\\n</html>\"\n}"}
{
  "text": "Create a Flask application that allows users to upload and download files. The application should have a homepage with a form to upload a file, and a page to download the uploaded files. The uploaded files should be stored in a 'uploads' folder within the application directory.",
  "file_structure": "{\"app.py\":\"\",\"uploads\":\"\"}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, request, send_file\nimport os\n\napp = Flask(__name__)\n\nUPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/upload', methods=['POST'])\ndef upload():\n    file = request.files['file']\n    file.save(os.path.join(app.config['UPLOAD_FOLDER'], file.filename))\n    return 'File uploaded successfully!'\n\n@app.route('/download/<filename>')\ndef download(filename):\n    return send_file(os.path.join(app.config['UPLOAD_FOLDER'], filename), as_attachment=True)\n\nif __name__ == '__main__':\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>File Uploader/Downloader</title>\\n</head>\\n<body>\\n    <h1>File Uploader/Downloader</h1>\\n    <form method='POST' action='/upload' enctype='multipart/form-data'>\\n        <input type='file' name='file'>\\n        <input type='submit' value='Upload'>\\n    </form>\\n    <br>\\n    <h2>Uploaded Files</h2>\\n    <ul>\\n        {% for file in os.listdir(app.config['UPLOAD_FOLDER']) %}\\n        <li><a href='/download/{{ file }}'>{{ file }}</a></li>\\n        {% endfor %}\\n    </ul>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a Flask application that displays a real-time video stream from a webcam. The webpage should update the video stream every second without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, Response, render_template\\nimport cv2\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the video stream\\ndef get_stream():\\n    camera = cv2.VideoCapture(0)\\n    while True:\\n        success, frame = camera.read()\\n        if not success:\\n            break\\n        ret, buffer = cv2.imencode('.jpg', frame)\\n        frame = buffer.tobytes()\\n        yield (b'--frame\\r\\n'\\n               b'Content-Type: image/jpeg\\r\\n\\r\\n' + frame + b'\\r\\n')\\n\\n# Create a Flask route to stream the video\\n@app.route('/stream')\\ndef stream():\\n    return Response(get_stream(), mimetype='multipart/x-mixed-replace; boundary=frame')\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>Real-Time Webcam Stream</title>\\n</head>\\n<body>\\n    <h1>Real-Time Webcam Stream</h1>\\n    <img src=\\\"/stream\\\">\\n</body>\\n</html>\"}"
}
{
  "text": "Create a real-time stock market dashboard using Flask and Plotly. The dashboard should display real-time stock prices and volume for a specified list of stocks, and should update automatically without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"},\"static\":{\"style.css\":\"\",\"plotly-latest.min.js\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, Response\\nimport plotly\\nimport plotly.graph_objs as go\\nimport yfinance as yf\\nimport time\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the stock prices and volume data\\ndef get_stock_data(stock_tickers):\\n    data = []\\n    for ticker in stock_tickers:\\n        stock = yf.Ticker(ticker)\\n        hist = stock.history(period='1d')\\n        stock_data = go.Candlestick(x=hist.index, open=hist['Open'], high=hist['High'], low=hist['Low'], close=hist['Close'], name=ticker)\\n        data.append(stock_data)\\n    return data\\n\\n# Create a Flask route to stream the stock data\\n@app.route('/stream')\\ndef stream_stock_data():\\n    stock_tickers = ['AAPL', 'GOOGL', 'TSLA', 'AMZN']\\n    while True:\\n        stock_data = get_stock_data(stock_tickers)\\n        yield plotly.io.to_json({'data': stock_data, 'layout': {'title': 'Real-Time Stock Market Dashboard'}})\\n        time.sleep(10)\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <link rel=\\\"stylesheet\\\" href=\\\"{{ url_for('static', filename='style.css') }}\\\">\\n    <script src=\\\"{{ url_for('static', filename='plotly-latest.min.js') }}\\\"></script>\\n    <title>Real-Time Stock Market Dashboard</title>\\n</head>\\n<body>\\n    <h1>Real-Time Stock Market Dashboard</h1>\\n    <div id=\\\"chart\\\"></div>\\n    <script>\\n        const chartElement = document.getElementById('chart');\\n        const eventSource = new EventSource('/stream');\\n        eventSource.addEventListener('message', function(event) {\\n            const data = JSON.parse(event.data);\\n            Plotly.newPlot(chartElement, data);\\n        });\\n    </script>\\n</body>\\n</html>\",\"static/style.css\":\"body {\\n    font-family: Arial, Helvetica, sans-serif;\\n}\\n\\nh1 {\\n    text-align: center;\\n}\\n\\n#chart {\\n    margin: 20px auto;\\n    max-width: 100%;\\n    height: 500px;\\n}\"}"
}
{
  "text": "Create a real-time chat application using Flask-SocketIO that allows users to join a chat room and send messages to each other in real-time.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template\\nfrom flask_socketio import SocketIO, join_room, leave_room, emit\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret_key'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('join')\\ndef on_join(data):\\n    username = data['username']\\n    room = data['room']\\n    join_room(room)\\n    message = username + ' has joined the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef on_leave(data):\\n    username = data['username']\\n    room = data['room']\\n    leave_room(room)\\n    message = username + ' has left the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef on_message(data):\\n    username = data['username']\\n    room = data['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Flask-SocketIO Chat</title>\\n</head>\\n<body>\\n    <div id=\\\"chat\\\">\\n        <h1>Flask-SocketIO Chat</h1>\\n        <div id=\\\"status\\\"></div>\\n        <div id=\\\"chat-window\\\"></div>\\n        <form id=\\\"message-form\\\">\\n            <input id=\\\"message\\\" type=\\\"text\\\" placeholder=\\\"Enter a message...\\\" autocomplete=\\\"off\\\">\\n            <button type=\\\"submit\\\">Send</button>\\n        </form>\\n    </div>\\n    <script src=\\\"https://cdn.socket.io/4.1.2/socket.io.min.js\\\"></script>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat-window');\\n        var joinForm = document.getElementById('join-form');\\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message= document.getElementById('message').value;\\n            socket.emit('message', {\\n                username: username,\\n                room: room,\\n                message: message\\n            });\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(message);\\n            messageElement.appendChild(messageText);\\n            statusElement.appendChild(messageElement);\\n        });\\n    </script>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a basic portfolio website using HTML, CSS, and JavaScript. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\",\"script.js\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n    <script src=\\\"script.js\\\"></script>\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form action=\\\"#\\\">\\n                <div>\\n                    <label for=\\\"name\\\">Name:</label>\\n                    <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"email\\\">Email:</label>\\n                    <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"message\\\">Message:</label>\\n                    <textarea id=\\\"message\\\" name=\\\"message\\\"></textarea>\\n                </div>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n    <footer>\\n        <p>&copy; 2023 My Portfolio</p>\\n    </footer>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\n\\nbody {\\n    margin: 0;\\n    font-family: 'Segoe UI', sans-serif;\\n}\\n\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    padding: 1rem;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2rem;\\n}\\n\\nheader nav ul {\\n    list-style-type: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n}\\n\\nheader nav ul li {\\n    margin: 0 1rem;\\n}\\n\\nheader nav ul li a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\nmain {\\n    margin: 2rem;\\n}\\n\\nsection {\\n    margin: 2rem 0;\\n}\\n\\nsection h2 {\\n    margin: 0;\\n}\\n\\nsection p {\\n    margin-top: 1rem;\\n}\\n\\n.project-card {\\n    background-color: #fff;\\n    border: 1px solid #ccc;\\n    padding: 1rem;\\n    border-radius: 0.25rem;\\n    box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.075);\\n    margin-bottom: 2rem;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    max-width: 100%;\\n}\\n\\nfooter {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    height: 3rem;\\n}\\n\\nfooter p {\\n    margin: 0;\\n}\\n\",\"script.js\":\"// Add active class to the current navbar link\\nvar header = document.getElementById(\"navbar\");\\nvar links = header.getElementsByClassName(\"nav-link\");\\nfor (var i = 0; i < links.length; i++) {\\n  links[i].addEventListener(\"click\", function() {\\n    var current = document.getElementsByClassName(\"active\");\\n    current[0].className = current[0].className.replace(\" active\", \"\");\\n    this.className += \" active\";\\n  });\\n}\"}"
}
{
  "text": "Create a basic portfolio website using only HTML and CSS. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=...Project 3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form>\\n                <label for=\\\"name\\\">Name:</label>\\n                <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\" required>\\n                <label for=\\\"email\\\">Email:</label>\\n                <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\" required>\\n                <label for=\\\"message\\\">Message:</label>\\n                <textarea id=\\\"message\\\" name=\\\"message\\\" required></textarea>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\nbody {\\n    font-family: Arial, sans-serif;\\n    margin: 0;\\n    padding: 0;\\n}\\n\\n/* Header styles */\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    padding: 20px;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2em;\\n}\\n\\nheader ul {\\n    list-style: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader li {\\n    margin: 0 10px;\\n}\\n\\nheader a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\n/* Main content styles */\\nmain {\\n    max-width: 800px;\\n    margin: 20px auto;\\n    padding: 0 20px;\\n}\\n\\nsection {\\n    margin-bottom: 50px;\\n}\\n\\nsection h2 {\\n    margin-top: 0;\\n}\\n\\n.project-card {\\n    border: 1px solid #ccc;\\n    border-radius: 5px;\\n    padding: 10px;\\n    margin-bottom: 20px;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    width: 100%;\\n}\\n\\n/* Contact form styles */\\nform {\\n    display: flex;\\n    flex-direction: column;\\n}\\n\\nlabel {\\n    margin-bottom: 10px;\\n}\\n\\ninput, textarea {\\n    margin-bottom: 20px;\\n    padding: 10px;\\n    border-radius: 5px;\\n    border: none;\\n    background-color: #333;\\n    color: #fff;\\n    cursor: pointer;\\n    border-radius: 5px;\\n}\"\n}"
}
{"text": "Create a simple Python project with a main script and a utility script inside a utilities folder. The main script should read a file and count the number of lines. The utility script should contain a function to double the line count.", "file_structure": "{\"main.py\":\"\",\"utilities\":{\"utility.py\":\"\"}}", "code": "{\"main.py\":\"with open('input_file.txt', 'r') as file:\\n    lines = file.readlines()\\n    line_count = len(lines)\\n    print(f'Number of lines: {line_count}')\",\"utilities/utility.py\":\"def double_count(count):\\n    return count * 2\"}"}
{"text": "Create a real-time chat application with Flask-SocketIO. Users should be able to connect to the server and join a chatroom by entering a unique username and a room name. Users should be able to send and receive messages within the chatroom, and the messages should be displayed in real-time.", "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}", "code": "{\"app.py\":\"from flask import Flask, render_template, request, session\\nfrom flask_socketio import SocketIO, emit, join_room, leave_room\\nimport uuid\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret!'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('connect')\\ndef connect():\\n    print('Client connected')\\n\\n@socketio.on('disconnect')\\ndef disconnect():\\n    print('Client disconnected')\\n\\n@socketio.on('join')\\ndef join(data):\\n    username = data['username']\\n    room = data['room']\\n    session['username'] = username\\n    session['room'] = room\\n    join_room(room)\\n    message = f'{username} has joined the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef leave():\\n    username = session['username']\\n    room = session['room']\\n    leave_room(room)\\n    message = f'{username} has left the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef message(data):\\n    username = session['username']\\n    room = session['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app, debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Real-Time Chat Application</title>\\n    <script src='https://cdn.socket.io/4.3.1/socket.io.min.js'></script>\\n</head>\\n<body>\\n    <h1>Real-Time Chat Application</h1>\\n    <div id='status'></div>\\n    <div id='chat'></div>\\n    <form id='join-form'>\\n        <label for='username'>Username:</label>\\n        <input type='text' name='username' id='username'>\\n        <label for='room'>Room:</label>\\n        <input type='text' name='room' id='room'>\\n        <input type='submit' value='Join Room'>\\n    </form>\\n    <form id='message-form'>\\n        <input type='text' name='message' id='message'>\\n        <input type='submit' value='Send'>\\n    </form>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat');\\n        var joinForm =        document.getElementById('join-form');\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message = document.getElementById('message').value;\\n            socket.emit('message', {\\n                message: message\\n            });\\n            document.getElementById('message').value = '';\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = message;\\n            statusElement.appendChild(pElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = username + ': ' + message;\\n            chatElement.appendChild(pElement);\\n        });\\n    </script>\\n</body>\\n</html>\"\n}"}
{
  "text": "Create a Flask application that allows users to upload and download files. The application should have a homepage with a form to upload a file, and a page to download the uploaded files. The uploaded files should be stored in a 'uploads' folder within the application directory.",
  "file_structure": "{\"app.py\":\"\",\"uploads\":\"\"}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, request, send_file\nimport os\n\napp = Flask(__name__)\n\nUPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/upload', methods=['POST'])\ndef upload():\n    file = request.files['file']\n    file.save(os.path.join(app.config['UPLOAD_FOLDER'], file.filename))\n    return 'File uploaded successfully!'\n\n@app.route('/download/<filename>')\ndef download(filename):\n    return send_file(os.path.join(app.config['UPLOAD_FOLDER'], filename), as_attachment=True)\n\nif __name__ == '__main__':\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>File Uploader/Downloader</title>\\n</head>\\n<body>\\n    <h1>File Uploader/Downloader</h1>\\n    <form method='POST' action='/upload' enctype='multipart/form-data'>\\n        <input type='file' name='file'>\\n        <input type='submit' value='Upload'>\\n    </form>\\n    <br>\\n    <h2>Uploaded Files</h2>\\n    <ul>\\n        {% for file in os.listdir(app.config['UPLOAD_FOLDER']) %}\\n        <li><a href='/download/{{ file }}'>{{ file }}</a></li>\\n        {% endfor %}\\n    </ul>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a Flask application that displays a real-time video stream from a webcam. The webpage should update the video stream every second without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, Response, render_template\\nimport cv2\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the video stream\\ndef get_stream():\\n    camera = cv2.VideoCapture(0)\\n    while True:\\n        success, frame = camera.read()\\n        if not success:\\n            break\\n        ret, buffer = cv2.imencode('.jpg', frame)\\n        frame = buffer.tobytes()\\n        yield (b'--frame\\r\\n'\\n               b'Content-Type: image/jpeg\\r\\n\\r\\n' + frame + b'\\r\\n')\\n\\n# Create a Flask route to stream the video\\n@app.route('/stream')\\ndef stream():\\n    return Response(get_stream(), mimetype='multipart/x-mixed-replace; boundary=frame')\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>Real-Time Webcam Stream</title>\\n</head>\\n<body>\\n    <h1>Real-Time Webcam Stream</h1>\\n    <img src=\\\"/stream\\\">\\n</body>\\n</html>\"}"
}
{
  "text": "Create a real-time stock market dashboard using Flask and Plotly. The dashboard should display real-time stock prices and volume for a specified list of stocks, and should update automatically without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"},\"static\":{\"style.css\":\"\",\"plotly-latest.min.js\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, Response\\nimport plotly\\nimport plotly.graph_objs as go\\nimport yfinance as yf\\nimport time\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the stock prices and volume data\\ndef get_stock_data(stock_tickers):\\n    data = []\\n    for ticker in stock_tickers:\\n        stock = yf.Ticker(ticker)\\n        hist = stock.history(period='1d')\\n        stock_data = go.Candlestick(x=hist.index, open=hist['Open'], high=hist['High'], low=hist['Low'], close=hist['Close'], name=ticker)\\n        data.append(stock_data)\\n    return data\\n\\n# Create a Flask route to stream the stock data\\n@app.route('/stream')\\ndef stream_stock_data():\\n    stock_tickers = ['AAPL', 'GOOGL', 'TSLA', 'AMZN']\\n    while True:\\n        stock_data = get_stock_data(stock_tickers)\\n        yield plotly.io.to_json({'data': stock_data, 'layout': {'title': 'Real-Time Stock Market Dashboard'}})\\n        time.sleep(10)\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <link rel=\\\"stylesheet\\\" href=\\\"{{ url_for('static', filename='style.css') }}\\\">\\n    <script src=\\\"{{ url_for('static', filename='plotly-latest.min.js') }}\\\"></script>\\n    <title>Real-Time Stock Market Dashboard</title>\\n</head>\\n<body>\\n    <h1>Real-Time Stock Market Dashboard</h1>\\n    <div id=\\\"chart\\\"></div>\\n    <script>\\n        const chartElement = document.getElementById('chart');\\n        const eventSource = new EventSource('/stream');\\n        eventSource.addEventListener('message', function(event) {\\n            const data = JSON.parse(event.data);\\n            Plotly.newPlot(chartElement, data);\\n        });\\n    </script>\\n</body>\\n</html>\",\"static/style.css\":\"body {\\n    font-family: Arial, Helvetica, sans-serif;\\n}\\n\\nh1 {\\n    text-align: center;\\n}\\n\\n#chart {\\n    margin: 20px auto;\\n    max-width: 100%;\\n    height: 500px;\\n}\"}"
}
{
  "text": "Create a real-time chat application using Flask-SocketIO that allows users to join a chat room and send messages to each other in real-time.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template\\nfrom flask_socketio import SocketIO, join_room, leave_room, emit\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret_key'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('join')\\ndef on_join(data):\\n    username = data['username']\\n    room = data['room']\\n    join_room(room)\\n    message = username + ' has joined the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef on_leave(data):\\n    username = data['username']\\n    room = data['room']\\n    leave_room(room)\\n    message = username + ' has left the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef on_message(data):\\n    username = data['username']\\n    room = data['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Flask-SocketIO Chat</title>\\n</head>\\n<body>\\n    <div id=\\\"chat\\\">\\n        <h1>Flask-SocketIO Chat</h1>\\n        <div id=\\\"status\\\"></div>\\n        <div id=\\\"chat-window\\\"></div>\\n        <form id=\\\"message-form\\\">\\n            <input id=\\\"message\\\" type=\\\"text\\\" placeholder=\\\"Enter a message...\\\" autocomplete=\\\"off\\\">\\n            <button type=\\\"submit\\\">Send</button>\\n        </form>\\n    </div>\\n    <script src=\\\"https://cdn.socket.io/4.1.2/socket.io.min.js\\\"></script>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat-window');\\n        var joinForm = document.getElementById('join-form');\\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message= document.getElementById('message').value;\\n            socket.emit('message', {\\n                username: username,\\n                room: room,\\n                message: message\\n            });\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(message);\\n            messageElement.appendChild(messageText);\\n            statusElement.appendChild(messageElement);\\n        });\\n    </script>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a basic portfolio website using HTML, CSS, and JavaScript. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\",\"script.js\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n    <script src=\\\"script.js\\\"></script>\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form action=\\\"#\\\">\\n                <div>\\n                    <label for=\\\"name\\\">Name:</label>\\n                    <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"email\\\">Email:</label>\\n                    <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"message\\\">Message:</label>\\n                    <textarea id=\\\"message\\\" name=\\\"message\\\"></textarea>\\n                </div>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n    <footer>\\n        <p>&copy; 2023 My Portfolio</p>\\n    </footer>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\n\\nbody {\\n    margin: 0;\\n    font-family: 'Segoe UI', sans-serif;\\n}\\n\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    padding: 1rem;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2rem;\\n}\\n\\nheader nav ul {\\n    list-style-type: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n}\\n\\nheader nav ul li {\\n    margin: 0 1rem;\\n}\\n\\nheader nav ul li a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\nmain {\\n    margin: 2rem;\\n}\\n\\nsection {\\n    margin: 2rem 0;\\n}\\n\\nsection h2 {\\n    margin: 0;\\n}\\n\\nsection p {\\n    margin-top: 1rem;\\n}\\n\\n.project-card {\\n    background-color: #fff;\\n    border: 1px solid #ccc;\\n    padding: 1rem;\\n    border-radius: 0.25rem;\\n    box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.075);\\n    margin-bottom: 2rem;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    max-width: 100%;\\n}\\n\\nfooter {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    height: 3rem;\\n}\\n\\nfooter p {\\n    margin: 0;\\n}\\n\",\"script.js\":\"// Add active class to the current navbar link\\nvar header = document.getElementById(\"navbar\");\\nvar links = header.getElementsByClassName(\"nav-link\");\\nfor (var i = 0; i < links.length; i++) {\\n  links[i].addEventListener(\"click\", function() {\\n    var current = document.getElementsByClassName(\"active\");\\n    current[0].className = current[0].className.replace(\" active\", \"\");\\n    this.className += \" active\";\\n  });\\n}\"}"
}
{
  "text": "Create a basic portfolio website using only HTML and CSS. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=...Project 3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form>\\n                <label for=\\\"name\\\">Name:</label>\\n                <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\" required>\\n                <label for=\\\"email\\\">Email:</label>\\n                <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\" required>\\n                <label for=\\\"message\\\">Message:</label>\\n                <textarea id=\\\"message\\\" name=\\\"message\\\" required></textarea>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\nbody {\\n    font-family: Arial, sans-serif;\\n    margin: 0;\\n    padding: 0;\\n}\\n\\n/* Header styles */\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    padding: 20px;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2em;\\n}\\n\\nheader ul {\\n    list-style: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader li {\\n    margin: 0 10px;\\n}\\n\\nheader a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\n/* Main content styles */\\nmain {\\n    max-width: 800px;\\n    margin: 20px auto;\\n    padding: 0 20px;\\n}\\n\\nsection {\\n    margin-bottom: 50px;\\n}\\n\\nsection h2 {\\n    margin-top: 0;\\n}\\n\\n.project-card {\\n    border: 1px solid #ccc;\\n    border-radius: 5px;\\n    padding: 10px;\\n    margin-bottom: 20px;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    width: 100%;\\n}\\n\\n/* Contact form styles */\\nform {\\n    display: flex;\\n    flex-direction: column;\\n}\\n\\nlabel {\\n    margin-bottom: 10px;\\n}\\n\\ninput, textarea {\\n    margin-bottom: 20px;\\n    padding: 10px;\\n    border-radius: 5px;\\n    border: none;\\n    background-color: #333;\\n    color: #fff;\\n    cursor: pointer;\\n    border-radius: 5px;\\n}\"\n}"
}
{"text": "Create a simple Python project with a main script and a utility script inside a utilities folder. The main script should read a file and count the number of lines. The utility script should contain a function to double the line count.", "file_structure": "{\"main.py\":\"\",\"utilities\":{\"utility.py\":\"\"}}", "code": "{\"main.py\":\"with open('input_file.txt', 'r') as file:\\n    lines = file.readlines()\\n    line_count = len(lines)\\n    print(f'Number of lines: {line_count}')\",\"utilities/utility.py\":\"def double_count(count):\\n    return count * 2\"}"}
{"text": "Create a real-time chat application with Flask-SocketIO. Users should be able to connect to the server and join a chatroom by entering a unique username and a room name. Users should be able to send and receive messages within the chatroom, and the messages should be displayed in real-time.", "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}", "code": "{\"app.py\":\"from flask import Flask, render_template, request, session\\nfrom flask_socketio import SocketIO, emit, join_room, leave_room\\nimport uuid\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret!'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('connect')\\ndef connect():\\n    print('Client connected')\\n\\n@socketio.on('disconnect')\\ndef disconnect():\\n    print('Client disconnected')\\n\\n@socketio.on('join')\\ndef join(data):\\n    username = data['username']\\n    room = data['room']\\n    session['username'] = username\\n    session['room'] = room\\n    join_room(room)\\n    message = f'{username} has joined the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef leave():\\n    username = session['username']\\n    room = session['room']\\n    leave_room(room)\\n    message = f'{username} has left the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef message(data):\\n    username = session['username']\\n    room = session['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app, debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Real-Time Chat Application</title>\\n    <script src='https://cdn.socket.io/4.3.1/socket.io.min.js'></script>\\n</head>\\n<body>\\n    <h1>Real-Time Chat Application</h1>\\n    <div id='status'></div>\\n    <div id='chat'></div>\\n    <form id='join-form'>\\n        <label for='username'>Username:</label>\\n        <input type='text' name='username' id='username'>\\n        <label for='room'>Room:</label>\\n        <input type='text' name='room' id='room'>\\n        <input type='submit' value='Join Room'>\\n    </form>\\n    <form id='message-form'>\\n        <input type='text' name='message' id='message'>\\n        <input type='submit' value='Send'>\\n    </form>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat');\\n        var joinForm =        document.getElementById('join-form');\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message = document.getElementById('message').value;\\n            socket.emit('message', {\\n                message: message\\n            });\\n            document.getElementById('message').value = '';\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = message;\\n            statusElement.appendChild(pElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = username + ': ' + message;\\n            chatElement.appendChild(pElement);\\n        });\\n    </script>\\n</body>\\n</html>\"\n}"}
{
  "text": "Create a Flask application that allows users to upload and download files. The application should have a homepage with a form to upload a file, and a page to download the uploaded files. The uploaded files should be stored in a 'uploads' folder within the application directory.",
  "file_structure": "{\"app.py\":\"\",\"uploads\":\"\"}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, request, send_file\nimport os\n\napp = Flask(__name__)\n\nUPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/upload', methods=['POST'])\ndef upload():\n    file = request.files['file']\n    file.save(os.path.join(app.config['UPLOAD_FOLDER'], file.filename))\n    return 'File uploaded successfully!'\n\n@app.route('/download/<filename>')\ndef download(filename):\n    return send_file(os.path.join(app.config['UPLOAD_FOLDER'], filename), as_attachment=True)\n\nif __name__ == '__main__':\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>File Uploader/Downloader</title>\\n</head>\\n<body>\\n    <h1>File Uploader/Downloader</h1>\\n    <form method='POST' action='/upload' enctype='multipart/form-data'>\\n        <input type='file' name='file'>\\n        <input type='submit' value='Upload'>\\n    </form>\\n    <br>\\n    <h2>Uploaded Files</h2>\\n    <ul>\\n        {% for file in os.listdir(app.config['UPLOAD_FOLDER']) %}\\n        <li><a href='/download/{{ file }}'>{{ file }}</a></li>\\n        {% endfor %}\\n    </ul>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a Flask application that displays a real-time video stream from a webcam. The webpage should update the video stream every second without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, Response, render_template\\nimport cv2\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the video stream\\ndef get_stream():\\n    camera = cv2.VideoCapture(0)\\n    while True:\\n        success, frame = camera.read()\\n        if not success:\\n            break\\n        ret, buffer = cv2.imencode('.jpg', frame)\\n        frame = buffer.tobytes()\\n        yield (b'--frame\\r\\n'\\n               b'Content-Type: image/jpeg\\r\\n\\r\\n' + frame + b'\\r\\n')\\n\\n# Create a Flask route to stream the video\\n@app.route('/stream')\\ndef stream():\\n    return Response(get_stream(), mimetype='multipart/x-mixed-replace; boundary=frame')\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>Real-Time Webcam Stream</title>\\n</head>\\n<body>\\n    <h1>Real-Time Webcam Stream</h1>\\n    <img src=\\\"/stream\\\">\\n</body>\\n</html>\"}"
}
{
  "text": "Create a real-time stock market dashboard using Flask and Plotly. The dashboard should display real-time stock prices and volume for a specified list of stocks, and should update automatically without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"},\"static\":{\"style.css\":\"\",\"plotly-latest.min.js\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, Response\\nimport plotly\\nimport plotly.graph_objs as go\\nimport yfinance as yf\\nimport time\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the stock prices and volume data\\ndef get_stock_data(stock_tickers):\\n    data = []\\n    for ticker in stock_tickers:\\n        stock = yf.Ticker(ticker)\\n        hist = stock.history(period='1d')\\n        stock_data = go.Candlestick(x=hist.index, open=hist['Open'], high=hist['High'], low=hist['Low'], close=hist['Close'], name=ticker)\\n        data.append(stock_data)\\n    return data\\n\\n# Create a Flask route to stream the stock data\\n@app.route('/stream')\\ndef stream_stock_data():\\n    stock_tickers = ['AAPL', 'GOOGL', 'TSLA', 'AMZN']\\n    while True:\\n        stock_data = get_stock_data(stock_tickers)\\n        yield plotly.io.to_json({'data': stock_data, 'layout': {'title': 'Real-Time Stock Market Dashboard'}})\\n        time.sleep(10)\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <link rel=\\\"stylesheet\\\" href=\\\"{{ url_for('static', filename='style.css') }}\\\">\\n    <script src=\\\"{{ url_for('static', filename='plotly-latest.min.js') }}\\\"></script>\\n    <title>Real-Time Stock Market Dashboard</title>\\n</head>\\n<body>\\n    <h1>Real-Time Stock Market Dashboard</h1>\\n    <div id=\\\"chart\\\"></div>\\n    <script>\\n        const chartElement = document.getElementById('chart');\\n        const eventSource = new EventSource('/stream');\\n        eventSource.addEventListener('message', function(event) {\\n            const data = JSON.parse(event.data);\\n            Plotly.newPlot(chartElement, data);\\n        });\\n    </script>\\n</body>\\n</html>\",\"static/style.css\":\"body {\\n    font-family: Arial, Helvetica, sans-serif;\\n}\\n\\nh1 {\\n    text-align: center;\\n}\\n\\n#chart {\\n    margin: 20px auto;\\n    max-width: 100%;\\n    height: 500px;\\n}\"}"
}
{
  "text": "Create a real-time chat application using Flask-SocketIO that allows users to join a chat room and send messages to each other in real-time.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template\\nfrom flask_socketio import SocketIO, join_room, leave_room, emit\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret_key'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('join')\\ndef on_join(data):\\n    username = data['username']\\n    room = data['room']\\n    join_room(room)\\n    message = username + ' has joined the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef on_leave(data):\\n    username = data['username']\\n    room = data['room']\\n    leave_room(room)\\n    message = username + ' has left the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef on_message(data):\\n    username = data['username']\\n    room = data['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Flask-SocketIO Chat</title>\\n</head>\\n<body>\\n    <div id=\\\"chat\\\">\\n        <h1>Flask-SocketIO Chat</h1>\\n        <div id=\\\"status\\\"></div>\\n        <div id=\\\"chat-window\\\"></div>\\n        <form id=\\\"message-form\\\">\\n            <input id=\\\"message\\\" type=\\\"text\\\" placeholder=\\\"Enter a message...\\\" autocomplete=\\\"off\\\">\\n            <button type=\\\"submit\\\">Send</button>\\n        </form>\\n    </div>\\n    <script src=\\\"https://cdn.socket.io/4.1.2/socket.io.min.js\\\"></script>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat-window');\\n        var joinForm = document.getElementById('join-form');\\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message= document.getElementById('message').value;\\n            socket.emit('message', {\\n                username: username,\\n                room: room,\\n                message: message\\n            });\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(message);\\n            messageElement.appendChild(messageText);\\n            statusElement.appendChild(messageElement);\\n        });\\n    </script>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a basic portfolio website using HTML, CSS, and JavaScript. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\",\"script.js\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n    <script src=\\\"script.js\\\"></script>\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form action=\\\"#\\\">\\n                <div>\\n                    <label for=\\\"name\\\">Name:</label>\\n                    <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"email\\\">Email:</label>\\n                    <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"message\\\">Message:</label>\\n                    <textarea id=\\\"message\\\" name=\\\"message\\\"></textarea>\\n                </div>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n    <footer>\\n        <p>&copy; 2023 My Portfolio</p>\\n    </footer>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\n\\nbody {\\n    margin: 0;\\n    font-family: 'Segoe UI', sans-serif;\\n}\\n\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    padding: 1rem;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2rem;\\n}\\n\\nheader nav ul {\\n    list-style-type: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n}\\n\\nheader nav ul li {\\n    margin: 0 1rem;\\n}\\n\\nheader nav ul li a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\nmain {\\n    margin: 2rem;\\n}\\n\\nsection {\\n    margin: 2rem 0;\\n}\\n\\nsection h2 {\\n    margin: 0;\\n}\\n\\nsection p {\\n    margin-top: 1rem;\\n}\\n\\n.project-card {\\n    background-color: #fff;\\n    border: 1px solid #ccc;\\n    padding: 1rem;\\n    border-radius: 0.25rem;\\n    box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.075);\\n    margin-bottom: 2rem;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    max-width: 100%;\\n}\\n\\nfooter {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    height: 3rem;\\n}\\n\\nfooter p {\\n    margin: 0;\\n}\\n\",\"script.js\":\"// Add active class to the current navbar link\\nvar header = document.getElementById(\"navbar\");\\nvar links = header.getElementsByClassName(\"nav-link\");\\nfor (var i = 0; i < links.length; i++) {\\n  links[i].addEventListener(\"click\", function() {\\n    var current = document.getElementsByClassName(\"active\");\\n    current[0].className = current[0].className.replace(\" active\", \"\");\\n    this.className += \" active\";\\n  });\\n}\"}"
}
{
  "text": "Create a basic portfolio website using only HTML and CSS. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=...Project 3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form>\\n                <label for=\\\"name\\\">Name:</label>\\n                <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\" required>\\n                <label for=\\\"email\\\">Email:</label>\\n                <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\" required>\\n                <label for=\\\"message\\\">Message:</label>\\n                <textarea id=\\\"message\\\" name=\\\"message\\\" required></textarea>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\nbody {\\n    font-family: Arial, sans-serif;\\n    margin: 0;\\n    padding: 0;\\n}\\n\\n/* Header styles */\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    padding: 20px;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2em;\\n}\\n\\nheader ul {\\n    list-style: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader li {\\n    margin: 0 10px;\\n}\\n\\nheader a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\n/* Main content styles */\\nmain {\\n    max-width: 800px;\\n    margin: 20px auto;\\n    padding: 0 20px;\\n}\\n\\nsection {\\n    margin-bottom: 50px;\\n}\\n\\nsection h2 {\\n    margin-top: 0;\\n}\\n\\n.project-card {\\n    border: 1px solid #ccc;\\n    border-radius: 5px;\\n    padding: 10px;\\n    margin-bottom: 20px;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    width: 100%;\\n}\\n\\n/* Contact form styles */\\nform {\\n    display: flex;\\n    flex-direction: column;\\n}\\n\\nlabel {\\n    margin-bottom: 10px;\\n}\\n\\ninput, textarea {\\n    margin-bottom: 20px;\\n    padding: 10px;\\n    border-radius: 5px;\\n    border: none;\\n    background-color: #333;\\n    color: #fff;\\n    cursor: pointer;\\n    border-radius: 5px;\\n}\"\n}"
}
{"text": "Create a simple Python project with a main script and a utility script inside a utilities folder. The main script should read a file and count the number of lines. The utility script should contain a function to double the line count.", "file_structure": "{\"main.py\":\"\",\"utilities\":{\"utility.py\":\"\"}}", "code": "{\"main.py\":\"with open('input_file.txt', 'r') as file:\\n    lines = file.readlines()\\n    line_count = len(lines)\\n    print(f'Number of lines: {line_count}')\",\"utilities/utility.py\":\"def double_count(count):\\n    return count * 2\"}"}
{"text": "Create a real-time chat application with Flask-SocketIO. Users should be able to connect to the server and join a chatroom by entering a unique username and a room name. Users should be able to send and receive messages within the chatroom, and the messages should be displayed in real-time.", "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}", "code": "{\"app.py\":\"from flask import Flask, render_template, request, session\\nfrom flask_socketio import SocketIO, emit, join_room, leave_room\\nimport uuid\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret!'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('connect')\\ndef connect():\\n    print('Client connected')\\n\\n@socketio.on('disconnect')\\ndef disconnect():\\n    print('Client disconnected')\\n\\n@socketio.on('join')\\ndef join(data):\\n    username = data['username']\\n    room = data['room']\\n    session['username'] = username\\n    session['room'] = room\\n    join_room(room)\\n    message = f'{username} has joined the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef leave():\\n    username = session['username']\\n    room = session['room']\\n    leave_room(room)\\n    message = f'{username} has left the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef message(data):\\n    username = session['username']\\n    room = session['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app, debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Real-Time Chat Application</title>\\n    <script src='https://cdn.socket.io/4.3.1/socket.io.min.js'></script>\\n</head>\\n<body>\\n    <h1>Real-Time Chat Application</h1>\\n    <div id='status'></div>\\n    <div id='chat'></div>\\n    <form id='join-form'>\\n        <label for='username'>Username:</label>\\n        <input type='text' name='username' id='username'>\\n        <label for='room'>Room:</label>\\n        <input type='text' name='room' id='room'>\\n        <input type='submit' value='Join Room'>\\n    </form>\\n    <form id='message-form'>\\n        <input type='text' name='message' id='message'>\\n        <input type='submit' value='Send'>\\n    </form>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat');\\n        var joinForm =        document.getElementById('join-form');\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message = document.getElementById('message').value;\\n            socket.emit('message', {\\n                message: message\\n            });\\n            document.getElementById('message').value = '';\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = message;\\n            statusElement.appendChild(pElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = username + ': ' + message;\\n            chatElement.appendChild(pElement);\\n        });\\n    </script>\\n</body>\\n</html>\"\n}"}
{
  "text": "Create a Flask application that allows users to upload and download files. The application should have a homepage with a form to upload a file, and a page to download the uploaded files. The uploaded files should be stored in a 'uploads' folder within the application directory.",
  "file_structure": "{\"app.py\":\"\",\"uploads\":\"\"}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, request, send_file\nimport os\n\napp = Flask(__name__)\n\nUPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/upload', methods=['POST'])\ndef upload():\n    file = request.files['file']\n    file.save(os.path.join(app.config['UPLOAD_FOLDER'], file.filename))\n    return 'File uploaded successfully!'\n\n@app.route('/download/<filename>')\ndef download(filename):\n    return send_file(os.path.join(app.config['UPLOAD_FOLDER'], filename), as_attachment=True)\n\nif __name__ == '__main__':\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>File Uploader/Downloader</title>\\n</head>\\n<body>\\n    <h1>File Uploader/Downloader</h1>\\n    <form method='POST' action='/upload' enctype='multipart/form-data'>\\n        <input type='file' name='file'>\\n        <input type='submit' value='Upload'>\\n    </form>\\n    <br>\\n    <h2>Uploaded Files</h2>\\n    <ul>\\n        {% for file in os.listdir(app.config['UPLOAD_FOLDER']) %}\\n        <li><a href='/download/{{ file }}'>{{ file }}</a></li>\\n        {% endfor %}\\n    </ul>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a Flask application that displays a real-time video stream from a webcam. The webpage should update the video stream every second without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, Response, render_template\\nimport cv2\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the video stream\\ndef get_stream():\\n    camera = cv2.VideoCapture(0)\\n    while True:\\n        success, frame = camera.read()\\n        if not success:\\n            break\\n        ret, buffer = cv2.imencode('.jpg', frame)\\n        frame = buffer.tobytes()\\n        yield (b'--frame\\r\\n'\\n               b'Content-Type: image/jpeg\\r\\n\\r\\n' + frame + b'\\r\\n')\\n\\n# Create a Flask route to stream the video\\n@app.route('/stream')\\ndef stream():\\n    return Response(get_stream(), mimetype='multipart/x-mixed-replace; boundary=frame')\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>Real-Time Webcam Stream</title>\\n</head>\\n<body>\\n    <h1>Real-Time Webcam Stream</h1>\\n    <img src=\\\"/stream\\\">\\n</body>\\n</html>\"}"
}
{
  "text": "Create a real-time stock market dashboard using Flask and Plotly. The dashboard should display real-time stock prices and volume for a specified list of stocks, and should update automatically without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"},\"static\":{\"style.css\":\"\",\"plotly-latest.min.js\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, Response\\nimport plotly\\nimport plotly.graph_objs as go\\nimport yfinance as yf\\nimport time\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the stock prices and volume data\\ndef get_stock_data(stock_tickers):\\n    data = []\\n    for ticker in stock_tickers:\\n        stock = yf.Ticker(ticker)\\n        hist = stock.history(period='1d')\\n        stock_data = go.Candlestick(x=hist.index, open=hist['Open'], high=hist['High'], low=hist['Low'], close=hist['Close'], name=ticker)\\n        data.append(stock_data)\\n    return data\\n\\n# Create a Flask route to stream the stock data\\n@app.route('/stream')\\ndef stream_stock_data():\\n    stock_tickers = ['AAPL', 'GOOGL', 'TSLA', 'AMZN']\\n    while True:\\n        stock_data = get_stock_data(stock_tickers)\\n        yield plotly.io.to_json({'data': stock_data, 'layout': {'title': 'Real-Time Stock Market Dashboard'}})\\n        time.sleep(10)\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <link rel=\\\"stylesheet\\\" href=\\\"{{ url_for('static', filename='style.css') }}\\\">\\n    <script src=\\\"{{ url_for('static', filename='plotly-latest.min.js') }}\\\"></script>\\n    <title>Real-Time Stock Market Dashboard</title>\\n</head>\\n<body>\\n    <h1>Real-Time Stock Market Dashboard</h1>\\n    <div id=\\\"chart\\\"></div>\\n    <script>\\n        const chartElement = document.getElementById('chart');\\n        const eventSource = new EventSource('/stream');\\n        eventSource.addEventListener('message', function(event) {\\n            const data = JSON.parse(event.data);\\n            Plotly.newPlot(chartElement, data);\\n        });\\n    </script>\\n</body>\\n</html>\",\"static/style.css\":\"body {\\n    font-family: Arial, Helvetica, sans-serif;\\n}\\n\\nh1 {\\n    text-align: center;\\n}\\n\\n#chart {\\n    margin: 20px auto;\\n    max-width: 100%;\\n    height: 500px;\\n}\"}"
}
{
  "text": "Create a real-time chat application using Flask-SocketIO that allows users to join a chat room and send messages to each other in real-time.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template\\nfrom flask_socketio import SocketIO, join_room, leave_room, emit\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret_key'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('join')\\ndef on_join(data):\\n    username = data['username']\\n    room = data['room']\\n    join_room(room)\\n    message = username + ' has joined the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef on_leave(data):\\n    username = data['username']\\n    room = data['room']\\n    leave_room(room)\\n    message = username + ' has left the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef on_message(data):\\n    username = data['username']\\n    room = data['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Flask-SocketIO Chat</title>\\n</head>\\n<body>\\n    <div id=\\\"chat\\\">\\n        <h1>Flask-SocketIO Chat</h1>\\n        <div id=\\\"status\\\"></div>\\n        <div id=\\\"chat-window\\\"></div>\\n        <form id=\\\"message-form\\\">\\n            <input id=\\\"message\\\" type=\\\"text\\\" placeholder=\\\"Enter a message...\\\" autocomplete=\\\"off\\\">\\n            <button type=\\\"submit\\\">Send</button>\\n        </form>\\n    </div>\\n    <script src=\\\"https://cdn.socket.io/4.1.2/socket.io.min.js\\\"></script>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat-window');\\n        var joinForm = document.getElementById('join-form');\\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message= document.getElementById('message').value;\\n            socket.emit('message', {\\n                username: username,\\n                room: room,\\n                message: message\\n            });\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(message);\\n            messageElement.appendChild(messageText);\\n            statusElement.appendChild(messageElement);\\n        });\\n    </script>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a basic portfolio website using HTML, CSS, and JavaScript. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\",\"script.js\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n    <script src=\\\"script.js\\\"></script>\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form action=\\\"#\\\">\\n                <div>\\n                    <label for=\\\"name\\\">Name:</label>\\n                    <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"email\\\">Email:</label>\\n                    <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"message\\\">Message:</label>\\n                    <textarea id=\\\"message\\\" name=\\\"message\\\"></textarea>\\n                </div>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n    <footer>\\n        <p>&copy; 2023 My Portfolio</p>\\n    </footer>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\n\\nbody {\\n    margin: 0;\\n    font-family: 'Segoe UI', sans-serif;\\n}\\n\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    padding: 1rem;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2rem;\\n}\\n\\nheader nav ul {\\n    list-style-type: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n}\\n\\nheader nav ul li {\\n    margin: 0 1rem;\\n}\\n\\nheader nav ul li a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\nmain {\\n    margin: 2rem;\\n}\\n\\nsection {\\n    margin: 2rem 0;\\n}\\n\\nsection h2 {\\n    margin: 0;\\n}\\n\\nsection p {\\n    margin-top: 1rem;\\n}\\n\\n.project-card {\\n    background-color: #fff;\\n    border: 1px solid #ccc;\\n    padding: 1rem;\\n    border-radius: 0.25rem;\\n    box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.075);\\n    margin-bottom: 2rem;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    max-width: 100%;\\n}\\n\\nfooter {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    height: 3rem;\\n}\\n\\nfooter p {\\n    margin: 0;\\n}\\n\",\"script.js\":\"// Add active class to the current navbar link\\nvar header = document.getElementById(\"navbar\");\\nvar links = header.getElementsByClassName(\"nav-link\");\\nfor (var i = 0; i < links.length; i++) {\\n  links[i].addEventListener(\"click\", function() {\\n    var current = document.getElementsByClassName(\"active\");\\n    current[0].className = current[0].className.replace(\" active\", \"\");\\n    this.className += \" active\";\\n  });\\n}\"}"
}
{
  "text": "Create a basic portfolio website using only HTML and CSS. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=...Project 3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form>\\n                <label for=\\\"name\\\">Name:</label>\\n                <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\" required>\\n                <label for=\\\"email\\\">Email:</label>\\n                <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\" required>\\n                <label for=\\\"message\\\">Message:</label>\\n                <textarea id=\\\"message\\\" name=\\\"message\\\" required></textarea>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\nbody {\\n    font-family: Arial, sans-serif;\\n    margin: 0;\\n    padding: 0;\\n}\\n\\n/* Header styles */\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    padding: 20px;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2em;\\n}\\n\\nheader ul {\\n    list-style: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader li {\\n    margin: 0 10px;\\n}\\n\\nheader a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\n/* Main content styles */\\nmain {\\n    max-width: 800px;\\n    margin: 20px auto;\\n    padding: 0 20px;\\n}\\n\\nsection {\\n    margin-bottom: 50px;\\n}\\n\\nsection h2 {\\n    margin-top: 0;\\n}\\n\\n.project-card {\\n    border: 1px solid #ccc;\\n    border-radius: 5px;\\n    padding: 10px;\\n    margin-bottom: 20px;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    width: 100%;\\n}\\n\\n/* Contact form styles */\\nform {\\n    display: flex;\\n    flex-direction: column;\\n}\\n\\nlabel {\\n    margin-bottom: 10px;\\n}\\n\\ninput, textarea {\\n    margin-bottom: 20px;\\n    padding: 10px;\\n    border-radius: 5px;\\n    border: none;\\n    background-color: #333;\\n    color: #fff;\\n    cursor: pointer;\\n    border-radius: 5px;\\n}\"\n}"
}
{"text": "Create a simple Python project with a main script and a utility script inside a utilities folder. The main script should read a file and count the number of lines. The utility script should contain a function to double the line count.", "file_structure": "{\"main.py\":\"\",\"utilities\":{\"utility.py\":\"\"}}", "code": "{\"main.py\":\"with open('input_file.txt', 'r') as file:\\n    lines = file.readlines()\\n    line_count = len(lines)\\n    print(f'Number of lines: {line_count}')\",\"utilities/utility.py\":\"def double_count(count):\\n    return count * 2\"}"}
{"text": "Create a real-time chat application with Flask-SocketIO. Users should be able to connect to the server and join a chatroom by entering a unique username and a room name. Users should be able to send and receive messages within the chatroom, and the messages should be displayed in real-time.", "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}", "code": "{\"app.py\":\"from flask import Flask, render_template, request, session\\nfrom flask_socketio import SocketIO, emit, join_room, leave_room\\nimport uuid\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret!'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('connect')\\ndef connect():\\n    print('Client connected')\\n\\n@socketio.on('disconnect')\\ndef disconnect():\\n    print('Client disconnected')\\n\\n@socketio.on('join')\\ndef join(data):\\n    username = data['username']\\n    room = data['room']\\n    session['username'] = username\\n    session['room'] = room\\n    join_room(room)\\n    message = f'{username} has joined the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef leave():\\n    username = session['username']\\n    room = session['room']\\n    leave_room(room)\\n    message = f'{username} has left the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef message(data):\\n    username = session['username']\\n    room = session['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app, debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Real-Time Chat Application</title>\\n    <script src='https://cdn.socket.io/4.3.1/socket.io.min.js'></script>\\n</head>\\n<body>\\n    <h1>Real-Time Chat Application</h1>\\n    <div id='status'></div>\\n    <div id='chat'></div>\\n    <form id='join-form'>\\n        <label for='username'>Username:</label>\\n        <input type='text' name='username' id='username'>\\n        <label for='room'>Room:</label>\\n        <input type='text' name='room' id='room'>\\n        <input type='submit' value='Join Room'>\\n    </form>\\n    <form id='message-form'>\\n        <input type='text' name='message' id='message'>\\n        <input type='submit' value='Send'>\\n    </form>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat');\\n        var joinForm =        document.getElementById('join-form');\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message = document.getElementById('message').value;\\n            socket.emit('message', {\\n                message: message\\n            });\\n            document.getElementById('message').value = '';\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = message;\\n            statusElement.appendChild(pElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = username + ': ' + message;\\n            chatElement.appendChild(pElement);\\n        });\\n    </script>\\n</body>\\n</html>\"\n}"}
{
  "text": "Create a Flask application that allows users to upload and download files. The application should have a homepage with a form to upload a file, and a page to download the uploaded files. The uploaded files should be stored in a 'uploads' folder within the application directory.",
  "file_structure": "{\"app.py\":\"\",\"uploads\":\"\"}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, request, send_file\nimport os\n\napp = Flask(__name__)\n\nUPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/upload', methods=['POST'])\ndef upload():\n    file = request.files['file']\n    file.save(os.path.join(app.config['UPLOAD_FOLDER'], file.filename))\n    return 'File uploaded successfully!'\n\n@app.route('/download/<filename>')\ndef download(filename):\n    return send_file(os.path.join(app.config['UPLOAD_FOLDER'], filename), as_attachment=True)\n\nif __name__ == '__main__':\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>File Uploader/Downloader</title>\\n</head>\\n<body>\\n    <h1>File Uploader/Downloader</h1>\\n    <form method='POST' action='/upload' enctype='multipart/form-data'>\\n        <input type='file' name='file'>\\n        <input type='submit' value='Upload'>\\n    </form>\\n    <br>\\n    <h2>Uploaded Files</h2>\\n    <ul>\\n        {% for file in os.listdir(app.config['UPLOAD_FOLDER']) %}\\n        <li><a href='/download/{{ file }}'>{{ file }}</a></li>\\n        {% endfor %}\\n    </ul>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a Flask application that displays a real-time video stream from a webcam. The webpage should update the video stream every second without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, Response, render_template\\nimport cv2\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the video stream\\ndef get_stream():\\n    camera = cv2.VideoCapture(0)\\n    while True:\\n        success, frame = camera.read()\\n        if not success:\\n            break\\n        ret, buffer = cv2.imencode('.jpg', frame)\\n        frame = buffer.tobytes()\\n        yield (b'--frame\\r\\n'\\n               b'Content-Type: image/jpeg\\r\\n\\r\\n' + frame + b'\\r\\n')\\n\\n# Create a Flask route to stream the video\\n@app.route('/stream')\\ndef stream():\\n    return Response(get_stream(), mimetype='multipart/x-mixed-replace; boundary=frame')\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>Real-Time Webcam Stream</title>\\n</head>\\n<body>\\n    <h1>Real-Time Webcam Stream</h1>\\n    <img src=\\\"/stream\\\">\\n</body>\\n</html>\"}"
}
{
  "text": "Create a real-time stock market dashboard using Flask and Plotly. The dashboard should display real-time stock prices and volume for a specified list of stocks, and should update automatically without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"},\"static\":{\"style.css\":\"\",\"plotly-latest.min.js\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, Response\\nimport plotly\\nimport plotly.graph_objs as go\\nimport yfinance as yf\\nimport time\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the stock prices and volume data\\ndef get_stock_data(stock_tickers):\\n    data = []\\n    for ticker in stock_tickers:\\n        stock = yf.Ticker(ticker)\\n        hist = stock.history(period='1d')\\n        stock_data = go.Candlestick(x=hist.index, open=hist['Open'], high=hist['High'], low=hist['Low'], close=hist['Close'], name=ticker)\\n        data.append(stock_data)\\n    return data\\n\\n# Create a Flask route to stream the stock data\\n@app.route('/stream')\\ndef stream_stock_data():\\n    stock_tickers = ['AAPL', 'GOOGL', 'TSLA', 'AMZN']\\n    while True:\\n        stock_data = get_stock_data(stock_tickers)\\n        yield plotly.io.to_json({'data': stock_data, 'layout': {'title': 'Real-Time Stock Market Dashboard'}})\\n        time.sleep(10)\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <link rel=\\\"stylesheet\\\" href=\\\"{{ url_for('static', filename='style.css') }}\\\">\\n    <script src=\\\"{{ url_for('static', filename='plotly-latest.min.js') }}\\\"></script>\\n    <title>Real-Time Stock Market Dashboard</title>\\n</head>\\n<body>\\n    <h1>Real-Time Stock Market Dashboard</h1>\\n    <div id=\\\"chart\\\"></div>\\n    <script>\\n        const chartElement = document.getElementById('chart');\\n        const eventSource = new EventSource('/stream');\\n        eventSource.addEventListener('message', function(event) {\\n            const data = JSON.parse(event.data);\\n            Plotly.newPlot(chartElement, data);\\n        });\\n    </script>\\n</body>\\n</html>\",\"static/style.css\":\"body {\\n    font-family: Arial, Helvetica, sans-serif;\\n}\\n\\nh1 {\\n    text-align: center;\\n}\\n\\n#chart {\\n    margin: 20px auto;\\n    max-width: 100%;\\n    height: 500px;\\n}\"}"
}
{
  "text": "Create a real-time chat application using Flask-SocketIO that allows users to join a chat room and send messages to each other in real-time.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template\\nfrom flask_socketio import SocketIO, join_room, leave_room, emit\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret_key'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('join')\\ndef on_join(data):\\n    username = data['username']\\n    room = data['room']\\n    join_room(room)\\n    message = username + ' has joined the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef on_leave(data):\\n    username = data['username']\\n    room = data['room']\\n    leave_room(room)\\n    message = username + ' has left the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef on_message(data):\\n    username = data['username']\\n    room = data['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Flask-SocketIO Chat</title>\\n</head>\\n<body>\\n    <div id=\\\"chat\\\">\\n        <h1>Flask-SocketIO Chat</h1>\\n        <div id=\\\"status\\\"></div>\\n        <div id=\\\"chat-window\\\"></div>\\n        <form id=\\\"message-form\\\">\\n            <input id=\\\"message\\\" type=\\\"text\\\" placeholder=\\\"Enter a message...\\\" autocomplete=\\\"off\\\">\\n            <button type=\\\"submit\\\">Send</button>\\n        </form>\\n    </div>\\n    <script src=\\\"https://cdn.socket.io/4.1.2/socket.io.min.js\\\"></script>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat-window');\\n        var joinForm = document.getElementById('join-form');\\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message= document.getElementById('message').value;\\n            socket.emit('message', {\\n                username: username,\\n                room: room,\\n                message: message\\n            });\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(message);\\n            messageElement.appendChild(messageText);\\n            statusElement.appendChild(messageElement);\\n        });\\n    </script>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a basic portfolio website using HTML, CSS, and JavaScript. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\",\"script.js\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n    <script src=\\\"script.js\\\"></script>\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form action=\\\"#\\\">\\n                <div>\\n                    <label for=\\\"name\\\">Name:</label>\\n                    <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"email\\\">Email:</label>\\n                    <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"message\\\">Message:</label>\\n                    <textarea id=\\\"message\\\" name=\\\"message\\\"></textarea>\\n                </div>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n    <footer>\\n        <p>&copy; 2023 My Portfolio</p>\\n    </footer>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\n\\nbody {\\n    margin: 0;\\n    font-family: 'Segoe UI', sans-serif;\\n}\\n\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    padding: 1rem;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2rem;\\n}\\n\\nheader nav ul {\\n    list-style-type: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n}\\n\\nheader nav ul li {\\n    margin: 0 1rem;\\n}\\n\\nheader nav ul li a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\nmain {\\n    margin: 2rem;\\n}\\n\\nsection {\\n    margin: 2rem 0;\\n}\\n\\nsection h2 {\\n    margin: 0;\\n}\\n\\nsection p {\\n    margin-top: 1rem;\\n}\\n\\n.project-card {\\n    background-color: #fff;\\n    border: 1px solid #ccc;\\n    padding: 1rem;\\n    border-radius: 0.25rem;\\n    box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.075);\\n    margin-bottom: 2rem;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    max-width: 100%;\\n}\\n\\nfooter {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    height: 3rem;\\n}\\n\\nfooter p {\\n    margin: 0;\\n}\\n\",\"script.js\":\"// Add active class to the current navbar link\\nvar header = document.getElementById(\"navbar\");\\nvar links = header.getElementsByClassName(\"nav-link\");\\nfor (var i = 0; i < links.length; i++) {\\n  links[i].addEventListener(\"click\", function() {\\n    var current = document.getElementsByClassName(\"active\");\\n    current[0].className = current[0].className.replace(\" active\", \"\");\\n    this.className += \" active\";\\n  });\\n}\"}"
}
{
  "text": "Create a basic portfolio website using only HTML and CSS. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=...Project 3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form>\\n                <label for=\\\"name\\\">Name:</label>\\n                <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\" required>\\n                <label for=\\\"email\\\">Email:</label>\\n                <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\" required>\\n                <label for=\\\"message\\\">Message:</label>\\n                <textarea id=\\\"message\\\" name=\\\"message\\\" required></textarea>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\nbody {\\n    font-family: Arial, sans-serif;\\n    margin: 0;\\n    padding: 0;\\n}\\n\\n/* Header styles */\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    padding: 20px;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2em;\\n}\\n\\nheader ul {\\n    list-style: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader li {\\n    margin: 0 10px;\\n}\\n\\nheader a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\n/* Main content styles */\\nmain {\\n    max-width: 800px;\\n    margin: 20px auto;\\n    padding: 0 20px;\\n}\\n\\nsection {\\n    margin-bottom: 50px;\\n}\\n\\nsection h2 {\\n    margin-top: 0;\\n}\\n\\n.project-card {\\n    border: 1px solid #ccc;\\n    border-radius: 5px;\\n    padding: 10px;\\n    margin-bottom: 20px;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    width: 100%;\\n}\\n\\n/* Contact form styles */\\nform {\\n    display: flex;\\n    flex-direction: column;\\n}\\n\\nlabel {\\n    margin-bottom: 10px;\\n}\\n\\ninput, textarea {\\n    margin-bottom: 20px;\\n    padding: 10px;\\n    border-radius: 5px;\\n    border: none;\\n    background-color: #333;\\n    color: #fff;\\n    cursor: pointer;\\n    border-radius: 5px;\\n}\"\n}"
}
{"text": "Create a simple Python project with a main script and a utility script inside a utilities folder. The main script should read a file and count the number of lines. The utility script should contain a function to double the line count.", "file_structure": "{\"main.py\":\"\",\"utilities\":{\"utility.py\":\"\"}}", "code": "{\"main.py\":\"with open('input_file.txt', 'r') as file:\\n    lines = file.readlines()\\n    line_count = len(lines)\\n    print(f'Number of lines: {line_count}')\",\"utilities/utility.py\":\"def double_count(count):\\n    return count * 2\"}"}
{"text": "Create a real-time chat application with Flask-SocketIO. Users should be able to connect to the server and join a chatroom by entering a unique username and a room name. Users should be able to send and receive messages within the chatroom, and the messages should be displayed in real-time.", "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}", "code": "{\"app.py\":\"from flask import Flask, render_template, request, session\\nfrom flask_socketio import SocketIO, emit, join_room, leave_room\\nimport uuid\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret!'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('connect')\\ndef connect():\\n    print('Client connected')\\n\\n@socketio.on('disconnect')\\ndef disconnect():\\n    print('Client disconnected')\\n\\n@socketio.on('join')\\ndef join(data):\\n    username = data['username']\\n    room = data['room']\\n    session['username'] = username\\n    session['room'] = room\\n    join_room(room)\\n    message = f'{username} has joined the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef leave():\\n    username = session['username']\\n    room = session['room']\\n    leave_room(room)\\n    message = f'{username} has left the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef message(data):\\n    username = session['username']\\n    room = session['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app, debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Real-Time Chat Application</title>\\n    <script src='https://cdn.socket.io/4.3.1/socket.io.min.js'></script>\\n</head>\\n<body>\\n    <h1>Real-Time Chat Application</h1>\\n    <div id='status'></div>\\n    <div id='chat'></div>\\n    <form id='join-form'>\\n        <label for='username'>Username:</label>\\n        <input type='text' name='username' id='username'>\\n        <label for='room'>Room:</label>\\n        <input type='text' name='room' id='room'>\\n        <input type='submit' value='Join Room'>\\n    </form>\\n    <form id='message-form'>\\n        <input type='text' name='message' id='message'>\\n        <input type='submit' value='Send'>\\n    </form>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat');\\n        var joinForm =        document.getElementById('join-form');\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message = document.getElementById('message').value;\\n            socket.emit('message', {\\n                message: message\\n            });\\n            document.getElementById('message').value = '';\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = message;\\n            statusElement.appendChild(pElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = username + ': ' + message;\\n            chatElement.appendChild(pElement);\\n        });\\n    </script>\\n</body>\\n</html>\"\n}"}
{
  "text": "Create a Flask application that allows users to upload and download files. The application should have a homepage with a form to upload a file, and a page to download the uploaded files. The uploaded files should be stored in a 'uploads' folder within the application directory.",
  "file_structure": "{\"app.py\":\"\",\"uploads\":\"\"}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, request, send_file\nimport os\n\napp = Flask(__name__)\n\nUPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/upload', methods=['POST'])\ndef upload():\n    file = request.files['file']\n    file.save(os.path.join(app.config['UPLOAD_FOLDER'], file.filename))\n    return 'File uploaded successfully!'\n\n@app.route('/download/<filename>')\ndef download(filename):\n    return send_file(os.path.join(app.config['UPLOAD_FOLDER'], filename), as_attachment=True)\n\nif __name__ == '__main__':\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>File Uploader/Downloader</title>\\n</head>\\n<body>\\n    <h1>File Uploader/Downloader</h1>\\n    <form method='POST' action='/upload' enctype='multipart/form-data'>\\n        <input type='file' name='file'>\\n        <input type='submit' value='Upload'>\\n    </form>\\n    <br>\\n    <h2>Uploaded Files</h2>\\n    <ul>\\n        {% for file in os.listdir(app.config['UPLOAD_FOLDER']) %}\\n        <li><a href='/download/{{ file }}'>{{ file }}</a></li>\\n        {% endfor %}\\n    </ul>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a Flask application that displays a real-time video stream from a webcam. The webpage should update the video stream every second without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, Response, render_template\\nimport cv2\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the video stream\\ndef get_stream():\\n    camera = cv2.VideoCapture(0)\\n    while True:\\n        success, frame = camera.read()\\n        if not success:\\n            break\\n        ret, buffer = cv2.imencode('.jpg', frame)\\n        frame = buffer.tobytes()\\n        yield (b'--frame\\r\\n'\\n               b'Content-Type: image/jpeg\\r\\n\\r\\n' + frame + b'\\r\\n')\\n\\n# Create a Flask route to stream the video\\n@app.route('/stream')\\ndef stream():\\n    return Response(get_stream(), mimetype='multipart/x-mixed-replace; boundary=frame')\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>Real-Time Webcam Stream</title>\\n</head>\\n<body>\\n    <h1>Real-Time Webcam Stream</h1>\\n    <img src=\\\"/stream\\\">\\n</body>\\n</html>\"}"
}
{
  "text": "Create a real-time stock market dashboard using Flask and Plotly. The dashboard should display real-time stock prices and volume for a specified list of stocks, and should update automatically without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"},\"static\":{\"style.css\":\"\",\"plotly-latest.min.js\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, Response\\nimport plotly\\nimport plotly.graph_objs as go\\nimport yfinance as yf\\nimport time\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the stock prices and volume data\\ndef get_stock_data(stock_tickers):\\n    data = []\\n    for ticker in stock_tickers:\\n        stock = yf.Ticker(ticker)\\n        hist = stock.history(period='1d')\\n        stock_data = go.Candlestick(x=hist.index, open=hist['Open'], high=hist['High'], low=hist['Low'], close=hist['Close'], name=ticker)\\n        data.append(stock_data)\\n    return data\\n\\n# Create a Flask route to stream the stock data\\n@app.route('/stream')\\ndef stream_stock_data():\\n    stock_tickers = ['AAPL', 'GOOGL', 'TSLA', 'AMZN']\\n    while True:\\n        stock_data = get_stock_data(stock_tickers)\\n        yield plotly.io.to_json({'data': stock_data, 'layout': {'title': 'Real-Time Stock Market Dashboard'}})\\n        time.sleep(10)\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <link rel=\\\"stylesheet\\\" href=\\\"{{ url_for('static', filename='style.css') }}\\\">\\n    <script src=\\\"{{ url_for('static', filename='plotly-latest.min.js') }}\\\"></script>\\n    <title>Real-Time Stock Market Dashboard</title>\\n</head>\\n<body>\\n    <h1>Real-Time Stock Market Dashboard</h1>\\n    <div id=\\\"chart\\\"></div>\\n    <script>\\n        const chartElement = document.getElementById('chart');\\n        const eventSource = new EventSource('/stream');\\n        eventSource.addEventListener('message', function(event) {\\n            const data = JSON.parse(event.data);\\n            Plotly.newPlot(chartElement, data);\\n        });\\n    </script>\\n</body>\\n</html>\",\"static/style.css\":\"body {\\n    font-family: Arial, Helvetica, sans-serif;\\n}\\n\\nh1 {\\n    text-align: center;\\n}\\n\\n#chart {\\n    margin: 20px auto;\\n    max-width: 100%;\\n    height: 500px;\\n}\"}"
}
{
  "text": "Create a real-time chat application using Flask-SocketIO that allows users to join a chat room and send messages to each other in real-time.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template\\nfrom flask_socketio import SocketIO, join_room, leave_room, emit\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret_key'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('join')\\ndef on_join(data):\\n    username = data['username']\\n    room = data['room']\\n    join_room(room)\\n    message = username + ' has joined the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef on_leave(data):\\n    username = data['username']\\n    room = data['room']\\n    leave_room(room)\\n    message = username + ' has left the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef on_message(data):\\n    username = data['username']\\n    room = data['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Flask-SocketIO Chat</title>\\n</head>\\n<body>\\n    <div id=\\\"chat\\\">\\n        <h1>Flask-SocketIO Chat</h1>\\n        <div id=\\\"status\\\"></div>\\n        <div id=\\\"chat-window\\\"></div>\\n        <form id=\\\"message-form\\\">\\n            <input id=\\\"message\\\" type=\\\"text\\\" placeholder=\\\"Enter a message...\\\" autocomplete=\\\"off\\\">\\n            <button type=\\\"submit\\\">Send</button>\\n        </form>\\n    </div>\\n    <script src=\\\"https://cdn.socket.io/4.1.2/socket.io.min.js\\\"></script>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat-window');\\n        var joinForm = document.getElementById('join-form');\\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message= document.getElementById('message').value;\\n            socket.emit('message', {\\n                username: username,\\n                room: room,\\n                message: message\\n            });\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(message);\\n            messageElement.appendChild(messageText);\\n            statusElement.appendChild(messageElement);\\n        });\\n    </script>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a basic portfolio website using HTML, CSS, and JavaScript. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\",\"script.js\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n    <script src=\\\"script.js\\\"></script>\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form action=\\\"#\\\">\\n                <div>\\n                    <label for=\\\"name\\\">Name:</label>\\n                    <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"email\\\">Email:</label>\\n                    <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"message\\\">Message:</label>\\n                    <textarea id=\\\"message\\\" name=\\\"message\\\"></textarea>\\n                </div>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n    <footer>\\n        <p>&copy; 2023 My Portfolio</p>\\n    </footer>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\n\\nbody {\\n    margin: 0;\\n    font-family: 'Segoe UI', sans-serif;\\n}\\n\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    padding: 1rem;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2rem;\\n}\\n\\nheader nav ul {\\n    list-style-type: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n}\\n\\nheader nav ul li {\\n    margin: 0 1rem;\\n}\\n\\nheader nav ul li a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\nmain {\\n    margin: 2rem;\\n}\\n\\nsection {\\n    margin: 2rem 0;\\n}\\n\\nsection h2 {\\n    margin: 0;\\n}\\n\\nsection p {\\n    margin-top: 1rem;\\n}\\n\\n.project-card {\\n    background-color: #fff;\\n    border: 1px solid #ccc;\\n    padding: 1rem;\\n    border-radius: 0.25rem;\\n    box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.075);\\n    margin-bottom: 2rem;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    max-width: 100%;\\n}\\n\\nfooter {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    height: 3rem;\\n}\\n\\nfooter p {\\n    margin: 0;\\n}\\n\",\"script.js\":\"// Add active class to the current navbar link\\nvar header = document.getElementById(\"navbar\");\\nvar links = header.getElementsByClassName(\"nav-link\");\\nfor (var i = 0; i < links.length; i++) {\\n  links[i].addEventListener(\"click\", function() {\\n    var current = document.getElementsByClassName(\"active\");\\n    current[0].className = current[0].className.replace(\" active\", \"\");\\n    this.className += \" active\";\\n  });\\n}\"}"
}
{
  "text": "Create a basic portfolio website using only HTML and CSS. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=...Project 3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form>\\n                <label for=\\\"name\\\">Name:</label>\\n                <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\" required>\\n                <label for=\\\"email\\\">Email:</label>\\n                <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\" required>\\n                <label for=\\\"message\\\">Message:</label>\\n                <textarea id=\\\"message\\\" name=\\\"message\\\" required></textarea>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\nbody {\\n    font-family: Arial, sans-serif;\\n    margin: 0;\\n    padding: 0;\\n}\\n\\n/* Header styles */\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    padding: 20px;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2em;\\n}\\n\\nheader ul {\\n    list-style: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader li {\\n    margin: 0 10px;\\n}\\n\\nheader a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\n/* Main content styles */\\nmain {\\n    max-width: 800px;\\n    margin: 20px auto;\\n    padding: 0 20px;\\n}\\n\\nsection {\\n    margin-bottom: 50px;\\n}\\n\\nsection h2 {\\n    margin-top: 0;\\n}\\n\\n.project-card {\\n    border: 1px solid #ccc;\\n    border-radius: 5px;\\n    padding: 10px;\\n    margin-bottom: 20px;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    width: 100%;\\n}\\n\\n/* Contact form styles */\\nform {\\n    display: flex;\\n    flex-direction: column;\\n}\\n\\nlabel {\\n    margin-bottom: 10px;\\n}\\n\\ninput, textarea {\\n    margin-bottom: 20px;\\n    padding: 10px;\\n    border-radius: 5px;\\n    border: none;\\n    background-color: #333;\\n    color: #fff;\\n    cursor: pointer;\\n    border-radius: 5px;\\n}\"\n}"
}
{"text": "Create a simple Python project with a main script and a utility script inside a utilities folder. The main script should read a file and count the number of lines. The utility script should contain a function to double the line count.", "file_structure": "{\"main.py\":\"\",\"utilities\":{\"utility.py\":\"\"}}", "code": "{\"main.py\":\"with open('input_file.txt', 'r') as file:\\n    lines = file.readlines()\\n    line_count = len(lines)\\n    print(f'Number of lines: {line_count}')\",\"utilities/utility.py\":\"def double_count(count):\\n    return count * 2\"}"}
{"text": "Create a real-time chat application with Flask-SocketIO. Users should be able to connect to the server and join a chatroom by entering a unique username and a room name. Users should be able to send and receive messages within the chatroom, and the messages should be displayed in real-time.", "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}", "code": "{\"app.py\":\"from flask import Flask, render_template, request, session\\nfrom flask_socketio import SocketIO, emit, join_room, leave_room\\nimport uuid\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret!'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('connect')\\ndef connect():\\n    print('Client connected')\\n\\n@socketio.on('disconnect')\\ndef disconnect():\\n    print('Client disconnected')\\n\\n@socketio.on('join')\\ndef join(data):\\n    username = data['username']\\n    room = data['room']\\n    session['username'] = username\\n    session['room'] = room\\n    join_room(room)\\n    message = f'{username} has joined the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef leave():\\n    username = session['username']\\n    room = session['room']\\n    leave_room(room)\\n    message = f'{username} has left the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef message(data):\\n    username = session['username']\\n    room = session['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app, debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Real-Time Chat Application</title>\\n    <script src='https://cdn.socket.io/4.3.1/socket.io.min.js'></script>\\n</head>\\n<body>\\n    <h1>Real-Time Chat Application</h1>\\n    <div id='status'></div>\\n    <div id='chat'></div>\\n    <form id='join-form'>\\n        <label for='username'>Username:</label>\\n        <input type='text' name='username' id='username'>\\n        <label for='room'>Room:</label>\\n        <input type='text' name='room' id='room'>\\n        <input type='submit' value='Join Room'>\\n    </form>\\n    <form id='message-form'>\\n        <input type='text' name='message' id='message'>\\n        <input type='submit' value='Send'>\\n    </form>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat');\\n        var joinForm =        document.getElementById('join-form');\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message = document.getElementById('message').value;\\n            socket.emit('message', {\\n                message: message\\n            });\\n            document.getElementById('message').value = '';\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = message;\\n            statusElement.appendChild(pElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = username + ': ' + message;\\n            chatElement.appendChild(pElement);\\n        });\\n    </script>\\n</body>\\n</html>\"\n}"}
{
  "text": "Create a Flask application that allows users to upload and download files. The application should have a homepage with a form to upload a file, and a page to download the uploaded files. The uploaded files should be stored in a 'uploads' folder within the application directory.",
  "file_structure": "{\"app.py\":\"\",\"uploads\":\"\"}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, request, send_file\nimport os\n\napp = Flask(__name__)\n\nUPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/upload', methods=['POST'])\ndef upload():\n    file = request.files['file']\n    file.save(os.path.join(app.config['UPLOAD_FOLDER'], file.filename))\n    return 'File uploaded successfully!'\n\n@app.route('/download/<filename>')\ndef download(filename):\n    return send_file(os.path.join(app.config['UPLOAD_FOLDER'], filename), as_attachment=True)\n\nif __name__ == '__main__':\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>File Uploader/Downloader</title>\\n</head>\\n<body>\\n    <h1>File Uploader/Downloader</h1>\\n    <form method='POST' action='/upload' enctype='multipart/form-data'>\\n        <input type='file' name='file'>\\n        <input type='submit' value='Upload'>\\n    </form>\\n    <br>\\n    <h2>Uploaded Files</h2>\\n    <ul>\\n        {% for file in os.listdir(app.config['UPLOAD_FOLDER']) %}\\n        <li><a href='/download/{{ file }}'>{{ file }}</a></li>\\n        {% endfor %}\\n    </ul>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a Flask application that displays a real-time video stream from a webcam. The webpage should update the video stream every second without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, Response, render_template\\nimport cv2\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the video stream\\ndef get_stream():\\n    camera = cv2.VideoCapture(0)\\n    while True:\\n        success, frame = camera.read()\\n        if not success:\\n            break\\n        ret, buffer = cv2.imencode('.jpg', frame)\\n        frame = buffer.tobytes()\\n        yield (b'--frame\\r\\n'\\n               b'Content-Type: image/jpeg\\r\\n\\r\\n' + frame + b'\\r\\n')\\n\\n# Create a Flask route to stream the video\\n@app.route('/stream')\\ndef stream():\\n    return Response(get_stream(), mimetype='multipart/x-mixed-replace; boundary=frame')\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>Real-Time Webcam Stream</title>\\n</head>\\n<body>\\n    <h1>Real-Time Webcam Stream</h1>\\n    <img src=\\\"/stream\\\">\\n</body>\\n</html>\"}"
}
{
  "text": "Create a real-time stock market dashboard using Flask and Plotly. The dashboard should display real-time stock prices and volume for a specified list of stocks, and should update automatically without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"},\"static\":{\"style.css\":\"\",\"plotly-latest.min.js\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, Response\\nimport plotly\\nimport plotly.graph_objs as go\\nimport yfinance as yf\\nimport time\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the stock prices and volume data\\ndef get_stock_data(stock_tickers):\\n    data = []\\n    for ticker in stock_tickers:\\n        stock = yf.Ticker(ticker)\\n        hist = stock.history(period='1d')\\n        stock_data = go.Candlestick(x=hist.index, open=hist['Open'], high=hist['High'], low=hist['Low'], close=hist['Close'], name=ticker)\\n        data.append(stock_data)\\n    return data\\n\\n# Create a Flask route to stream the stock data\\n@app.route('/stream')\\ndef stream_stock_data():\\n    stock_tickers = ['AAPL', 'GOOGL', 'TSLA', 'AMZN']\\n    while True:\\n        stock_data = get_stock_data(stock_tickers)\\n        yield plotly.io.to_json({'data': stock_data, 'layout': {'title': 'Real-Time Stock Market Dashboard'}})\\n        time.sleep(10)\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <link rel=\\\"stylesheet\\\" href=\\\"{{ url_for('static', filename='style.css') }}\\\">\\n    <script src=\\\"{{ url_for('static', filename='plotly-latest.min.js') }}\\\"></script>\\n    <title>Real-Time Stock Market Dashboard</title>\\n</head>\\n<body>\\n    <h1>Real-Time Stock Market Dashboard</h1>\\n    <div id=\\\"chart\\\"></div>\\n    <script>\\n        const chartElement = document.getElementById('chart');\\n        const eventSource = new EventSource('/stream');\\n        eventSource.addEventListener('message', function(event) {\\n            const data = JSON.parse(event.data);\\n            Plotly.newPlot(chartElement, data);\\n        });\\n    </script>\\n</body>\\n</html>\",\"static/style.css\":\"body {\\n    font-family: Arial, Helvetica, sans-serif;\\n}\\n\\nh1 {\\n    text-align: center;\\n}\\n\\n#chart {\\n    margin: 20px auto;\\n    max-width: 100%;\\n    height: 500px;\\n}\"}"
}
{
  "text": "Create a real-time chat application using Flask-SocketIO that allows users to join a chat room and send messages to each other in real-time.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template\\nfrom flask_socketio import SocketIO, join_room, leave_room, emit\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret_key'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('join')\\ndef on_join(data):\\n    username = data['username']\\n    room = data['room']\\n    join_room(room)\\n    message = username + ' has joined the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef on_leave(data):\\n    username = data['username']\\n    room = data['room']\\n    leave_room(room)\\n    message = username + ' has left the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef on_message(data):\\n    username = data['username']\\n    room = data['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Flask-SocketIO Chat</title>\\n</head>\\n<body>\\n    <div id=\\\"chat\\\">\\n        <h1>Flask-SocketIO Chat</h1>\\n        <div id=\\\"status\\\"></div>\\n        <div id=\\\"chat-window\\\"></div>\\n        <form id=\\\"message-form\\\">\\n            <input id=\\\"message\\\" type=\\\"text\\\" placeholder=\\\"Enter a message...\\\" autocomplete=\\\"off\\\">\\n            <button type=\\\"submit\\\">Send</button>\\n        </form>\\n    </div>\\n    <script src=\\\"https://cdn.socket.io/4.1.2/socket.io.min.js\\\"></script>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat-window');\\n        var joinForm = document.getElementById('join-form');\\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message= document.getElementById('message').value;\\n            socket.emit('message', {\\n                username: username,\\n                room: room,\\n                message: message\\n            });\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(message);\\n            messageElement.appendChild(messageText);\\n            statusElement.appendChild(messageElement);\\n        });\\n    </script>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a basic portfolio website using HTML, CSS, and JavaScript. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\",\"script.js\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n    <script src=\\\"script.js\\\"></script>\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form action=\\\"#\\\">\\n                <div>\\n                    <label for=\\\"name\\\">Name:</label>\\n                    <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"email\\\">Email:</label>\\n                    <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"message\\\">Message:</label>\\n                    <textarea id=\\\"message\\\" name=\\\"message\\\"></textarea>\\n                </div>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n    <footer>\\n        <p>&copy; 2023 My Portfolio</p>\\n    </footer>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\n\\nbody {\\n    margin: 0;\\n    font-family: 'Segoe UI', sans-serif;\\n}\\n\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    padding: 1rem;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2rem;\\n}\\n\\nheader nav ul {\\n    list-style-type: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n}\\n\\nheader nav ul li {\\n    margin: 0 1rem;\\n}\\n\\nheader nav ul li a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\nmain {\\n    margin: 2rem;\\n}\\n\\nsection {\\n    margin: 2rem 0;\\n}\\n\\nsection h2 {\\n    margin: 0;\\n}\\n\\nsection p {\\n    margin-top: 1rem;\\n}\\n\\n.project-card {\\n    background-color: #fff;\\n    border: 1px solid #ccc;\\n    padding: 1rem;\\n    border-radius: 0.25rem;\\n    box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.075);\\n    margin-bottom: 2rem;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    max-width: 100%;\\n}\\n\\nfooter {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    height: 3rem;\\n}\\n\\nfooter p {\\n    margin: 0;\\n}\\n\",\"script.js\":\"// Add active class to the current navbar link\\nvar header = document.getElementById(\"navbar\");\\nvar links = header.getElementsByClassName(\"nav-link\");\\nfor (var i = 0; i < links.length; i++) {\\n  links[i].addEventListener(\"click\", function() {\\n    var current = document.getElementsByClassName(\"active\");\\n    current[0].className = current[0].className.replace(\" active\", \"\");\\n    this.className += \" active\";\\n  });\\n}\"}"
}
{
  "text": "Create a basic portfolio website using only HTML and CSS. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=...Project 3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form>\\n                <label for=\\\"name\\\">Name:</label>\\n                <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\" required>\\n                <label for=\\\"email\\\">Email:</label>\\n                <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\" required>\\n                <label for=\\\"message\\\">Message:</label>\\n                <textarea id=\\\"message\\\" name=\\\"message\\\" required></textarea>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\nbody {\\n    font-family: Arial, sans-serif;\\n    margin: 0;\\n    padding: 0;\\n}\\n\\n/* Header styles */\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    padding: 20px;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2em;\\n}\\n\\nheader ul {\\n    list-style: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader li {\\n    margin: 0 10px;\\n}\\n\\nheader a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\n/* Main content styles */\\nmain {\\n    max-width: 800px;\\n    margin: 20px auto;\\n    padding: 0 20px;\\n}\\n\\nsection {\\n    margin-bottom: 50px;\\n}\\n\\nsection h2 {\\n    margin-top: 0;\\n}\\n\\n.project-card {\\n    border: 1px solid #ccc;\\n    border-radius: 5px;\\n    padding: 10px;\\n    margin-bottom: 20px;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    width: 100%;\\n}\\n\\n/* Contact form styles */\\nform {\\n    display: flex;\\n    flex-direction: column;\\n}\\n\\nlabel {\\n    margin-bottom: 10px;\\n}\\n\\ninput, textarea {\\n    margin-bottom: 20px;\\n    padding: 10px;\\n    border-radius: 5px;\\n    border: none;\\n    background-color: #333;\\n    color: #fff;\\n    cursor: pointer;\\n    border-radius: 5px;\\n}\"\n}"
}
{"text": "Create a simple Python project with a main script and a utility script inside a utilities folder. The main script should read a file and count the number of lines. The utility script should contain a function to double the line count.", "file_structure": "{\"main.py\":\"\",\"utilities\":{\"utility.py\":\"\"}}", "code": "{\"main.py\":\"with open('input_file.txt', 'r') as file:\\n    lines = file.readlines()\\n    line_count = len(lines)\\n    print(f'Number of lines: {line_count}')\",\"utilities/utility.py\":\"def double_count(count):\\n    return count * 2\"}"}
{"text": "Create a real-time chat application with Flask-SocketIO. Users should be able to connect to the server and join a chatroom by entering a unique username and a room name. Users should be able to send and receive messages within the chatroom, and the messages should be displayed in real-time.", "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}", "code": "{\"app.py\":\"from flask import Flask, render_template, request, session\\nfrom flask_socketio import SocketIO, emit, join_room, leave_room\\nimport uuid\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret!'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('connect')\\ndef connect():\\n    print('Client connected')\\n\\n@socketio.on('disconnect')\\ndef disconnect():\\n    print('Client disconnected')\\n\\n@socketio.on('join')\\ndef join(data):\\n    username = data['username']\\n    room = data['room']\\n    session['username'] = username\\n    session['room'] = room\\n    join_room(room)\\n    message = f'{username} has joined the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef leave():\\n    username = session['username']\\n    room = session['room']\\n    leave_room(room)\\n    message = f'{username} has left the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef message(data):\\n    username = session['username']\\n    room = session['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app, debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Real-Time Chat Application</title>\\n    <script src='https://cdn.socket.io/4.3.1/socket.io.min.js'></script>\\n</head>\\n<body>\\n    <h1>Real-Time Chat Application</h1>\\n    <div id='status'></div>\\n    <div id='chat'></div>\\n    <form id='join-form'>\\n        <label for='username'>Username:</label>\\n        <input type='text' name='username' id='username'>\\n        <label for='room'>Room:</label>\\n        <input type='text' name='room' id='room'>\\n        <input type='submit' value='Join Room'>\\n    </form>\\n    <form id='message-form'>\\n        <input type='text' name='message' id='message'>\\n        <input type='submit' value='Send'>\\n    </form>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat');\\n        var joinForm =        document.getElementById('join-form');\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message = document.getElementById('message').value;\\n            socket.emit('message', {\\n                message: message\\n            });\\n            document.getElementById('message').value = '';\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = message;\\n            statusElement.appendChild(pElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = username + ': ' + message;\\n            chatElement.appendChild(pElement);\\n        });\\n    </script>\\n</body>\\n</html>\"\n}"}
{
  "text": "Create a Flask application that allows users to upload and download files. The application should have a homepage with a form to upload a file, and a page to download the uploaded files. The uploaded files should be stored in a 'uploads' folder within the application directory.",
  "file_structure": "{\"app.py\":\"\",\"uploads\":\"\"}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, request, send_file\nimport os\n\napp = Flask(__name__)\n\nUPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/upload', methods=['POST'])\ndef upload():\n    file = request.files['file']\n    file.save(os.path.join(app.config['UPLOAD_FOLDER'], file.filename))\n    return 'File uploaded successfully!'\n\n@app.route('/download/<filename>')\ndef download(filename):\n    return send_file(os.path.join(app.config['UPLOAD_FOLDER'], filename), as_attachment=True)\n\nif __name__ == '__main__':\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>File Uploader/Downloader</title>\\n</head>\\n<body>\\n    <h1>File Uploader/Downloader</h1>\\n    <form method='POST' action='/upload' enctype='multipart/form-data'>\\n        <input type='file' name='file'>\\n        <input type='submit' value='Upload'>\\n    </form>\\n    <br>\\n    <h2>Uploaded Files</h2>\\n    <ul>\\n        {% for file in os.listdir(app.config['UPLOAD_FOLDER']) %}\\n        <li><a href='/download/{{ file }}'>{{ file }}</a></li>\\n        {% endfor %}\\n    </ul>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a Flask application that displays a real-time video stream from a webcam. The webpage should update the video stream every second without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, Response, render_template\\nimport cv2\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the video stream\\ndef get_stream():\\n    camera = cv2.VideoCapture(0)\\n    while True:\\n        success, frame = camera.read()\\n        if not success:\\n            break\\n        ret, buffer = cv2.imencode('.jpg', frame)\\n        frame = buffer.tobytes()\\n        yield (b'--frame\\r\\n'\\n               b'Content-Type: image/jpeg\\r\\n\\r\\n' + frame + b'\\r\\n')\\n\\n# Create a Flask route to stream the video\\n@app.route('/stream')\\ndef stream():\\n    return Response(get_stream(), mimetype='multipart/x-mixed-replace; boundary=frame')\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>Real-Time Webcam Stream</title>\\n</head>\\n<body>\\n    <h1>Real-Time Webcam Stream</h1>\\n    <img src=\\\"/stream\\\">\\n</body>\\n</html>\"}"
}
{
  "text": "Create a real-time stock market dashboard using Flask and Plotly. The dashboard should display real-time stock prices and volume for a specified list of stocks, and should update automatically without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"},\"static\":{\"style.css\":\"\",\"plotly-latest.min.js\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, Response\\nimport plotly\\nimport plotly.graph_objs as go\\nimport yfinance as yf\\nimport time\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the stock prices and volume data\\ndef get_stock_data(stock_tickers):\\n    data = []\\n    for ticker in stock_tickers:\\n        stock = yf.Ticker(ticker)\\n        hist = stock.history(period='1d')\\n        stock_data = go.Candlestick(x=hist.index, open=hist['Open'], high=hist['High'], low=hist['Low'], close=hist['Close'], name=ticker)\\n        data.append(stock_data)\\n    return data\\n\\n# Create a Flask route to stream the stock data\\n@app.route('/stream')\\ndef stream_stock_data():\\n    stock_tickers = ['AAPL', 'GOOGL', 'TSLA', 'AMZN']\\n    while True:\\n        stock_data = get_stock_data(stock_tickers)\\n        yield plotly.io.to_json({'data': stock_data, 'layout': {'title': 'Real-Time Stock Market Dashboard'}})\\n        time.sleep(10)\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <link rel=\\\"stylesheet\\\" href=\\\"{{ url_for('static', filename='style.css') }}\\\">\\n    <script src=\\\"{{ url_for('static', filename='plotly-latest.min.js') }}\\\"></script>\\n    <title>Real-Time Stock Market Dashboard</title>\\n</head>\\n<body>\\n    <h1>Real-Time Stock Market Dashboard</h1>\\n    <div id=\\\"chart\\\"></div>\\n    <script>\\n        const chartElement = document.getElementById('chart');\\n        const eventSource = new EventSource('/stream');\\n        eventSource.addEventListener('message', function(event) {\\n            const data = JSON.parse(event.data);\\n            Plotly.newPlot(chartElement, data);\\n        });\\n    </script>\\n</body>\\n</html>\",\"static/style.css\":\"body {\\n    font-family: Arial, Helvetica, sans-serif;\\n}\\n\\nh1 {\\n    text-align: center;\\n}\\n\\n#chart {\\n    margin: 20px auto;\\n    max-width: 100%;\\n    height: 500px;\\n}\"}"
}
{
  "text": "Create a real-time chat application using Flask-SocketIO that allows users to join a chat room and send messages to each other in real-time.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template\\nfrom flask_socketio import SocketIO, join_room, leave_room, emit\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret_key'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('join')\\ndef on_join(data):\\n    username = data['username']\\n    room = data['room']\\n    join_room(room)\\n    message = username + ' has joined the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef on_leave(data):\\n    username = data['username']\\n    room = data['room']\\n    leave_room(room)\\n    message = username + ' has left the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef on_message(data):\\n    username = data['username']\\n    room = data['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Flask-SocketIO Chat</title>\\n</head>\\n<body>\\n    <div id=\\\"chat\\\">\\n        <h1>Flask-SocketIO Chat</h1>\\n        <div id=\\\"status\\\"></div>\\n        <div id=\\\"chat-window\\\"></div>\\n        <form id=\\\"message-form\\\">\\n            <input id=\\\"message\\\" type=\\\"text\\\" placeholder=\\\"Enter a message...\\\" autocomplete=\\\"off\\\">\\n            <button type=\\\"submit\\\">Send</button>\\n        </form>\\n    </div>\\n    <script src=\\\"https://cdn.socket.io/4.1.2/socket.io.min.js\\\"></script>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat-window');\\n        var joinForm = document.getElementById('join-form');\\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message= document.getElementById('message').value;\\n            socket.emit('message', {\\n                username: username,\\n                room: room,\\n                message: message\\n            });\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(message);\\n            messageElement.appendChild(messageText);\\n            statusElement.appendChild(messageElement);\\n        });\\n    </script>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a basic portfolio website using HTML, CSS, and JavaScript. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\",\"script.js\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n    <script src=\\\"script.js\\\"></script>\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form action=\\\"#\\\">\\n                <div>\\n                    <label for=\\\"name\\\">Name:</label>\\n                    <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"email\\\">Email:</label>\\n                    <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"message\\\">Message:</label>\\n                    <textarea id=\\\"message\\\" name=\\\"message\\\"></textarea>\\n                </div>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n    <footer>\\n        <p>&copy; 2023 My Portfolio</p>\\n    </footer>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\n\\nbody {\\n    margin: 0;\\n    font-family: 'Segoe UI', sans-serif;\\n}\\n\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    padding: 1rem;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2rem;\\n}\\n\\nheader nav ul {\\n    list-style-type: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n}\\n\\nheader nav ul li {\\n    margin: 0 1rem;\\n}\\n\\nheader nav ul li a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\nmain {\\n    margin: 2rem;\\n}\\n\\nsection {\\n    margin: 2rem 0;\\n}\\n\\nsection h2 {\\n    margin: 0;\\n}\\n\\nsection p {\\n    margin-top: 1rem;\\n}\\n\\n.project-card {\\n    background-color: #fff;\\n    border: 1px solid #ccc;\\n    padding: 1rem;\\n    border-radius: 0.25rem;\\n    box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.075);\\n    margin-bottom: 2rem;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    max-width: 100%;\\n}\\n\\nfooter {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    height: 3rem;\\n}\\n\\nfooter p {\\n    margin: 0;\\n}\\n\",\"script.js\":\"// Add active class to the current navbar link\\nvar header = document.getElementById(\"navbar\");\\nvar links = header.getElementsByClassName(\"nav-link\");\\nfor (var i = 0; i < links.length; i++) {\\n  links[i].addEventListener(\"click\", function() {\\n    var current = document.getElementsByClassName(\"active\");\\n    current[0].className = current[0].className.replace(\" active\", \"\");\\n    this.className += \" active\";\\n  });\\n}\"}"
}
{
  "text": "Create a basic portfolio website using only HTML and CSS. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=...Project 3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form>\\n                <label for=\\\"name\\\">Name:</label>\\n                <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\" required>\\n                <label for=\\\"email\\\">Email:</label>\\n                <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\" required>\\n                <label for=\\\"message\\\">Message:</label>\\n                <textarea id=\\\"message\\\" name=\\\"message\\\" required></textarea>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\nbody {\\n    font-family: Arial, sans-serif;\\n    margin: 0;\\n    padding: 0;\\n}\\n\\n/* Header styles */\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    padding: 20px;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2em;\\n}\\n\\nheader ul {\\n    list-style: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader li {\\n    margin: 0 10px;\\n}\\n\\nheader a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\n/* Main content styles */\\nmain {\\n    max-width: 800px;\\n    margin: 20px auto;\\n    padding: 0 20px;\\n}\\n\\nsection {\\n    margin-bottom: 50px;\\n}\\n\\nsection h2 {\\n    margin-top: 0;\\n}\\n\\n.project-card {\\n    border: 1px solid #ccc;\\n    border-radius: 5px;\\n    padding: 10px;\\n    margin-bottom: 20px;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    width: 100%;\\n}\\n\\n/* Contact form styles */\\nform {\\n    display: flex;\\n    flex-direction: column;\\n}\\n\\nlabel {\\n    margin-bottom: 10px;\\n}\\n\\ninput, textarea {\\n    margin-bottom: 20px;\\n    padding: 10px;\\n    border-radius: 5px;\\n    border: none;\\n    background-color: #333;\\n    color: #fff;\\n    cursor: pointer;\\n    border-radius: 5px;\\n}\"\n}"
}
{"text": "Create a simple Python project with a main script and a utility script inside a utilities folder. The main script should read a file and count the number of lines. The utility script should contain a function to double the line count.", "file_structure": "{\"main.py\":\"\",\"utilities\":{\"utility.py\":\"\"}}", "code": "{\"main.py\":\"with open('input_file.txt', 'r') as file:\\n    lines = file.readlines()\\n    line_count = len(lines)\\n    print(f'Number of lines: {line_count}')\",\"utilities/utility.py\":\"def double_count(count):\\n    return count * 2\"}"}
{"text": "Create a real-time chat application with Flask-SocketIO. Users should be able to connect to the server and join a chatroom by entering a unique username and a room name. Users should be able to send and receive messages within the chatroom, and the messages should be displayed in real-time.", "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}", "code": "{\"app.py\":\"from flask import Flask, render_template, request, session\\nfrom flask_socketio import SocketIO, emit, join_room, leave_room\\nimport uuid\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret!'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('connect')\\ndef connect():\\n    print('Client connected')\\n\\n@socketio.on('disconnect')\\ndef disconnect():\\n    print('Client disconnected')\\n\\n@socketio.on('join')\\ndef join(data):\\n    username = data['username']\\n    room = data['room']\\n    session['username'] = username\\n    session['room'] = room\\n    join_room(room)\\n    message = f'{username} has joined the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef leave():\\n    username = session['username']\\n    room = session['room']\\n    leave_room(room)\\n    message = f'{username} has left the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef message(data):\\n    username = session['username']\\n    room = session['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app, debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Real-Time Chat Application</title>\\n    <script src='https://cdn.socket.io/4.3.1/socket.io.min.js'></script>\\n</head>\\n<body>\\n    <h1>Real-Time Chat Application</h1>\\n    <div id='status'></div>\\n    <div id='chat'></div>\\n    <form id='join-form'>\\n        <label for='username'>Username:</label>\\n        <input type='text' name='username' id='username'>\\n        <label for='room'>Room:</label>\\n        <input type='text' name='room' id='room'>\\n        <input type='submit' value='Join Room'>\\n    </form>\\n    <form id='message-form'>\\n        <input type='text' name='message' id='message'>\\n        <input type='submit' value='Send'>\\n    </form>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat');\\n        var joinForm =        document.getElementById('join-form');\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message = document.getElementById('message').value;\\n            socket.emit('message', {\\n                message: message\\n            });\\n            document.getElementById('message').value = '';\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = message;\\n            statusElement.appendChild(pElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = username + ': ' + message;\\n            chatElement.appendChild(pElement);\\n        });\\n    </script>\\n</body>\\n</html>\"\n}"}
{
  "text": "Create a Flask application that allows users to upload and download files. The application should have a homepage with a form to upload a file, and a page to download the uploaded files. The uploaded files should be stored in a 'uploads' folder within the application directory.",
  "file_structure": "{\"app.py\":\"\",\"uploads\":\"\"}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, request, send_file\nimport os\n\napp = Flask(__name__)\n\nUPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/upload', methods=['POST'])\ndef upload():\n    file = request.files['file']\n    file.save(os.path.join(app.config['UPLOAD_FOLDER'], file.filename))\n    return 'File uploaded successfully!'\n\n@app.route('/download/<filename>')\ndef download(filename):\n    return send_file(os.path.join(app.config['UPLOAD_FOLDER'], filename), as_attachment=True)\n\nif __name__ == '__main__':\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>File Uploader/Downloader</title>\\n</head>\\n<body>\\n    <h1>File Uploader/Downloader</h1>\\n    <form method='POST' action='/upload' enctype='multipart/form-data'>\\n        <input type='file' name='file'>\\n        <input type='submit' value='Upload'>\\n    </form>\\n    <br>\\n    <h2>Uploaded Files</h2>\\n    <ul>\\n        {% for file in os.listdir(app.config['UPLOAD_FOLDER']) %}\\n        <li><a href='/download/{{ file }}'>{{ file }}</a></li>\\n        {% endfor %}\\n    </ul>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a Flask application that displays a real-time video stream from a webcam. The webpage should update the video stream every second without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, Response, render_template\\nimport cv2\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the video stream\\ndef get_stream():\\n    camera = cv2.VideoCapture(0)\\n    while True:\\n        success, frame = camera.read()\\n        if not success:\\n            break\\n        ret, buffer = cv2.imencode('.jpg', frame)\\n        frame = buffer.tobytes()\\n        yield (b'--frame\\r\\n'\\n               b'Content-Type: image/jpeg\\r\\n\\r\\n' + frame + b'\\r\\n')\\n\\n# Create a Flask route to stream the video\\n@app.route('/stream')\\ndef stream():\\n    return Response(get_stream(), mimetype='multipart/x-mixed-replace; boundary=frame')\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>Real-Time Webcam Stream</title>\\n</head>\\n<body>\\n    <h1>Real-Time Webcam Stream</h1>\\n    <img src=\\\"/stream\\\">\\n</body>\\n</html>\"}"
}
{
  "text": "Create a real-time stock market dashboard using Flask and Plotly. The dashboard should display real-time stock prices and volume for a specified list of stocks, and should update automatically without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"},\"static\":{\"style.css\":\"\",\"plotly-latest.min.js\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, Response\\nimport plotly\\nimport plotly.graph_objs as go\\nimport yfinance as yf\\nimport time\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the stock prices and volume data\\ndef get_stock_data(stock_tickers):\\n    data = []\\n    for ticker in stock_tickers:\\n        stock = yf.Ticker(ticker)\\n        hist = stock.history(period='1d')\\n        stock_data = go.Candlestick(x=hist.index, open=hist['Open'], high=hist['High'], low=hist['Low'], close=hist['Close'], name=ticker)\\n        data.append(stock_data)\\n    return data\\n\\n# Create a Flask route to stream the stock data\\n@app.route('/stream')\\ndef stream_stock_data():\\n    stock_tickers = ['AAPL', 'GOOGL', 'TSLA', 'AMZN']\\n    while True:\\n        stock_data = get_stock_data(stock_tickers)\\n        yield plotly.io.to_json({'data': stock_data, 'layout': {'title': 'Real-Time Stock Market Dashboard'}})\\n        time.sleep(10)\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <link rel=\\\"stylesheet\\\" href=\\\"{{ url_for('static', filename='style.css') }}\\\">\\n    <script src=\\\"{{ url_for('static', filename='plotly-latest.min.js') }}\\\"></script>\\n    <title>Real-Time Stock Market Dashboard</title>\\n</head>\\n<body>\\n    <h1>Real-Time Stock Market Dashboard</h1>\\n    <div id=\\\"chart\\\"></div>\\n    <script>\\n        const chartElement = document.getElementById('chart');\\n        const eventSource = new EventSource('/stream');\\n        eventSource.addEventListener('message', function(event) {\\n            const data = JSON.parse(event.data);\\n            Plotly.newPlot(chartElement, data);\\n        });\\n    </script>\\n</body>\\n</html>\",\"static/style.css\":\"body {\\n    font-family: Arial, Helvetica, sans-serif;\\n}\\n\\nh1 {\\n    text-align: center;\\n}\\n\\n#chart {\\n    margin: 20px auto;\\n    max-width: 100%;\\n    height: 500px;\\n}\"}"
}
{
  "text": "Create a real-time chat application using Flask-SocketIO that allows users to join a chat room and send messages to each other in real-time.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template\\nfrom flask_socketio import SocketIO, join_room, leave_room, emit\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret_key'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('join')\\ndef on_join(data):\\n    username = data['username']\\n    room = data['room']\\n    join_room(room)\\n    message = username + ' has joined the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef on_leave(data):\\n    username = data['username']\\n    room = data['room']\\n    leave_room(room)\\n    message = username + ' has left the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef on_message(data):\\n    username = data['username']\\n    room = data['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Flask-SocketIO Chat</title>\\n</head>\\n<body>\\n    <div id=\\\"chat\\\">\\n        <h1>Flask-SocketIO Chat</h1>\\n        <div id=\\\"status\\\"></div>\\n        <div id=\\\"chat-window\\\"></div>\\n        <form id=\\\"message-form\\\">\\n            <input id=\\\"message\\\" type=\\\"text\\\" placeholder=\\\"Enter a message...\\\" autocomplete=\\\"off\\\">\\n            <button type=\\\"submit\\\">Send</button>\\n        </form>\\n    </div>\\n    <script src=\\\"https://cdn.socket.io/4.1.2/socket.io.min.js\\\"></script>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat-window');\\n        var joinForm = document.getElementById('join-form');\\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message= document.getElementById('message').value;\\n            socket.emit('message', {\\n                username: username,\\n                room: room,\\n                message: message\\n            });\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(message);\\n            messageElement.appendChild(messageText);\\n            statusElement.appendChild(messageElement);\\n        });\\n    </script>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a basic portfolio website using HTML, CSS, and JavaScript. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\",\"script.js\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n    <script src=\\\"script.js\\\"></script>\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form action=\\\"#\\\">\\n                <div>\\n                    <label for=\\\"name\\\">Name:</label>\\n                    <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"email\\\">Email:</label>\\n                    <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"message\\\">Message:</label>\\n                    <textarea id=\\\"message\\\" name=\\\"message\\\"></textarea>\\n                </div>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n    <footer>\\n        <p>&copy; 2023 My Portfolio</p>\\n    </footer>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\n\\nbody {\\n    margin: 0;\\n    font-family: 'Segoe UI', sans-serif;\\n}\\n\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    padding: 1rem;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2rem;\\n}\\n\\nheader nav ul {\\n    list-style-type: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n}\\n\\nheader nav ul li {\\n    margin: 0 1rem;\\n}\\n\\nheader nav ul li a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\nmain {\\n    margin: 2rem;\\n}\\n\\nsection {\\n    margin: 2rem 0;\\n}\\n\\nsection h2 {\\n    margin: 0;\\n}\\n\\nsection p {\\n    margin-top: 1rem;\\n}\\n\\n.project-card {\\n    background-color: #fff;\\n    border: 1px solid #ccc;\\n    padding: 1rem;\\n    border-radius: 0.25rem;\\n    box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.075);\\n    margin-bottom: 2rem;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    max-width: 100%;\\n}\\n\\nfooter {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    height: 3rem;\\n}\\n\\nfooter p {\\n    margin: 0;\\n}\\n\",\"script.js\":\"// Add active class to the current navbar link\\nvar header = document.getElementById(\"navbar\");\\nvar links = header.getElementsByClassName(\"nav-link\");\\nfor (var i = 0; i < links.length; i++) {\\n  links[i].addEventListener(\"click\", function() {\\n    var current = document.getElementsByClassName(\"active\");\\n    current[0].className = current[0].className.replace(\" active\", \"\");\\n    this.className += \" active\";\\n  });\\n}\"}"
}
{
  "text": "Create a basic portfolio website using only HTML and CSS. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=...Project 3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form>\\n                <label for=\\\"name\\\">Name:</label>\\n                <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\" required>\\n                <label for=\\\"email\\\">Email:</label>\\n                <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\" required>\\n                <label for=\\\"message\\\">Message:</label>\\n                <textarea id=\\\"message\\\" name=\\\"message\\\" required></textarea>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\nbody {\\n    font-family: Arial, sans-serif;\\n    margin: 0;\\n    padding: 0;\\n}\\n\\n/* Header styles */\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    padding: 20px;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2em;\\n}\\n\\nheader ul {\\n    list-style: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader li {\\n    margin: 0 10px;\\n}\\n\\nheader a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\n/* Main content styles */\\nmain {\\n    max-width: 800px;\\n    margin: 20px auto;\\n    padding: 0 20px;\\n}\\n\\nsection {\\n    margin-bottom: 50px;\\n}\\n\\nsection h2 {\\n    margin-top: 0;\\n}\\n\\n.project-card {\\n    border: 1px solid #ccc;\\n    border-radius: 5px;\\n    padding: 10px;\\n    margin-bottom: 20px;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    width: 100%;\\n}\\n\\n/* Contact form styles */\\nform {\\n    display: flex;\\n    flex-direction: column;\\n}\\n\\nlabel {\\n    margin-bottom: 10px;\\n}\\n\\ninput, textarea {\\n    margin-bottom: 20px;\\n    padding: 10px;\\n    border-radius: 5px;\\n    border: none;\\n    background-color: #333;\\n    color: #fff;\\n    cursor: pointer;\\n    border-radius: 5px;\\n}\"\n}"
}
{"text": "Create a simple Python project with a main script and a utility script inside a utilities folder. The main script should read a file and count the number of lines. The utility script should contain a function to double the line count.", "file_structure": "{\"main.py\":\"\",\"utilities\":{\"utility.py\":\"\"}}", "code": "{\"main.py\":\"with open('input_file.txt', 'r') as file:\\n    lines = file.readlines()\\n    line_count = len(lines)\\n    print(f'Number of lines: {line_count}')\",\"utilities/utility.py\":\"def double_count(count):\\n    return count * 2\"}"}
{"text": "Create a real-time chat application with Flask-SocketIO. Users should be able to connect to the server and join a chatroom by entering a unique username and a room name. Users should be able to send and receive messages within the chatroom, and the messages should be displayed in real-time.", "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}", "code": "{\"app.py\":\"from flask import Flask, render_template, request, session\\nfrom flask_socketio import SocketIO, emit, join_room, leave_room\\nimport uuid\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret!'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('connect')\\ndef connect():\\n    print('Client connected')\\n\\n@socketio.on('disconnect')\\ndef disconnect():\\n    print('Client disconnected')\\n\\n@socketio.on('join')\\ndef join(data):\\n    username = data['username']\\n    room = data['room']\\n    session['username'] = username\\n    session['room'] = room\\n    join_room(room)\\n    message = f'{username} has joined the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef leave():\\n    username = session['username']\\n    room = session['room']\\n    leave_room(room)\\n    message = f'{username} has left the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef message(data):\\n    username = session['username']\\n    room = session['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app, debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Real-Time Chat Application</title>\\n    <script src='https://cdn.socket.io/4.3.1/socket.io.min.js'></script>\\n</head>\\n<body>\\n    <h1>Real-Time Chat Application</h1>\\n    <div id='status'></div>\\n    <div id='chat'></div>\\n    <form id='join-form'>\\n        <label for='username'>Username:</label>\\n        <input type='text' name='username' id='username'>\\n        <label for='room'>Room:</label>\\n        <input type='text' name='room' id='room'>\\n        <input type='submit' value='Join Room'>\\n    </form>\\n    <form id='message-form'>\\n        <input type='text' name='message' id='message'>\\n        <input type='submit' value='Send'>\\n    </form>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat');\\n        var joinForm =        document.getElementById('join-form');\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message = document.getElementById('message').value;\\n            socket.emit('message', {\\n                message: message\\n            });\\n            document.getElementById('message').value = '';\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = message;\\n            statusElement.appendChild(pElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = username + ': ' + message;\\n            chatElement.appendChild(pElement);\\n        });\\n    </script>\\n</body>\\n</html>\"\n}"}
{
  "text": "Create a Flask application that allows users to upload and download files. The application should have a homepage with a form to upload a file, and a page to download the uploaded files. The uploaded files should be stored in a 'uploads' folder within the application directory.",
  "file_structure": "{\"app.py\":\"\",\"uploads\":\"\"}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, request, send_file\nimport os\n\napp = Flask(__name__)\n\nUPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/upload', methods=['POST'])\ndef upload():\n    file = request.files['file']\n    file.save(os.path.join(app.config['UPLOAD_FOLDER'], file.filename))\n    return 'File uploaded successfully!'\n\n@app.route('/download/<filename>')\ndef download(filename):\n    return send_file(os.path.join(app.config['UPLOAD_FOLDER'], filename), as_attachment=True)\n\nif __name__ == '__main__':\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>File Uploader/Downloader</title>\\n</head>\\n<body>\\n    <h1>File Uploader/Downloader</h1>\\n    <form method='POST' action='/upload' enctype='multipart/form-data'>\\n        <input type='file' name='file'>\\n        <input type='submit' value='Upload'>\\n    </form>\\n    <br>\\n    <h2>Uploaded Files</h2>\\n    <ul>\\n        {% for file in os.listdir(app.config['UPLOAD_FOLDER']) %}\\n        <li><a href='/download/{{ file }}'>{{ file }}</a></li>\\n        {% endfor %}\\n    </ul>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a Flask application that displays a real-time video stream from a webcam. The webpage should update the video stream every second without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, Response, render_template\\nimport cv2\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the video stream\\ndef get_stream():\\n    camera = cv2.VideoCapture(0)\\n    while True:\\n        success, frame = camera.read()\\n        if not success:\\n            break\\n        ret, buffer = cv2.imencode('.jpg', frame)\\n        frame = buffer.tobytes()\\n        yield (b'--frame\\r\\n'\\n               b'Content-Type: image/jpeg\\r\\n\\r\\n' + frame + b'\\r\\n')\\n\\n# Create a Flask route to stream the video\\n@app.route('/stream')\\ndef stream():\\n    return Response(get_stream(), mimetype='multipart/x-mixed-replace; boundary=frame')\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>Real-Time Webcam Stream</title>\\n</head>\\n<body>\\n    <h1>Real-Time Webcam Stream</h1>\\n    <img src=\\\"/stream\\\">\\n</body>\\n</html>\"}"
}
{
  "text": "Create a real-time stock market dashboard using Flask and Plotly. The dashboard should display real-time stock prices and volume for a specified list of stocks, and should update automatically without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"},\"static\":{\"style.css\":\"\",\"plotly-latest.min.js\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, Response\\nimport plotly\\nimport plotly.graph_objs as go\\nimport yfinance as yf\\nimport time\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the stock prices and volume data\\ndef get_stock_data(stock_tickers):\\n    data = []\\n    for ticker in stock_tickers:\\n        stock = yf.Ticker(ticker)\\n        hist = stock.history(period='1d')\\n        stock_data = go.Candlestick(x=hist.index, open=hist['Open'], high=hist['High'], low=hist['Low'], close=hist['Close'], name=ticker)\\n        data.append(stock_data)\\n    return data\\n\\n# Create a Flask route to stream the stock data\\n@app.route('/stream')\\ndef stream_stock_data():\\n    stock_tickers = ['AAPL', 'GOOGL', 'TSLA', 'AMZN']\\n    while True:\\n        stock_data = get_stock_data(stock_tickers)\\n        yield plotly.io.to_json({'data': stock_data, 'layout': {'title': 'Real-Time Stock Market Dashboard'}})\\n        time.sleep(10)\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <link rel=\\\"stylesheet\\\" href=\\\"{{ url_for('static', filename='style.css') }}\\\">\\n    <script src=\\\"{{ url_for('static', filename='plotly-latest.min.js') }}\\\"></script>\\n    <title>Real-Time Stock Market Dashboard</title>\\n</head>\\n<body>\\n    <h1>Real-Time Stock Market Dashboard</h1>\\n    <div id=\\\"chart\\\"></div>\\n    <script>\\n        const chartElement = document.getElementById('chart');\\n        const eventSource = new EventSource('/stream');\\n        eventSource.addEventListener('message', function(event) {\\n            const data = JSON.parse(event.data);\\n            Plotly.newPlot(chartElement, data);\\n        });\\n    </script>\\n</body>\\n</html>\",\"static/style.css\":\"body {\\n    font-family: Arial, Helvetica, sans-serif;\\n}\\n\\nh1 {\\n    text-align: center;\\n}\\n\\n#chart {\\n    margin: 20px auto;\\n    max-width: 100%;\\n    height: 500px;\\n}\"}"
}
{
  "text": "Create a real-time chat application using Flask-SocketIO that allows users to join a chat room and send messages to each other in real-time.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template\\nfrom flask_socketio import SocketIO, join_room, leave_room, emit\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret_key'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('join')\\ndef on_join(data):\\n    username = data['username']\\n    room = data['room']\\n    join_room(room)\\n    message = username + ' has joined the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef on_leave(data):\\n    username = data['username']\\n    room = data['room']\\n    leave_room(room)\\n    message = username + ' has left the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef on_message(data):\\n    username = data['username']\\n    room = data['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Flask-SocketIO Chat</title>\\n</head>\\n<body>\\n    <div id=\\\"chat\\\">\\n        <h1>Flask-SocketIO Chat</h1>\\n        <div id=\\\"status\\\"></div>\\n        <div id=\\\"chat-window\\\"></div>\\n        <form id=\\\"message-form\\\">\\n            <input id=\\\"message\\\" type=\\\"text\\\" placeholder=\\\"Enter a message...\\\" autocomplete=\\\"off\\\">\\n            <button type=\\\"submit\\\">Send</button>\\n        </form>\\n    </div>\\n    <script src=\\\"https://cdn.socket.io/4.1.2/socket.io.min.js\\\"></script>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat-window');\\n        var joinForm = document.getElementById('join-form');\\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message= document.getElementById('message').value;\\n            socket.emit('message', {\\n                username: username,\\n                room: room,\\n                message: message\\n            });\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(message);\\n            messageElement.appendChild(messageText);\\n            statusElement.appendChild(messageElement);\\n        });\\n    </script>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a basic portfolio website using HTML, CSS, and JavaScript. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\",\"script.js\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n    <script src=\\\"script.js\\\"></script>\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form action=\\\"#\\\">\\n                <div>\\n                    <label for=\\\"name\\\">Name:</label>\\n                    <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"email\\\">Email:</label>\\n                    <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"message\\\">Message:</label>\\n                    <textarea id=\\\"message\\\" name=\\\"message\\\"></textarea>\\n                </div>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n    <footer>\\n        <p>&copy; 2023 My Portfolio</p>\\n    </footer>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\n\\nbody {\\n    margin: 0;\\n    font-family: 'Segoe UI', sans-serif;\\n}\\n\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    padding: 1rem;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2rem;\\n}\\n\\nheader nav ul {\\n    list-style-type: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n}\\n\\nheader nav ul li {\\n    margin: 0 1rem;\\n}\\n\\nheader nav ul li a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\nmain {\\n    margin: 2rem;\\n}\\n\\nsection {\\n    margin: 2rem 0;\\n}\\n\\nsection h2 {\\n    margin: 0;\\n}\\n\\nsection p {\\n    margin-top: 1rem;\\n}\\n\\n.project-card {\\n    background-color: #fff;\\n    border: 1px solid #ccc;\\n    padding: 1rem;\\n    border-radius: 0.25rem;\\n    box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.075);\\n    margin-bottom: 2rem;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    max-width: 100%;\\n}\\n\\nfooter {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    height: 3rem;\\n}\\n\\nfooter p {\\n    margin: 0;\\n}\\n\",\"script.js\":\"// Add active class to the current navbar link\\nvar header = document.getElementById(\"navbar\");\\nvar links = header.getElementsByClassName(\"nav-link\");\\nfor (var i = 0; i < links.length; i++) {\\n  links[i].addEventListener(\"click\", function() {\\n    var current = document.getElementsByClassName(\"active\");\\n    current[0].className = current[0].className.replace(\" active\", \"\");\\n    this.className += \" active\";\\n  });\\n}\"}"
}
{
  "text": "Create a basic portfolio website using only HTML and CSS. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=...Project 3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form>\\n                <label for=\\\"name\\\">Name:</label>\\n                <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\" required>\\n                <label for=\\\"email\\\">Email:</label>\\n                <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\" required>\\n                <label for=\\\"message\\\">Message:</label>\\n                <textarea id=\\\"message\\\" name=\\\"message\\\" required></textarea>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\nbody {\\n    font-family: Arial, sans-serif;\\n    margin: 0;\\n    padding: 0;\\n}\\n\\n/* Header styles */\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    padding: 20px;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2em;\\n}\\n\\nheader ul {\\n    list-style: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader li {\\n    margin: 0 10px;\\n}\\n\\nheader a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\n/* Main content styles */\\nmain {\\n    max-width: 800px;\\n    margin: 20px auto;\\n    padding: 0 20px;\\n}\\n\\nsection {\\n    margin-bottom: 50px;\\n}\\n\\nsection h2 {\\n    margin-top: 0;\\n}\\n\\n.project-card {\\n    border: 1px solid #ccc;\\n    border-radius: 5px;\\n    padding: 10px;\\n    margin-bottom: 20px;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    width: 100%;\\n}\\n\\n/* Contact form styles */\\nform {\\n    display: flex;\\n    flex-direction: column;\\n}\\n\\nlabel {\\n    margin-bottom: 10px;\\n}\\n\\ninput, textarea {\\n    margin-bottom: 20px;\\n    padding: 10px;\\n    border-radius: 5px;\\n    border: none;\\n    background-color: #333;\\n    color: #fff;\\n    cursor: pointer;\\n    border-radius: 5px;\\n}\"\n}"
}
{"text": "Create a simple Python project with a main script and a utility script inside a utilities folder. The main script should read a file and count the number of lines. The utility script should contain a function to double the line count.", "file_structure": "{\"main.py\":\"\",\"utilities\":{\"utility.py\":\"\"}}", "code": "{\"main.py\":\"with open('input_file.txt', 'r') as file:\\n    lines = file.readlines()\\n    line_count = len(lines)\\n    print(f'Number of lines: {line_count}')\",\"utilities/utility.py\":\"def double_count(count):\\n    return count * 2\"}"}
{"text": "Create a real-time chat application with Flask-SocketIO. Users should be able to connect to the server and join a chatroom by entering a unique username and a room name. Users should be able to send and receive messages within the chatroom, and the messages should be displayed in real-time.", "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}", "code": "{\"app.py\":\"from flask import Flask, render_template, request, session\\nfrom flask_socketio import SocketIO, emit, join_room, leave_room\\nimport uuid\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret!'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('connect')\\ndef connect():\\n    print('Client connected')\\n\\n@socketio.on('disconnect')\\ndef disconnect():\\n    print('Client disconnected')\\n\\n@socketio.on('join')\\ndef join(data):\\n    username = data['username']\\n    room = data['room']\\n    session['username'] = username\\n    session['room'] = room\\n    join_room(room)\\n    message = f'{username} has joined the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef leave():\\n    username = session['username']\\n    room = session['room']\\n    leave_room(room)\\n    message = f'{username} has left the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef message(data):\\n    username = session['username']\\n    room = session['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app, debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Real-Time Chat Application</title>\\n    <script src='https://cdn.socket.io/4.3.1/socket.io.min.js'></script>\\n</head>\\n<body>\\n    <h1>Real-Time Chat Application</h1>\\n    <div id='status'></div>\\n    <div id='chat'></div>\\n    <form id='join-form'>\\n        <label for='username'>Username:</label>\\n        <input type='text' name='username' id='username'>\\n        <label for='room'>Room:</label>\\n        <input type='text' name='room' id='room'>\\n        <input type='submit' value='Join Room'>\\n    </form>\\n    <form id='message-form'>\\n        <input type='text' name='message' id='message'>\\n        <input type='submit' value='Send'>\\n    </form>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat');\\n        var joinForm =        document.getElementById('join-form');\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message = document.getElementById('message').value;\\n            socket.emit('message', {\\n                message: message\\n            });\\n            document.getElementById('message').value = '';\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = message;\\n            statusElement.appendChild(pElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = username + ': ' + message;\\n            chatElement.appendChild(pElement);\\n        });\\n    </script>\\n</body>\\n</html>\"\n}"}
{
  "text": "Create a Flask application that allows users to upload and download files. The application should have a homepage with a form to upload a file, and a page to download the uploaded files. The uploaded files should be stored in a 'uploads' folder within the application directory.",
  "file_structure": "{\"app.py\":\"\",\"uploads\":\"\"}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, request, send_file\nimport os\n\napp = Flask(__name__)\n\nUPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/upload', methods=['POST'])\ndef upload():\n    file = request.files['file']\n    file.save(os.path.join(app.config['UPLOAD_FOLDER'], file.filename))\n    return 'File uploaded successfully!'\n\n@app.route('/download/<filename>')\ndef download(filename):\n    return send_file(os.path.join(app.config['UPLOAD_FOLDER'], filename), as_attachment=True)\n\nif __name__ == '__main__':\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>File Uploader/Downloader</title>\\n</head>\\n<body>\\n    <h1>File Uploader/Downloader</h1>\\n    <form method='POST' action='/upload' enctype='multipart/form-data'>\\n        <input type='file' name='file'>\\n        <input type='submit' value='Upload'>\\n    </form>\\n    <br>\\n    <h2>Uploaded Files</h2>\\n    <ul>\\n        {% for file in os.listdir(app.config['UPLOAD_FOLDER']) %}\\n        <li><a href='/download/{{ file }}'>{{ file }}</a></li>\\n        {% endfor %}\\n    </ul>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a Flask application that displays a real-time video stream from a webcam. The webpage should update the video stream every second without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, Response, render_template\\nimport cv2\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the video stream\\ndef get_stream():\\n    camera = cv2.VideoCapture(0)\\n    while True:\\n        success, frame = camera.read()\\n        if not success:\\n            break\\n        ret, buffer = cv2.imencode('.jpg', frame)\\n        frame = buffer.tobytes()\\n        yield (b'--frame\\r\\n'\\n               b'Content-Type: image/jpeg\\r\\n\\r\\n' + frame + b'\\r\\n')\\n\\n# Create a Flask route to stream the video\\n@app.route('/stream')\\ndef stream():\\n    return Response(get_stream(), mimetype='multipart/x-mixed-replace; boundary=frame')\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>Real-Time Webcam Stream</title>\\n</head>\\n<body>\\n    <h1>Real-Time Webcam Stream</h1>\\n    <img src=\\\"/stream\\\">\\n</body>\\n</html>\"}"
}
{
  "text": "Create a real-time stock market dashboard using Flask and Plotly. The dashboard should display real-time stock prices and volume for a specified list of stocks, and should update automatically without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"},\"static\":{\"style.css\":\"\",\"plotly-latest.min.js\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, Response\\nimport plotly\\nimport plotly.graph_objs as go\\nimport yfinance as yf\\nimport time\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the stock prices and volume data\\ndef get_stock_data(stock_tickers):\\n    data = []\\n    for ticker in stock_tickers:\\n        stock = yf.Ticker(ticker)\\n        hist = stock.history(period='1d')\\n        stock_data = go.Candlestick(x=hist.index, open=hist['Open'], high=hist['High'], low=hist['Low'], close=hist['Close'], name=ticker)\\n        data.append(stock_data)\\n    return data\\n\\n# Create a Flask route to stream the stock data\\n@app.route('/stream')\\ndef stream_stock_data():\\n    stock_tickers = ['AAPL', 'GOOGL', 'TSLA', 'AMZN']\\n    while True:\\n        stock_data = get_stock_data(stock_tickers)\\n        yield plotly.io.to_json({'data': stock_data, 'layout': {'title': 'Real-Time Stock Market Dashboard'}})\\n        time.sleep(10)\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <link rel=\\\"stylesheet\\\" href=\\\"{{ url_for('static', filename='style.css') }}\\\">\\n    <script src=\\\"{{ url_for('static', filename='plotly-latest.min.js') }}\\\"></script>\\n    <title>Real-Time Stock Market Dashboard</title>\\n</head>\\n<body>\\n    <h1>Real-Time Stock Market Dashboard</h1>\\n    <div id=\\\"chart\\\"></div>\\n    <script>\\n        const chartElement = document.getElementById('chart');\\n        const eventSource = new EventSource('/stream');\\n        eventSource.addEventListener('message', function(event) {\\n            const data = JSON.parse(event.data);\\n            Plotly.newPlot(chartElement, data);\\n        });\\n    </script>\\n</body>\\n</html>\",\"static/style.css\":\"body {\\n    font-family: Arial, Helvetica, sans-serif;\\n}\\n\\nh1 {\\n    text-align: center;\\n}\\n\\n#chart {\\n    margin: 20px auto;\\n    max-width: 100%;\\n    height: 500px;\\n}\"}"
}
{
  "text": "Create a real-time chat application using Flask-SocketIO that allows users to join a chat room and send messages to each other in real-time.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template\\nfrom flask_socketio import SocketIO, join_room, leave_room, emit\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret_key'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('join')\\ndef on_join(data):\\n    username = data['username']\\n    room = data['room']\\n    join_room(room)\\n    message = username + ' has joined the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef on_leave(data):\\n    username = data['username']\\n    room = data['room']\\n    leave_room(room)\\n    message = username + ' has left the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef on_message(data):\\n    username = data['username']\\n    room = data['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Flask-SocketIO Chat</title>\\n</head>\\n<body>\\n    <div id=\\\"chat\\\">\\n        <h1>Flask-SocketIO Chat</h1>\\n        <div id=\\\"status\\\"></div>\\n        <div id=\\\"chat-window\\\"></div>\\n        <form id=\\\"message-form\\\">\\n            <input id=\\\"message\\\" type=\\\"text\\\" placeholder=\\\"Enter a message...\\\" autocomplete=\\\"off\\\">\\n            <button type=\\\"submit\\\">Send</button>\\n        </form>\\n    </div>\\n    <script src=\\\"https://cdn.socket.io/4.1.2/socket.io.min.js\\\"></script>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat-window');\\n        var joinForm = document.getElementById('join-form');\\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message= document.getElementById('message').value;\\n            socket.emit('message', {\\n                username: username,\\n                room: room,\\n                message: message\\n            });\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(message);\\n            messageElement.appendChild(messageText);\\n            statusElement.appendChild(messageElement);\\n        });\\n    </script>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a basic portfolio website using HTML, CSS, and JavaScript. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\",\"script.js\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n    <script src=\\\"script.js\\\"></script>\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form action=\\\"#\\\">\\n                <div>\\n                    <label for=\\\"name\\\">Name:</label>\\n                    <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"email\\\">Email:</label>\\n                    <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"message\\\">Message:</label>\\n                    <textarea id=\\\"message\\\" name=\\\"message\\\"></textarea>\\n                </div>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n    <footer>\\n        <p>&copy; 2023 My Portfolio</p>\\n    </footer>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\n\\nbody {\\n    margin: 0;\\n    font-family: 'Segoe UI', sans-serif;\\n}\\n\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    padding: 1rem;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2rem;\\n}\\n\\nheader nav ul {\\n    list-style-type: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n}\\n\\nheader nav ul li {\\n    margin: 0 1rem;\\n}\\n\\nheader nav ul li a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\nmain {\\n    margin: 2rem;\\n}\\n\\nsection {\\n    margin: 2rem 0;\\n}\\n\\nsection h2 {\\n    margin: 0;\\n}\\n\\nsection p {\\n    margin-top: 1rem;\\n}\\n\\n.project-card {\\n    background-color: #fff;\\n    border: 1px solid #ccc;\\n    padding: 1rem;\\n    border-radius: 0.25rem;\\n    box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.075);\\n    margin-bottom: 2rem;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    max-width: 100%;\\n}\\n\\nfooter {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    height: 3rem;\\n}\\n\\nfooter p {\\n    margin: 0;\\n}\\n\",\"script.js\":\"// Add active class to the current navbar link\\nvar header = document.getElementById(\"navbar\");\\nvar links = header.getElementsByClassName(\"nav-link\");\\nfor (var i = 0; i < links.length; i++) {\\n  links[i].addEventListener(\"click\", function() {\\n    var current = document.getElementsByClassName(\"active\");\\n    current[0].className = current[0].className.replace(\" active\", \"\");\\n    this.className += \" active\";\\n  });\\n}\"}"
}
{
  "text": "Create a basic portfolio website using only HTML and CSS. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=...Project 3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form>\\n                <label for=\\\"name\\\">Name:</label>\\n                <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\" required>\\n                <label for=\\\"email\\\">Email:</label>\\n                <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\" required>\\n                <label for=\\\"message\\\">Message:</label>\\n                <textarea id=\\\"message\\\" name=\\\"message\\\" required></textarea>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\nbody {\\n    font-family: Arial, sans-serif;\\n    margin: 0;\\n    padding: 0;\\n}\\n\\n/* Header styles */\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    padding: 20px;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2em;\\n}\\n\\nheader ul {\\n    list-style: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader li {\\n    margin: 0 10px;\\n}\\n\\nheader a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\n/* Main content styles */\\nmain {\\n    max-width: 800px;\\n    margin: 20px auto;\\n    padding: 0 20px;\\n}\\n\\nsection {\\n    margin-bottom: 50px;\\n}\\n\\nsection h2 {\\n    margin-top: 0;\\n}\\n\\n.project-card {\\n    border: 1px solid #ccc;\\n    border-radius: 5px;\\n    padding: 10px;\\n    margin-bottom: 20px;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    width: 100%;\\n}\\n\\n/* Contact form styles */\\nform {\\n    display: flex;\\n    flex-direction: column;\\n}\\n\\nlabel {\\n    margin-bottom: 10px;\\n}\\n\\ninput, textarea {\\n    margin-bottom: 20px;\\n    padding: 10px;\\n    border-radius: 5px;\\n    border: none;\\n    background-color: #333;\\n    color: #fff;\\n    cursor: pointer;\\n    border-radius: 5px;\\n}\"\n}"
}
{"text": "Create a simple Python project with a main script and a utility script inside a utilities folder. The main script should read a file and count the number of lines. The utility script should contain a function to double the line count.", "file_structure": "{\"main.py\":\"\",\"utilities\":{\"utility.py\":\"\"}}", "code": "{\"main.py\":\"with open('input_file.txt', 'r') as file:\\n    lines = file.readlines()\\n    line_count = len(lines)\\n    print(f'Number of lines: {line_count}')\",\"utilities/utility.py\":\"def double_count(count):\\n    return count * 2\"}"}
{"text": "Create a real-time chat application with Flask-SocketIO. Users should be able to connect to the server and join a chatroom by entering a unique username and a room name. Users should be able to send and receive messages within the chatroom, and the messages should be displayed in real-time.", "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}", "code": "{\"app.py\":\"from flask import Flask, render_template, request, session\\nfrom flask_socketio import SocketIO, emit, join_room, leave_room\\nimport uuid\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret!'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('connect')\\ndef connect():\\n    print('Client connected')\\n\\n@socketio.on('disconnect')\\ndef disconnect():\\n    print('Client disconnected')\\n\\n@socketio.on('join')\\ndef join(data):\\n    username = data['username']\\n    room = data['room']\\n    session['username'] = username\\n    session['room'] = room\\n    join_room(room)\\n    message = f'{username} has joined the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef leave():\\n    username = session['username']\\n    room = session['room']\\n    leave_room(room)\\n    message = f'{username} has left the room.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef message(data):\\n    username = session['username']\\n    room = session['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app, debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Real-Time Chat Application</title>\\n    <script src='https://cdn.socket.io/4.3.1/socket.io.min.js'></script>\\n</head>\\n<body>\\n    <h1>Real-Time Chat Application</h1>\\n    <div id='status'></div>\\n    <div id='chat'></div>\\n    <form id='join-form'>\\n        <label for='username'>Username:</label>\\n        <input type='text' name='username' id='username'>\\n        <label for='room'>Room:</label>\\n        <input type='text' name='room' id='room'>\\n        <input type='submit' value='Join Room'>\\n    </form>\\n    <form id='message-form'>\\n        <input type='text' name='message' id='message'>\\n        <input type='submit' value='Send'>\\n    </form>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat');\\n        var joinForm =        document.getElementById('join-form');\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message = document.getElementById('message').value;\\n            socket.emit('message', {\\n                message: message\\n            });\\n            document.getElementById('message').value = '';\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = message;\\n            statusElement.appendChild(pElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var pElement = document.createElement('p');\\n            pElement.textContent = username + ': ' + message;\\n            chatElement.appendChild(pElement);\\n        });\\n    </script>\\n</body>\\n</html>\"\n}"}
{
  "text": "Create a Flask application that allows users to upload and download files. The application should have a homepage with a form to upload a file, and a page to download the uploaded files. The uploaded files should be stored in a 'uploads' folder within the application directory.",
  "file_structure": "{\"app.py\":\"\",\"uploads\":\"\"}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, request, send_file\nimport os\n\napp = Flask(__name__)\n\nUPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/upload', methods=['POST'])\ndef upload():\n    file = request.files['file']\n    file.save(os.path.join(app.config['UPLOAD_FOLDER'], file.filename))\n    return 'File uploaded successfully!'\n\n@app.route('/download/<filename>')\ndef download(filename):\n    return send_file(os.path.join(app.config['UPLOAD_FOLDER'], filename), as_attachment=True)\n\nif __name__ == '__main__':\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>File Uploader/Downloader</title>\\n</head>\\n<body>\\n    <h1>File Uploader/Downloader</h1>\\n    <form method='POST' action='/upload' enctype='multipart/form-data'>\\n        <input type='file' name='file'>\\n        <input type='submit' value='Upload'>\\n    </form>\\n    <br>\\n    <h2>Uploaded Files</h2>\\n    <ul>\\n        {% for file in os.listdir(app.config['UPLOAD_FOLDER']) %}\\n        <li><a href='/download/{{ file }}'>{{ file }}</a></li>\\n        {% endfor %}\\n    </ul>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a Flask application that displays a real-time video stream from a webcam. The webpage should update the video stream every second without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, Response, render_template\\nimport cv2\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the video stream\\ndef get_stream():\\n    camera = cv2.VideoCapture(0)\\n    while True:\\n        success, frame = camera.read()\\n        if not success:\\n            break\\n        ret, buffer = cv2.imencode('.jpg', frame)\\n        frame = buffer.tobytes()\\n        yield (b'--frame\\r\\n'\\n               b'Content-Type: image/jpeg\\r\\n\\r\\n' + frame + b'\\r\\n')\\n\\n# Create a Flask route to stream the video\\n@app.route('/stream')\\ndef stream():\\n    return Response(get_stream(), mimetype='multipart/x-mixed-replace; boundary=frame')\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>Real-Time Webcam Stream</title>\\n</head>\\n<body>\\n    <h1>Real-Time Webcam Stream</h1>\\n    <img src=\\\"/stream\\\">\\n</body>\\n</html>\"}"
}
{
  "text": "Create a real-time stock market dashboard using Flask and Plotly. The dashboard should display real-time stock prices and volume for a specified list of stocks, and should update automatically without requiring the user to refresh the page.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"},\"static\":{\"style.css\":\"\",\"plotly-latest.min.js\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template, Response\\nimport plotly\\nimport plotly.graph_objs as go\\nimport yfinance as yf\\nimport time\\n\\napp = Flask(__name__)\\n\\n# Define a function to get the stock prices and volume data\\ndef get_stock_data(stock_tickers):\\n    data = []\\n    for ticker in stock_tickers:\\n        stock = yf.Ticker(ticker)\\n        hist = stock.history(period='1d')\\n        stock_data = go.Candlestick(x=hist.index, open=hist['Open'], high=hist['High'], low=hist['Low'], close=hist['Close'], name=ticker)\\n        data.append(stock_data)\\n    return data\\n\\n# Create a Flask route to stream the stock data\\n@app.route('/stream')\\ndef stream_stock_data():\\n    stock_tickers = ['AAPL', 'GOOGL', 'TSLA', 'AMZN']\\n    while True:\\n        stock_data = get_stock_data(stock_tickers)\\n        yield plotly.io.to_json({'data': stock_data, 'layout': {'title': 'Real-Time Stock Market Dashboard'}})\\n        time.sleep(10)\\n\\n# Create a Flask route to render the webpage\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <link rel=\\\"stylesheet\\\" href=\\\"{{ url_for('static', filename='style.css') }}\\\">\\n    <script src=\\\"{{ url_for('static', filename='plotly-latest.min.js') }}\\\"></script>\\n    <title>Real-Time Stock Market Dashboard</title>\\n</head>\\n<body>\\n    <h1>Real-Time Stock Market Dashboard</h1>\\n    <div id=\\\"chart\\\"></div>\\n    <script>\\n        const chartElement = document.getElementById('chart');\\n        const eventSource = new EventSource('/stream');\\n        eventSource.addEventListener('message', function(event) {\\n            const data = JSON.parse(event.data);\\n            Plotly.newPlot(chartElement, data);\\n        });\\n    </script>\\n</body>\\n</html>\",\"static/style.css\":\"body {\\n    font-family: Arial, Helvetica, sans-serif;\\n}\\n\\nh1 {\\n    text-align: center;\\n}\\n\\n#chart {\\n    margin: 20px auto;\\n    max-width: 100%;\\n    height: 500px;\\n}\"}"
}
{
  "text": "Create a real-time chat application using Flask-SocketIO that allows users to join a chat room and send messages to each other in real-time.",
  "file_structure": "{\"app.py\":\"\",\"templates\":{\"index.html\":\"\"}}",
  "code": "{\"app.py\":\"from flask import Flask, render_template\\nfrom flask_socketio import SocketIO, join_room, leave_room, emit\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'secret_key'\\nsocketio = SocketIO(app)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html')\\n\\n@socketio.on('join')\\ndef on_join(data):\\n    username = data['username']\\n    room = data['room']\\n    join_room(room)\\n    message = username + ' has joined the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('leave')\\ndef on_leave(data):\\n    username = data['username']\\n    room = data['room']\\n    leave_room(room)\\n    message = username + ' has left the chat.'\\n    emit('status', {'message': message}, room=room)\\n\\n@socketio.on('message')\\ndef on_message(data):\\n    username = data['username']\\n    room = data['room']\\n    message = data['message']\\n    emit('message', {'username': username, 'message': message}, room=room)\\n\\nif __name__ == '__main__':\\n    socketio.run(app)\",\"templates/index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Flask-SocketIO Chat</title>\\n</head>\\n<body>\\n    <div id=\\\"chat\\\">\\n        <h1>Flask-SocketIO Chat</h1>\\n        <div id=\\\"status\\\"></div>\\n        <div id=\\\"chat-window\\\"></div>\\n        <form id=\\\"message-form\\\">\\n            <input id=\\\"message\\\" type=\\\"text\\\" placeholder=\\\"Enter a message...\\\" autocomplete=\\\"off\\\">\\n            <button type=\\\"submit\\\">Send</button>\\n        </form>\\n    </div>\\n    <script src=\\\"https://cdn.socket.io/4.1.2/socket.io.min.js\\\"></script>\\n    <script>\\n        var socket = io();\\n        var statusElement = document.getElementById('status');\\n        var chatElement = document.getElementById('chat-window');\\n        var joinForm = document.getElementById('join-form');\\n        var messageForm = document.getElementById('message-form');\\n        joinForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var username = document.getElementById('username').value;\\n            var room = document.getElementById('room').value;\\n            socket.emit('join', {\\n                username: username,\\n                room: room\\n            });\\n            joinForm.style.display = 'none';\\n            messageForm.style.display = 'block';\\n        });\\n        messageForm.addEventListener('submit', function(event) {\\n            event.preventDefault();\\n            var message= document.getElementById('message').value;\\n            socket.emit('message', {\\n                username: username,\\n                room: room,\\n                message: message\\n            });\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('message', function(data) {\\n            var username = data.username;\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(username + ': ' + message);\\n            messageElement.appendChild(messageText);\\n            chatElement.appendChild(messageElement);\\n        });\\n        socket.on('status', function(data) {\\n            var message = data.message;\\n            var messageElement = document.createElement('div');\\n            var messageText = document.createTextNode(message);\\n            messageElement.appendChild(messageText);\\n            statusElement.appendChild(messageElement);\\n        });\\n    </script>\\n</body>\\n</html>\"}"
}
{
  "text": "Create a basic portfolio website using HTML, CSS, and JavaScript. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\",\"script.js\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n    <script src=\\\"script.js\\\"></script>\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form action=\\\"#\\\">\\n                <div>\\n                    <label for=\\\"name\\\">Name:</label>\\n                    <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"email\\\">Email:</label>\\n                    <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\">\\n                </div>\\n                <div>\\n                    <label for=\\\"message\\\">Message:</label>\\n                    <textarea id=\\\"message\\\" name=\\\"message\\\"></textarea>\\n                </div>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n    <footer>\\n        <p>&copy; 2023 My Portfolio</p>\\n    </footer>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\n\\nbody {\\n    margin: 0;\\n    font-family: 'Segoe UI', sans-serif;\\n}\\n\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    padding: 1rem;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2rem;\\n}\\n\\nheader nav ul {\\n    list-style-type: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n}\\n\\nheader nav ul li {\\n    margin: 0 1rem;\\n}\\n\\nheader nav ul li a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\nmain {\\n    margin: 2rem;\\n}\\n\\nsection {\\n    margin: 2rem 0;\\n}\\n\\nsection h2 {\\n    margin: 0;\\n}\\n\\nsection p {\\n    margin-top: 1rem;\\n}\\n\\n.project-card {\\n    background-color: #fff;\\n    border: 1px solid #ccc;\\n    padding: 1rem;\\n    border-radius: 0.25rem;\\n    box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.075);\\n    margin-bottom: 2rem;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    max-width: 100%;\\n}\\n\\nfooter {\\n    background-color: #333;\\n    color: #fff;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    height: 3rem;\\n}\\n\\nfooter p {\\n    margin: 0;\\n}\\n\",\"script.js\":\"// Add active class to the current navbar link\\nvar header = document.getElementById(\"navbar\");\\nvar links = header.getElementsByClassName(\"nav-link\");\\nfor (var i = 0; i < links.length; i++) {\\n  links[i].addEventListener(\"click\", function() {\\n    var current = document.getElementsByClassName(\"active\");\\n    current[0].className = current[0].className.replace(\" active\", \"\");\\n    this.className += \" active\";\\n  });\\n}\"}"
}
{
  "text": "Create a basic portfolio website using only HTML and CSS. The website should have an About Me section, a Projects section, and a Contact section. The Projects section should display cards with information about each project, and the Contact section should include a form for users to send messages.",
  "file_structure": "{\"index.html\":\"\",\"styles.css\":\"\"}",
  "code": "{\"index.html\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>My Portfolio</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n</head>\\n<body>\\n    <header>\\n        <h1>My Portfolio</h1>\\n        <nav>\\n            <ul>\\n                <li><a href=\\\"#about\\\">About Me</a></li>\\n                <li><a href=\\\"#projects\\\">Projects</a></li>\\n                <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </nav>\\n    </header>\\n    <main>\\n        <section id=\\\"about\\\">\\n            <h2>About Me</h2>\\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus. Nam faucibus diam at lacus varius, id congue arcu aliquet. Suspendisse potenti. Pellentesque ullamcorper lobortis risus non facilisis. Nulla vel velit eu dolor placerat finibus. Proin ut ante vel sapien sollicitudin vestibulum.</p>\\n        </section>\\n        <section id=\\\"projects\\\">\\n            <h2>Projects</h2>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 1</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+1\\\" alt=\\\"Project 1\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 2</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=Project+2\\\" alt=\\\"Project 2\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n            <div class=\\\"project-card\\\">\\n                <h3>Project 3</h3>\\n                <img src=\\\"https://via.placeholder.com/300x200.png?text=...Project 3\\\" alt=\\\"Project 3\\\">\\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sit amet turpis ut urna rutrum cursus.</p>\\n                <a href=\\\"#\\\">Learn More</a>\\n            </div>\\n        </section>\\n        <section id=\\\"contact\\\">\\n            <h2>Contact</h2>\\n            <form>\\n                <label for=\\\"name\\\">Name:</label>\\n                <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\" required>\\n                <label for=\\\"email\\\">Email:</label>\\n                <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\" required>\\n                <label for=\\\"message\\\">Message:</label>\\n                <textarea id=\\\"message\\\" name=\\\"message\\\" required></textarea>\\n                <button type=\\\"submit\\\">Send</button>\\n            </form>\\n        </section>\\n    </main>\\n</body>\\n</html>\",\"styles.css\":\"/* Global styles */\\nbody {\\n    font-family: Arial, sans-serif;\\n    margin: 0;\\n    padding: 0;\\n}\\n\\n/* Header styles */\\nheader {\\n    background-color: #333;\\n    color: #fff;\\n    padding: 20px;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader h1 {\\n    margin: 0;\\n    font-size: 2em;\\n}\\n\\nheader ul {\\n    list-style: none;\\n    margin: 0;\\n    padding: 0;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\nheader li {\\n    margin: 0 10px;\\n}\\n\\nheader a {\\n    color: #fff;\\n    text-decoration: none;\\n}\\n\\n/* Main content styles */\\nmain {\\n    max-width: 800px;\\n    margin: 20px auto;\\n    padding: 0 20px;\\n}\\n\\nsection {\\n    margin-bottom: 50px;\\n}\\n\\nsection h2 {\\n    margin-top: 0;\\n}\\n\\n.project-card {\\n    border: 1px solid #ccc;\\n    border-radius: 5px;\\n    padding: 10px;\\n    margin-bottom: 20px;\\n}\\n\\n.project-card h3 {\\n    margin-top: 0;\\n}\\n\\n.project-card img {\\n    width: 100%;\\n}\\n\\n/* Contact form styles */\\nform {\\n    display: flex;\\n    flex-direction: column;\\n}\\n\\nlabel {\\n    margin-bottom: 10px;\\n}\\n\\ninput, textarea {\\n    margin-bottom: 20px;\\n    padding: 10px;\\n    border-radius: 5px;\\n    border: none;\\n    background-color: #333;\\n    color: #fff;\\n    cursor: pointer;\\n    border-radius: 5px;\\n}\"\n}"
}
